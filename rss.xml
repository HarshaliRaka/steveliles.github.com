<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>ExoMemory - Steve Liles</title>
    <link>http://steveliles.github.com</link>
    <description>Overspill from my brain - because I'll forget it if I don't write it down...</description>
    <image>
      <url>http://steveliles.github.com/images/viking.png</url>
      <title>ExoMemory - Steve Liles</title>
      <link>http://steveliles.github.com</link>
    </image>
    <language>en-gb</language>
    <copyright>Copyright 2011 Steve Liles. The contents of this feed are available for non-commercial use only.</copyright>
    <generator>Steve's own home-grown blog generator</generator>
          <item>
        <title><![CDATA[Cross-domain inter-frame communication in javascript]]></title>
        <link><![CDATA[http://steveliles.github.com/cross_domain_inter_frame_communication_in_javascript.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/cross_domain_inter_frame_communication_in_javascript.html</guid>
        <description><![CDATA[<p><em>Requirement:</em> Web-page A from domain A' loads web-page B from domain B' into an iframe. Web-page B wants to be able to render some content into the DOM of web-page A (outside of the view-port described by B's iframe). The content which B renders into A needs to be able to HTTP GET and POST data back to the domain B', handle the responses, and update the rendered content in web-page A.</p>

<p><em>Problems:</em></p>

<ul>
<li>Scripts loaded into pages from different domains cannot interact so, for example, page B's scripts cannot <em>simply</em>* render content into the parent frame (page A)</li>
<li>Page A cannot <em>simply</em>* use XMLHTTPRequest to GET/POST/PUT/DELETE to host B</li>
</ul>

<p>[*] I say "simply" because you can't just expect it to work like it would in a same-domain environment, but it is possible!</p>

<h3>Escaping from an iframe</h3>

<p>Lets start with rendering content into a parent frame. To get concrete, lets say that domain A is www.domain.com, while domain B is sub.domain.com. </p>

<p>Yes, they are sub-domains of a common root. No, B is <em>not</em> allowed to modify the DOM of A, or communicate with scripts in A, because web-browsers won't allow that unless the ports, protocols, <em>and</em> domains match <em>exactly</em>.</p>

<p>The only way for B to escape from the iframe is to have co-operation from A. That co-operation can come in one of two forms: </p>

<ol>
<li>Both pages must explicitly set the <code>document.domain</code> property to the same value (e.g. domain.com). Even if one of the pages is served directly from "domain.com", the act of explicitly setting the domain is required for this technique to work - it signals to the browser that the two pages want to collaborate.</li>
<li>Have host A serve an iframe-buster page (more below)</li>
</ol>

<h4>Iframe Buster</h4>

<p>Host A can serve a page which loads scripts on behalf of B, sometimes known as an <a href="http://www.adopstools.net/?section=miscellaneous&amp;page=iframes">iframe-buster</a>. </p>

<p>This is a common technique in the ad-delivery world to allow complex ads like page take-over's to escape from the iframe they are loaded into. Note that this is not an exploit as such, since it requires host A to be complicit.</p>

<p>To illustrate how it works, here's a very simple iframe-buster:</p>

<pre><code>&lt;html&gt;
  &lt;p&gt;TODO: oops looks like I forgot to come back and fill this in!&lt;/p&gt;
&lt;/html&gt;
</code></pre>

<p>The host-page A will initially load a page from host B. That page B will load the iframe-buster with some parameters which tell the iframe-buster what scripts to load. The initial page B might look something like this:</p>

<pre><code>&lt;html&gt;
  &lt;p&gt;TODO: oops looks like I forgot to come back and fill this in!&lt;/p&gt;      
&lt;/html&gt;
</code></pre>

<p>&hellip;</p>

<h4>Rendering into the parent DOM</h4>

<p>Now that we have assistance from the host-page domain, our iframe can communicate directly with the DOM and scripts in the parent frame, using the <code>window.parent</code> handle.</p>

<pre><code>var _ctx = window.parent.document;
var _div = _ctx.createElement("div");
_div.innerHTML = '&amp;#60;h1&gt;Hooray!&amp;#60;/h1&gt;';
_ctx.body.appendChild(_div);
</code></pre>

<p>Great!</p>

<h3>Making HTTP requests</h3>

<p>Now we want to fetch some JSON data from host B by HTTP GET, and render it in the parent frame. For GET requests we might be OK - we just need the host API to support JSONP. If it doesn't we need one of the other techniques as for making POST requests â€¦</p>

<p>What if we want to POST some data to host B? We can't use XMLHTTPRequest to POST from A to B, as the browser security policies won't allow it. So, what are our options?</p>

<ol>
<li>HTML Form POST</li>
<li>CORS (Cross Origin Resource Sharing)</li>
<li>Pipelined communication through another frame</li>
</ol>

<h4>HTML Form POST</h4>

<p>We could use a form POST, which <em>is</em> allowed to POST to another domain (mostly because the HTML Form POST spec pre-dates the tightened security policies), and will receive the response. </p>

<p>You'll need to do a bit of scripting to wrap things up so that you can register callbacks and have things behave <em>similarly</em> to an XMLHTTPRequest.</p>

<p>This method has the advantage of broad browser compatibility, but the implementation is by necessity less clean, and you lose some of the advantages of XMLHTTPRequest (e.g. the ability to check the response status code). </p>

<p>If you're dealing with a pure RESTful API you'll struggle without the ability to check status codes. </p>

<p>If you have help from the server-side you can probably engineer your way around most of the problems, and even tunnel non-POST API calls by using hidden FORM params and a server-side intercept (e.g. Servlet Filter) to translate the request for you before it hits the API handlers. </p>

<p>That said, if you have control of (or co-operation from) the server-side you'll probably want to look at one of the other methods below.</p>

<p>Advantages:</p>

<ol>
<li>Good browser compatibility</li>
<li>Easily understood</li>
</ol>

<p>Disadvantages:</p>

<ol>
<li>Poor handling of pure RESTful APIs</li>
</ol>

<h4>CORS (Cross Origin Resource Sharing)</h4>

<p>We could use <a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a>, which involves the web-server B checking and sending additional HTTP headers. </p>

<p>This requires a relatively modern browser and some server-side work to check and set additional HTTP headers. CORS is nice because it allows us to conveniently use XMLHTTPRequest for all of our requests (and no need for JSONP).</p>

<p>CORS might put a little extra demand on your servers, as browsers "pre-flight" requests as part of the CORS protocol.</p>

<p>Advantages:</p>

<ol>
<li>Just like working in a same-domain environment (good for RESTful API handling)</li>
<li>CORS is an emerging standard, so you don't necessarily need to own/operate the host for this method to be a realistic possibility</li>
</ol>

<p>Disadvantages:</p>

<ol>
<li>Requires modern browser</li>
<li>Requires that the host supports CORS</li>
<li>Some HTTP request overhead (pre-flight)</li>
</ol>

<h4>Pipeline communication through another iframe</h4>

<p>A third option is to pipeline your HTTP calls through another iframe - loaded from the domain of the host you want to make calls to.</p>

<p>In newer browsers we can use <code>window.postMessage</code> to send text between frames loaded from different domains. </p>

<p>Since this text can be JSON, and you can register event-handlers for the "message" event, you can set up a communication-frame per host that you need to talk to, and from inside that frame you can use straight-forward XMLHTTPRequest calls, same-domain style.</p>

<p>There are some neat libraries that use a variety of fallback methods (message-passing via window.name; flash) to make this work in older browsers. The most popular one seems to be <a href="http://easyxdm.net/wp/">EasyXDM</a>.</p>

<p>Advantages:
1. Good browser compatibility (use libraries like EasyXDM)
2. Good for RESTful API handling</p>

<p>Disadvantages:</p>

<ol>
<li>More complex set-up</li>
<li>You need control of the host</li>
<li>There's some small overhead in piping everything as strings through nested iframe's</li>
</ol>

<h3>Summary</h3>

<p>As with everything, there is no one-size-fits-all solution, and some flexibility and compromise is likely to be necessary. For the project I'm working on currently I'm using iframe busters, a little CORS, and a lot of pipelining through another frame, but YMMV.</p>
]]></description>
          <category>javascript</category>
          <category>iframe</category>
          <category>window</category>
          <category>cross-domain</category>
          <category>postMessage</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Fri, 11 Jan 2013 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Subversion 1.7 Eclipse integration in Ubuntu 12]]></title>
        <link><![CDATA[http://steveliles.github.com/subversion_1_7_eclipse_integration_in_ubuntu_12.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/subversion_1_7_eclipse_integration_in_ubuntu_12.html</guid>
        <description><![CDATA[<p>Almost a year ago I <a href="http://steveliles.github.com/subversion_1_7_eclipse_integration_in_ubuntu.html">posted</a> about getting Subclipse/Subversion/Eclipse/Javahl to play nicely together in Ubuntu 11.10. </p>

<p>Things have changed a little with Quantal Quetzal (notably that canonical have updated their repo's to support SVN 1.7.7 and that the libsvn-java installation has moved), so here's an updated note for getting Subversion 1.7.x integration working with Eclipse (3.7.x) and Subclipse 1.8.x on Ubuntu 12.10.</p>

<p>I'm assuming you already have Eclipse and Subclipse installed (with all the optional extras). </p>

<p>To use the native svn integration you will of course need subversion installed, so install Subversion from canonical's repo's - <code>sudo apt-get install subversion</code>.</p>

<p>You'll also need libsvn-java, to allow subclipse to talk to svn - <code>sudo apt-get install libsvn-java</code>.</p>

<p>To enable Eclipse to see your libsvn-java installation, go to the eclipse install directory (I install in <code>/home/steve/dev/tools/eclipse</code>) and edit the eclipse.ini file. </p>

<p>You need to add <code>-Djava.library.path=/usr/lib/x86_64-linux-gnu/jni/</code>, which is where libsvn-java's native libraries get installed. Add it immediately following <code>-vmargs</code>. My eclipse.ini file now looks like this:</p>

<pre><code>-startup
plugins/org.eclipse.equinox.launcher_1.2.0.v20110502.jar
--launcher.library
plugins/org.eclipse.equinox.launcher.gtk.linux.x86_64_1.1.100.v20110505
-showsplash
org.eclipse.platform
--launcher.XXMaxPermSize
256m
--launcher.defaultAction
openFile
-vmargs
-Djava.library.path=/usr/lib/x86_64-linux-gnu/jni/
-Xms40m
-Xmx600m
</code></pre>

<p>If you use Subclipse but never previously installed Javahl you probably see irritating warning dialogs the first time you do <em>anything</em> in Eclipse after a restart. Installing javahl correctly will prevent those :).</p>
]]></description>
          <category>ubuntu</category>
          <category>eclipse</category>
          <category>subversion</category>
          <category>javahl</category>
          <category>subclipse</category>
          <category>quantal</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Tue, 13 Nov 2012 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Setting up embedded Jetty 8 and Spring MVC with Maven and NO XML]]></title>
        <link><![CDATA[http://steveliles.github.com/setting_up_embedded_jetty_8_and_spring_mvc_with_maven_and_no_xml.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/setting_up_embedded_jetty_8_and_spring_mvc_with_maven_and_no_xml.html</guid>
        <description><![CDATA[<p>You can check out the complete source of this simple project from <a href="https://github.com/steveliles/jetty-embedded-spring-mvc-noxml">github</a>. If you want to set up <em>with</em> XML configuration, check my <a href="http://steveliles.github.com/setting_up_embedded_jetty_8_and_spring_mvc_with_maven.html">earlier post</a>.</p>

<p>Starting a new project, and irritated by xml configuration, I thought I'd try Spring @MVC (annotation configured MVC) with Jetty-8 embedded using the no xml servlet 3.0 configuration approach.</p>

<h3>Initializing the Servlet Context</h3>

<p>The Servlet 3 spec introduces the ability to configure the servlet context from code, via implementations of <code>ServletContainerInitializer</code>. You can dynamically configure Servlets and Filters here.</p>

<p>Spring @MVC provides an implementation of <code>ServletContainerInitializer</code> (<code>SpringServletContainerInitializer</code>) which tells the container to scan for classes which implement <code>WebApplicationInitializer</code>, so when using @MVC we need to provide an implementation of <code>WebApplicationInitializer</code>. </p>

<p>Here's a simple one that gets us up and running with a Spring DispatcherServlet mapped to "/" and JSP processing for *.jsp requests (including those forwarded from Controllers):</p>

<pre><code>public class WebAppInitializer implements WebApplicationInitializer
{
    private static final String JSP_SERVLET_NAME = "jsp";
    private static final String DISPATCHER_SERVLET_NAME = "dispatcher";

    @Override
    public void onStartup(ServletContext aServletContext) 
    throws ServletException
    {       
        registerListener(aServletContext);
        registerDispatcherServlet(aServletContext);
        registerJspServlet(aServletContext);
    }

    private void registerListener(ServletContext aContext)
    {
        AnnotationConfigWebApplicationContext _root = 
            createContext(ApplicationModule.class);
        aContext.addListener(new ContextLoaderListener(_root));
    }

    private void registerDispatcherServlet(ServletContext aContext)
    {
        AnnotationConfigWebApplicationContext _ctx = 
            createContext(WebModule.class);
        ServletRegistration.Dynamic _dispatcher = 
            aContext.addServlet(
                DISPATCHER_SERVLET_NAME, new DispatcherServlet(_ctx));
        _dispatcher.setLoadOnStartup(1);
        _dispatcher.addMapping("/");
    }

    private void registerJspServlet(ServletContext aContext) {
        ServletRegistration.Dynamic _dispatcher = 
            aContext.addServlet(JSP_SERVLET_NAME, new JspServlet());
        _dispatcher.setLoadOnStartup(1);
        _dispatcher.addMapping("*.jsp");
    }

    private AnnotationConfigWebApplicationContext createContext(
        final Class&lt;?&gt;... aModules)
    {
        AnnotationConfigWebApplicationContext _ctx = 
            new AnnotationConfigWebApplicationContext();
        _ctx.register(aModules);
        return _ctx;
    }
}
</code></pre>

<p>Notice here that I am registering two "Modules" (a naming convention I've adopted for my Spring @Configuration classes) - <code>ApplicationModule</code> and <code>WebModule</code>. I like to configure the various layers of the application separately. </p>

<p>In <code>ApplicationModule</code> I'll put things like scheduled operations and any dependencies those operations need, while anything that is only needed during web request handling I'll put in <code>WebModule</code>.</p>

<p><code>ApplicationModule</code> for a simple web-app might be unnecessary.</p>

<pre><code>@Configuration
public class ApplicationModule
{
    // Declare "application" scope beans here (ie., 
    // beans that are not _only_ used by the web context)
}
</code></pre>

<p><code>WebModule</code> will be used to configure Spring MVC, and for a simple web-app might look like this:</p>

<pre><code>@EnableWebMvc
@Configuration
@ComponentScan(basePackages={"com.sjl"})
public class WebModule extends WebMvcConfigurerAdapter
{
    @Override
    public void addViewControllers(ViewControllerRegistry aRegistry)
    {
        aRegistry.addViewController("/").setViewName("index");
    }

    @Override
    public void addResourceHandlers(ResourceHandlerRegistry aRegistry)
    {
        ResourceHandlerRegistration _res = 
            aRegistry.addResourceHandler("/WEB-INF/view/**/*");
        _res.addResourceLocations(
            "classpath:/META-INF/webapp/WEB-INF/view/");
    }

    @Bean
    public ViewResolver viewResolver() 
    {
        UrlBasedViewResolver _viewResolver = 
            new UrlBasedViewResolver();
        _viewResolver.setViewClass(JstlView.class);
        _viewResolver.setPrefix("WEB-INF/view/");
        _viewResolver.setSuffix(".jsp");
        return _viewResolver;
    }
}
</code></pre>

<p>I'm extending Spring's WebMvcConfigurerAdapter which provides a host of conveniences. Note that this <code>WebModule</code> sets the annotations @EnableWebMvc and @ComponentScan which are equivalent to the xml configuration you're probably familiar with:</p>

<pre><code>&lt;mvc:annotation-driven/&gt;   
&lt;context:component-scan base-package="com.sjl" /&gt;
</code></pre>

<p>The <code>ResourceHandlerRegistration</code> provides a mapping from requests forwarded to <code>/WEB-INF/view/</code> onto the classpath location of the actual files. Without this, for example, Jetty won't be able to find your jsp files when <code>Controller</code>'s forward requests to <code>View</code>'s (the <code>ViewResolver</code>'s prefix must be matched by the <code>ResourceHandler</code>'s path-pattern).</p>

<p>What remains is to instantiate Jetty and have it find its configuration from the classpath. I won't list that here as its quite long, and the full working example is in <a href="https://github.com/steveliles/jetty-embedded-spring-mvc-noxml">github</a>. </p>

<p>An important thing to point out is that there is a <a href="http://stackoverflow.com/questions/13222071/spring-3-1-webapplicationinitializer-embedded-jetty-8-annotationconfiguration">problem with current versions of Jetty (8.1.7)</a> where Jetty won't find your <code>WebApplicationInitializer</code> classes unless they are either inside a Jar or in the WEB-INF/classes. When running embedded from your IDE neither of these will be true. </p>

<p>This results in log output like "No Spring WebApplicationInitializer types detected on classpath" and is why, in my WebServer class, I set a subclass of <code>AnnotationConfiguration</code> which overrides the default Jetty behaviour to also search for non-jar'd classes on the classpath (<a href="https://github.com/steveliles/jetty-embedded-spring-mvc-noxml/blob/master/src/main/java/com/sjl/WebServer.java">see the code</a>from around line 75).</p>
]]></description>
          <category>Jetty</category>
          <category>Embedded</category>
          <category>Spring</category>
          <category>MVC</category>
          <category>Maven</category>
          <category>no-xml</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Tue, 13 Nov 2012 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Configuring global exception-handling in Spring MVC]]></title>
        <link><![CDATA[http://steveliles.github.com/configuring_global_exception_handling_in_spring_mvc.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/configuring_global_exception_handling_in_spring_mvc.html</guid>
        <description><![CDATA[<p>It took a couple of hours to figure this out - the mighty Google and <em>even</em> StackOverflow let me down - in the end I had to actually read Spring's DispatcherServlet code! (I know, right!?)</p>

<p>Here's the problem I was having - I'm using Spring MVC's data-binding tricks to inject objects into my <code>@Controller</code>'s methods like this: </p>

<pre><code>@Controller
@RequestMapping("things/{thing}.html")
class MyController {
    public ModelAndView thing(@PathVariable Thing aThing) {
        // Thing should be magically mapped from 
        // the {thing} part of the url

        return new ModelAndView(..blah..);
    }
}
</code></pre>

<p>I have global <code>Formatter</code>'s configured as described in <a href="http://steveliles.github.com/configuring_global_data_binding_formatters_in_spring_mvc.html">my previous post</a>, and I want my method parameters to be automatically conjured from <code>@PathVariable</code>'s and so on. </p>

<p>So far so good .. until I make a screw-up and parameter binding fails for any reason, at which point Spring's exception-handling kicks in. When that happens, Spring eats the exception and dumps me on the worlds shittiest error page saying:</p>

<pre><code>HTTP ERROR 400
Problem accessing /your/url/whatever.html. Reason:
    Bad Request
</code></pre>

<p>Wow, thanks Spring!</p>

<p>To blame here are Spring's default set of <code>HandlerExceptionResolver</code>'s, which are specified in <code>DispatcherServlet.properties</code> in the spring-webmvc jar. In 3.1.2 it says:</p>

<pre><code>org.springframework.web.servlet.HandlerExceptionResolver=
    org.springfr..AnnotationMethodHandlerExceptionResolver,
    org.springfr..ResponseStatusExceptionResolver,
    org.springfr..DefaultHandlerExceptionResolver
</code></pre>

<p>(I've shortened the package-names to keep things readable)</p>

<p>Beats me why the default is to eat the exception without even logging it when Spring is normally so chatty about everything it does, but there you go. OK, so we need to configure some custom exception-handling so we can find out what's actually going wrong. There are two ways (that I know of) to do that:</p>

<ol>
<li>Use <code>@ExceptionHandler</code> annotated methods in our <code>@Controller</code>'s to handle exceptions on a per-controller basis (or across more than one <code>@Controller</code> if you have a hierarchy and implement the <code>@ExceptionHandler</code> method high-up in the hierarchy).</li>
<li>Register a <code>HandlerExceptionResolver</code> implementation to deal with exceptions globally (ie. across all <code>@Controller</code>'s, regardless of hierarchy).</li>
</ol>

<h3>@ExceptionHandler</h3>

<p>These bad-boys are straight-forward to use - just add a method in your <code>@Controller</code> and annotate it with <code>@ExceptionHandler(SomeException.class)</code> - something like this:</p>

<pre><code>@Controller
class MyExceptionalController {
    @ExceptionHandler(Exception.class) 
    public void handleExceptions(Exception anExc) {
        anExc.printStackTrace(); // do something better than this ;)
    }

    @RequestMapping("/my/favourite/{thing}")
    public void showThing(@PathVariable Thing aThing) {
        throw new RuntimeException("boom");
    }
}
</code></pre>

<p>That exception-handler method will now be triggered for any exceptions that occur while processing this controller - including any exceptions that occur while trying to format the Thing parameter.</p>

<p>There's a bit more to it, for example you can parameterise the annotation with an array of exception-types. Shrug.</p>

<p>Just for completeness its worth mentioning that when formatting/conversion fails the exception presented to the <code>@ExceptionHandler</code> will be a <code>TypeMismatchException</code>, possibly wrapping a <code>ConversionFailedException</code> which in turn would wrap any exception thrown by your <code>Formatter</code> classes.</p>

<h3>Custom HandlerExceptionResolver</h3>

<p>This is the better approach, IMHO: Set up a HandlerExceptionResolver to deal with exceptions across all <code>@Controller</code>'s and override with <code>@ExceptionHandler</code>'s if you have specific cases that need special handling.</p>

<p>A deadly simple <code>HandlerExceptionResolver</code> might look like this:</p>

<pre><code>package com.sjl.web;

import org.springframework.core.*;
import org.springframework.web.servlet.*

public class LoggingHandlerExceptionResolver 
implements HandlerExceptionResolver, Ordered {
    public int getOrder() {
        return Integer.MIN_VALUE; // we're first in line, yay!
    }

    public ModelAndView resolveException(
        HttpServletRequest aReq, HttpServletResponse aRes,
        Object aHandler, Exception anExc
    ) {
        anExc.printStackTrace(); // again, you can do better than this ;)
        return null; // trigger other HandlerExceptionResolver's
    }
}
</code></pre>

<p>Two things worth pointing out here:</p>

<ol>
<li>We are implementing <code>Ordered</code> and returning <code>Integer.MIN_VALUE</code> - this puts us at the front of the queue for resolving exceptions (and ahead of the default). If we don't implement <code>Ordered</code> we won't see the exception before one of the default handlers grabs and handles it. The default handlers appear to be registered with orders of <code>Integer.MAX_VALUE</code>, so any int below that will do.</li>
<li>We are returning <code>null</code> from the <code>resolveException</code> method - doing this means that the other handlers in the chain get a chance to deal with the exception. Alternatively we can return a <code>ModelAndView</code> if we want to (and if we know how to deal with this particular kind of exception), which will prevent handlers further down the chain from seeing the exception.</li>
</ol>

<p>There are some classes in Spring's <code>HandlerExceptionResolver</code> hierarchy that you might want to look at sub-classing - <code>AbstractHandlerMethodExceptionResolver</code> and <code>SimpleMappingExceptionResolver</code> are good ones to check first.</p>

<p>Of course we need to make Spring's <code>DispatcherServlet</code> aware of our custom <code>HandlerExceptionResolver</code>. The only configuration we need is:</p>

<pre><code>&lt;bean class="com.sjl.web.LoggingHandlerExceptionResolver"/&gt;
</code></pre>

<p>No really, that's it. </p>

<p>There's an unusually high level of magic surrounding the <code>DispatcherServlet</code>, so although you must define your resolver as a bean in your spring config <em>you do not need to inject it into any other spring beans</em>. The <code>DispatcherServlet</code> will search for beans implementing the interface and automagically use them.</p>
]]></description>
          <category>Spring</category>
          <category>MVC</category>
          <category>@RequestMapping</category>
          <category>data-binding</category>
          <category>exception handling</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Fri, 05 Oct 2012 00:00:00 +0100</pubDate>
      </item>
      <item>
        <title><![CDATA[Configuring global data-binding formatters in Spring MVC]]></title>
        <link><![CDATA[http://steveliles.github.com/configuring_global_data_binding_formatters_in_spring_mvc.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/configuring_global_data_binding_formatters_in_spring_mvc.html</guid>
        <description><![CDATA[<p>Here's a very quick how-to for configuring Spring-MVC (Spring 3.1.x) to use a global set of formatters for converting (data-binding) web-request and form parameters for use in Controllers, rather than having to have an <code>@InitBinder</code> annotated method in all your <code>@Controller</code>'s.</p>

<p>In your spring-web configuration:</p>

<pre><code>&lt;mvc:annotation-driven conversion-service="conversionService"/&gt;

&lt;!-- just to show that we can wire other beans into our registrar --&gt;
&lt;bean id="serviceA" class="com.sjl.myproject.ServiceA"/&gt;
&lt;bean id="serviceB" class="com.sjl.myproject.ServiceB"/&gt;

&lt;!-- Binding --&gt;    
&lt;bean 
  id="customFormatterRegistrar" 
  class="com.sjl.myproject.web.config.CustomFormatterRegistrar"&gt;
  &lt;constructor-arg ref="serviceA"/&gt;        
  &lt;constructor-arg ref="serviceB"/&gt;
&lt;/bean&gt;

&lt;bean 
  id="conversionService"
  class="
    org.springframework.format.support.FormattingConversionServiceFactoryBean"&gt;
  &lt;property name="formatterRegistrars"&gt;
    &lt;set&gt;
      &lt;ref local="customFormatterRegistrar"/&gt;
    &lt;/set&gt;
  &lt;/property&gt;
&lt;/bean&gt;
</code></pre>

<p>Be sure to add the "conversion-service" attribute (pointing at your conversionService bean) to the &lt;mvc:annotation-driven> element, otherwise it won't work!</p>

<p>The CustomFormatterRegistrar class:</p>

<pre><code>package com.sjl.myproject.web.config;

import org.springframework.format.*;
import com.sjl.myproject.*;

public class CustomFormatterRegistrar implements FormatterRegistrar {
    private ServiceA serviceA;
    private ServiceB serviceB;      

    // construct the registrar with other spring-beans as constructor args
    public CustomFormatterRegistrar(
        ServiceA aServiceA,
        ServiceB aServiceB) {
        serviceA = aServiceA;
        serviceB = aServiceB;
    }

    @Override
    public void registerFormatters(FormatterRegistry aRegistry) {
        aRegistry.addFormatter(new SomeTypeFormatter(serviceA));
        aRegistry.addFormatter(new OtherTypeFormatter(serviceB))
    }
}
</code></pre>

<p>An example formatter:</p>

<pre><code>package com.sjl.myproject.web.config;

import java.text.*;
import java.util.*;

import org.springframework.format.Formatter;

import com.sjl.myproject.*;

public class SomeTypeFormatter implements Formatter&amp;lt;SomeType&gt; {
    private ServiceA serviceA;

    public SomeTypeFormatter(ServiceA aServiceA) {
        serviceA = aServiceA;
    }

    @Override
    public String print(SomeType aSomeType, Locale aLocale) {
        return aSomeType..; // produce some string-based identifier
    }

    @Override
    public SomeType parse(String aText, Locale aLocale) throws ParseException {
        return serviceA.lookupByNameOrIdOrSomething(aText);
    }
}
</code></pre>

<p>And a Controller that benefits from it:</p>

<pre><code>package com.sjl.myproject.web.controllers;

import org.springframework.stereotype.*;
import org.springframework.web.bind.annotation.*;

import com.sjl.myproject.*;

@Controller
public class SomeController {
    public static final String URL = "path/with/{param1}/and/{param2}";

    @RequestMapping(SomeController.URL)
    public String blah(
        @PathVariable SomeType param1, 
        @PathVariable OtherType param2) {

        // .. do stuff with our typed params

        return "view-name";
    }
}
</code></pre>
]]></description>
          <category>Spring</category>
          <category>MVC</category>
          <category>data-binding</category>
          <category>convert</category>
          <category>format</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Mon, 01 Oct 2012 00:00:00 +0100</pubDate>
      </item>
      <item>
        <title><![CDATA[Spring config for parameterised, non-static factory methods]]></title>
        <link><![CDATA[http://steveliles.github.com/spring_config_for_parameterised_non_static_factory_methods.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/spring_config_for_parameterised_non_static_factory_methods.html</guid>
        <description><![CDATA[<p>I recently discovered a nice way of using beans defined in your spring config as factories in the definition of other beans. </p>

<p>Its great, for example, when you want a factory that has non-static factory methods, or that relies on a bunch of other dependencies, or you want to instrument beans via some service which is itself a bean (this is what I was doing when I made this discovery). Here's how it looks..</p>

<p>A factory class whose factory-method is non-static and requires parameters:</p>

<pre><code>package com.sjl;

class Factory {
    private DependencyA depA;

    public Factory(DependencyA aDepA) {
        depA = aDepA;
    }

    public ResultType newInstance(DependencyB aDepB) {
        ResultType _result = ..; // use the deps to cook up result
        return _result;
    }
}
</code></pre>

<p>.. and a Spring XML config:</p>

<pre><code>&lt;bean id="depA" class="com.sjl.DependencyA"/&gt;
&lt;bean id="depB" class="com.sjl.DependencyB"/&gt;

&lt;bean id="factory" class="com.sjl.Factory"&gt;
  &lt;constructor-arg ref="depA"/&gt;
&lt;/bean&gt;

&lt;bean id="result" class="com.sjl.ResultType"
       factory-bean="factory" factory-method="newInstance"&gt;
   &lt;constructor-arg ref="depB"/&gt;
&lt;/bean&gt;
</code></pre>

<p>So what we have here is an <em>instance</em> of <code>Factory</code>, created with a dependency (depA), on which we invoke a non-static method <em>with arguments</em> to create our <code>ResultType</code>.</p>

<p>The bit that surprised me was the use of <code>&lt;constructor-arg&gt;</code> elements to define the parameters to pass to the factory method.</p>

<h2>Instrumentation</h2>

<p>If you followed any of my recent posts you'll know that I've been playing with dynamic proxies to create services that automagically decorate objects with instrumented versions. </p>

<p>As an example, in <a href="http://steveliles.github.com/dynamic_proxies_in_java.html">this post</a> I showed an <code>InstumentationService</code> which adds timing around method invocations.</p>

<p>I wanted to instrument several (about 8 actually) of my beans via a service that adds health monitoring, where the healthiness of a service is measured as a ratio of successful method invocations to unsuccessful ones (that throw exceptions).</p>

<p>The interface for instrumenting objects for health-monitoring looks like this:</p>

<pre><code>interface HealthServiceInstrumenter {
    public &lt;T&gt; T instrument(T aT);
}
</code></pre>

<p>So what I needed from Spring is: </p>

<ol>
<li>to create the instance of my <code>HealthServiceInstrumenter</code>,</li>
<li>to create the instances of various different <code>T</code> to pass through the <code>HealthServiceInstrumenter</code>, and</li>
<li>the tricky part - to get spring to create the instrumented bean of type <code>T</code> by passing the original bean through the instrumenter.</li>
</ol>

<p>Here's what the spring wiring looks like for that:</p>

<pre><code>&lt;bean id="health-instrumenter" class="com.sjl.HealthInstrumentationService"/&gt;

&lt;bean id="uninstrumented-bean-A" class="com.sjl.BeanA" 
        autowire-candidate="false"/&gt;

&lt;bean id="bean-A" class="com.sjl.BeanA"
       factory-bean="health-instrumenter" 
       factory-method="instrument"&gt;
   &lt;constructor-arg ref="uninstrumented-bean-A"/&gt;
&lt;/bean&gt;

&lt;bean id="uninstrumented-bean-B" class="com.sjl.BeanB" 
        autowire-candidate="false"/&gt;

&lt;bean id="bean-B" class="com.sjl.BeanB"
       factory-bean="health-instrumenter" 
       factory-method="instrument"&gt;
   &lt;constructor-arg ref="uninstrumented-bean-B"/&gt;
&lt;/bean&gt;
</code></pre>
]]></description>
          <category>Spring</category>
          <category>Factory</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Fri, 14 Sep 2012 00:00:00 +0100</pubDate>
      </item>
      <item>
        <title><![CDATA[Implicit Future's, aka Promises]]></title>
        <link><![CDATA[http://steveliles.github.com/implicit_future_s_aka_promises.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/implicit_future_s_aka_promises.html</guid>
        <description><![CDATA[<p><code>java.lang.concurrent.Future&amp;lt;T&gt;</code> is an example of an <em>explicit</em> future, where client code is well aware that the object it is handling is not a direct reference to the value of interest, and must invoke a method to obtain the value (<code>Future.get()</code> in the case of <code>java.lang.concurrent.Future</code>).</p>

<p>That's all very well, but if you have collaborators that expect to deal with the value <code>T</code> you have limited options: </p>

<p>You could invoke <code>get()</code> on your future, wait for it to be realised, then pass the realised value to the collaborators. This defeats the purpose of Future's, since what you really want is to do as much other work as possible before <code>future.get()</code> is called.</p>

<p>Alternatively, you could modify the collaborators to know that they are dealing with a Future. But you don't really want to do that either - its an implementation detail that they should not be concerned with.</p>

<p>What you really want is to pass around <em>implicit</em> futures that hide the fact that the object is anything other than a pojo. </p>

<p>You can create implicit futures by wrapping an explicit <code>future&lt;T&gt;</code> in an implementation of interface <code>T</code> and delegating all of the methods to <code>future.get().xxx()</code>. Here's what that might look like:</p>

<pre><code>// the type expected by client code
interface ExpensiveToCompute {
    public BigDecimal getValue1() throws Exception;
    public BigInteger getValue2() throws Exception;
}

interface Computer {
    public ExpensiveToCompute compute() throws Exception;
}

class SynchronousComputer {
    public ExpensiveToCompute compute() throws Exception {
        // ..
    }
}

// the implicit future, delegating to an explicit future
class ImplicitFutureExpensiveToCompute implements ExpensiveToCompute {
    private Future&amp;lt;ExpensiveToCompute&gt; delegate;

    public ImplicitFutureExpensiveToCompute(
        Future&amp;lt;ExpensiveToCompute&gt; aDelegate) {
        delegate = aDelegate;
    }

    public BigDecimal getValue1() throws Exception {
        delegate.get().getValue1();
    }

    public BigInteger getValue2() throws Exception {
        delegate.get().getValue2();
    }
}

// the async version that returns implicit futures
class AsynchronousComputer implements Computer {
    private ExecutorService executor = ..;
    private SynchronousComputer sync = ..;

    public ExpensiveToCompute compute() throws Exception {
        return new ImplicitFutureExpensiveToCompute(
            executor.submit(new Callable&amp;lt;ExpensiveToCompute&gt;() {
                public ExpensiveToCompute call() {
                    return sync.compute();
                }
            }));
    }
}
</code></pre>

<p>Pretty straight-forward, although there's quite a bit of boiler-plate, and i've passed the buck on exception handling.</p>

<p>This example is very simple, but things can get more involved if, for example, you want to use Future's overloaded <code>get(long timeout, TimeUnit units)</code> and handle timeouts appropriately (say, by returning a default value).</p>

<p>What if, instead of all this, you could pass your current synchronous implementation through some machinery that converted appropriately annotated methods to run asynchronously and return implicit futures, without the chore of having to create those classes yourself?</p>

<p>It might look like this:</p>

<pre><code>// the type expected by client code
interface ExpensiveToCompute {
    public BigDecimal getValue1() throws Exception;
    public BigInteger getValue2() throws Exception;
}

interface Computer {
    @ComputationallyExpensive
    public ExpensiveToCompute compute() throws Exception;
}


// the synchronous implementation - exact same as before
class SynchronousComputer implements Computer{
    public ExpensiveToCompute compute() throws Exception {
        // ..
    }
}

// the async version, returning implicit futures
class AsynchronousComputer implements Computer {
    private Computer async;

    public AsynchronousComputer(
        AsyncificationService anAsyncifier, Computer aDelegate) {
        async = anAsyncifier.makeAsync(aDelegate);
    }

    public ExpensiveToCompute doSomething() {
        return async.doSomething();
    }
}
</code></pre>

<p>This time we didn't need to create the implicit future implementation, cutting a whole lot of boiler-plate, and the async implementation got a fair bit simpler too. We marked the expensive method with an annotation so that the <code>AsyncificationService</code> knew to work its magic on that method.</p>

<p>There's a lot more useful stuff we can do when we have the machinery for converting synchronous methods to asynchronous methods that return implicit futures. For example we can transparently handle exceptions and return default values, or we can impose timeouts and return default values if we don't get a result in time, etc., etc.</p>

<p>If you want to see how we might implement such machinery, or want to try using it, fork the code for <a href="https://github.com/steveliles/implicit-futures">Implicit-Futures</a> from github.</p>
]]></description>
          <category>Threads</category>
          <category>Concurrency</category>
          <category>Java</category>
          <category>Future</category>
          <category>Promise</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Sun, 09 Sep 2012 00:00:00 +0100</pubDate>
      </item>
      <item>
        <title><![CDATA[Dynamic Proxies in Java]]></title>
        <link><![CDATA[http://steveliles.github.com/dynamic_proxies_in_java.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/dynamic_proxies_in_java.html</guid>
        <description><![CDATA[<p>Dynamic Proxies are a fantastic tool to have in your kit, and pretty easy to get up and running with. </p>

<p>A Dynamic Proxy is just what the name suggests: a proxy to a "normal" Java class, where the proxy is created dynamically - at runtime - and can be substituted instead of the proxied class. </p>

<p>If that still doesn't make sense, hopefully the example below will clear it up.</p>

<p>Lets imagine we want to be able to time the execution of <em>any</em> method on <em>any</em> implementation of <em>any</em> interface. We don't know or care what the interface is. We'll do this by passing the class that implements the interface to an "InstrumentationService", whose interface looks like this:</p>

<pre><code>public interface InstrumentationService {
    /**
     * @param aT - the object to be instrumented for monitoring
     * @return A polymorphically equivalent T which has been instrumented
     */
    public &amp;lt;T&gt; T instrument(T aT);
}
</code></pre>

<p>We'll get to the implementation of InstrumentationService shortly, but for now it should be clear that to instrument a class is as simple as this:</p>

<pre><code>private InstrumentationService instr;

public void doSomeStuff() {
    SomeInterface _si = new SomeClassThatImplementsIt();

    _si.doSomething(); // won't be timed

    _si = instr(_si);

    _si.doSomething(); // will be timed!
}
</code></pre>

<p>OK, so how can we implement InstrumentationService so that it can decorate arbitrary methods on as-yet-unknown interfaces? Enter Dynamic Proxies. </p>

<p>There are several rules and caveats to follow which I won't go into - they are documented pretty well <a href="http://docs.oracle.com/javase/6/docs/technotes/guides/reflection/proxy.html">here</a>. For now it should suffice to say that you can only proxy interfaces (which is ok because you always <a href="http://www.artima.com/lejava/articles/designprinciples.html">program to interfaces</a> / <a href="http://en.wikipedia.org/wiki/Design_by_contract">design by contract</a> anyway, right?)</p>

<p>Here's an implementation of InstrumentationService that uses Dynamic Proxying:</p>

<pre><code>package com.sjl.example;

import java.lang.reflect.*;
import java.util.*;
import java.util.concurrent.*;

public abstract class DynamicInstrumentationService 
implements InstrumentationService {

    protected abstract void record(String anEvent, long aNanos);

    @SuppressWarnings("unchecked")
    @Override
    public &amp;lt;T&gt; T instrument(final T aT)
    {
        return (T) Proxy.newProxyInstance(
            aT.getClass().getClassLoader(), 
            aT.getClass().getInterfaces(), 
            new InvocationHandler() {
                @Override
                public Object invoke(
                    Object aProxy, Method aMethod, Object[] aArgs) 
                    throws Throwable 
                {
                    long _start = System.nanoTime();
                    try {
                        return aMethod.invoke(aT, anArgs);
                    } catch (InvocationTargetException anExc) {
                        throw anExc.getCause();
                    } finally {
                        record(_t.event(), System.nanoTime()-_start);
                    }
                }
            });
    }
}
</code></pre>

<p>So what do we have here?</p>

<ol>
<li>An abstract implementation of IntrumentationService which defers the actual recording of the timed value to a concrete subclass - you could extend and implement the <code>record</code> method to log to stdout, for example.</li>
<li>The <code>instrument</code> method creates a new Dynamic Proxy around the given class by invoking <code>Proxy.newInstance</code>. Notice that we use the classloader of the given class, and pass <em>all</em> of the interfaces it implements as types to be proxied.</li>
<li>The details of <em>what to do</em> when any method of the proxy is invoked are in the InvocationHandler, implemented here as an anonymous inner class. Its pretty simple - capture the clock time before the method is invoked; invoke the method; capture the clock time after the method completes; record the difference in time (after - before).</li>
</ol>

<p>Notice that when we invoke the proxied class's method, we wrap the invocation with a try/catch that catches InvocationTargetException, and if such an exception is thrown we propagate its <em>cause</em>, not the InvocationTargetException itself. This is just unwrapping an uninteresting layer of exceptions (which we added by using reflection to invoke the method) to get to the real problem.</p>

<p>This is a pretty simple example of what you can do with Dynamic Proxies. Even with this simple example its clear that you could modify it to, for example, record separate timings for successful invocations vs those that throw exceptions, or to only record timings for methods with annotations (e.g. you might create an @Timed annotation), etc., etc.</p>

<p>I should mention that there is a down-side to Dynamic Proxies: they use reflection to invoke the method of the proxied class, so there is a small performance penalty.</p>

<p>Lately I've been having all kinds of fun with Dynamic Proxies, from instrumentation (somewhat more complex than the above example) to monitoring service health (by escalating through warning statuses based on the ratio of successful/exceptional completion). </p>

<p>My favourite use so far: asynchronous execution of synchronous service calls, returning the result as a disguised/implicit <a href="http://en.wikipedia.org/wiki/Futures_and_promises">Future/Promise</a> with a coordinated Service Level Agreement cut-off . . . yeah anyways, that's a blog post for another day :) (update 09-09-2012: see <a href="https://github.com/steveliles/implicit-futures">Implicit-Futures</a>)</p>
]]></description>
          <category>Java</category>
          <category>Dynamic Proxy</category>
          <category>Instrumentation</category>
          <category>Timing</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Fri, 07 Sep 2012 00:00:00 +0100</pubDate>
      </item>
      <item>
        <title><![CDATA[Setting up embedded Jetty 8 and Spring MVC with Maven]]></title>
        <link><![CDATA[http://steveliles.github.com/setting_up_embedded_jetty_8_and_spring_mvc_with_maven.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/setting_up_embedded_jetty_8_and_spring_mvc_with_maven.html</guid>
        <description><![CDATA[<p>This is intended to be the first post in a series on building straight-forward web-apps with Spring-MVC and embedded Jetty. You can check out the complete source of this simple project from <a href="https://github.com/steveliles/jetty-embedded-spring-mvc">github</a>.</p>

<p>This post describes configuring your Jetty and Spring MVC with XML-based configuration. If you want to use annotations/java-config take a look at <a href="http://steveliles.github.com/setting_up_embedded_jetty_8_and_spring_mvc_with_maven_and_no_xml.html">this post</a>.</p>

<p>Its been a while since I last posted. I've been busy starting up two big projects at work, one using Google App Engine (and Spring MVC ;)), the other using Jetty 8 (embedded), Spring MVC, MongoDB and ElasticSearch.</p>

<p>The Jetty/Spring combination is one which I've used before - several times since Jetty-5/Spring-1.2 - and I really like. You just can't beat it for quick debug cycles, complete control of the environment, minimal configuration, single-jar deployment, etc., etc.</p>

<p>On this most recent project I'm using jsp as the view technology - this is probably the easiest way to go since most things "just work" out of the box. Other view technologies can be used too - for example last year we used this same combination with FreeMarker - its just a little more effort to get things wired up right.</p>

<p>Here's how I set my projects up:</p>

<h3>Maven POM</h3>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project 
 xsi:schemaLocation="
 http://maven.apache.org/POM/4.0.0 
 http://maven.apache.org/xsd/maven-4.0.0.xsd" 
 xmlns="http://maven.apache.org/POM/4.0.0" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

&lt;groupId&gt;com.sjl&lt;/groupId&gt;
&lt;artifactId&gt;webapp&lt;/artifactId&gt;
&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
&lt;name&gt;WebApp&lt;/name&gt;
&lt;description&gt;&lt;/description&gt;

&lt;repositories&gt;
  &lt;repository&gt;
    &lt;id&gt;springsource-repo&lt;/id&gt;
    &lt;name&gt;SpringSource Repository&lt;/name&gt;
    &lt;url&gt;http://repo.springsource.org/release&lt;/url&gt;
  &lt;/repository&gt;
&lt;/repositories&gt;

&lt;properties&gt;
  &lt;jetty.version&gt;8.1.5.v20120716&lt;/jetty.version&gt;
  &lt;jetty.jsp.version&gt;8.1.4.v20120524&lt;/jetty.jsp.version&gt;
  &lt;spring.version&gt;3.1.2.RELEASE&lt;/spring.version&gt;
&lt;/properties&gt;

&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
      &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;
      &lt;version&gt;2.1.2&lt;/version&gt;
      &lt;executions&gt;
        &lt;execution&gt;
          &lt;id&gt;attach-sources&lt;/id&gt;
          &lt;phase&gt;verify&lt;/phase&gt;
          &lt;goals&gt;
            &lt;goal&gt;jar-no-fork&lt;/goal&gt;
          &lt;/goals&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
    &lt;/plugin&gt;
    &lt;plugin&gt;
      &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
      &lt;version&gt;2.3.2&lt;/version&gt;
      &lt;configuration&gt;
        &lt;source&gt;1.6&lt;/source&gt;
        &lt;target&gt;1.6&lt;/target&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
    &lt;plugin&gt; 
      &lt;artifactId&gt;maven-eclipse-plugin&lt;/artifactId&gt; 
      &lt;configuration&gt; 
        &lt;downloadSources&gt;true&lt;/downloadSources&gt;
      &lt;/configuration&gt; 
    &lt;/plugin&gt; 
  &lt;/plugins&gt;    
&lt;/build&gt;

&lt;dependencies&gt;

  &lt;!-- SPRING DEPENDENCIES --&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
    &lt;version&gt;${spring.version}&lt;/version&gt;
  &lt;/dependency&gt; 
  &lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
    &lt;version&gt;${spring.version}&lt;/version&gt;
  &lt;/dependency&gt;

  &lt;!-- JETTY DEPENDENCIES --&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
    &lt;artifactId&gt;jetty-server&lt;/artifactId&gt;
    &lt;version&gt;${jetty.version}&lt;/version&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
    &lt;artifactId&gt;jetty-servlet&lt;/artifactId&gt;
    &lt;version&gt;${jetty.version}&lt;/version&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
    &lt;artifactId&gt;jetty-webapp&lt;/artifactId&gt;
    &lt;version&gt;${jetty.version}&lt;/version&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
    &lt;artifactId&gt;jetty-servlets&lt;/artifactId&gt;
    &lt;version&gt;${jetty.version}&lt;/version&gt;
  &lt;/dependency&gt;

  &lt;!-- JSP and JSTL SUPPORT --&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
    &lt;artifactId&gt;jetty-jsp&lt;/artifactId&gt;
    &lt;version&gt;${jetty.jsp.version}&lt;/version&gt;
  &lt;/dependency&gt;    
  &lt;dependency&gt;
    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
    &lt;artifactId&gt;jstl&lt;/artifactId&gt;
    &lt;version&gt;1.2&lt;/version&gt;
    &lt;scope&gt;provided&lt;/scope&gt;
  &lt;/dependency&gt;
&lt;/dependencies&gt;

&lt;/project&gt;
</code></pre>

<p>A couple of things worth pointing out:</p>

<ul>
<li>I've added the spring-source maven repo in order to get the spring dependencies</li>
<li>I'm using Jetty 8 from eclipse, who have taken over from codehaus (who took over from mortbay)</li>
<li>I'm attaching sources for all dependencies that make them available, so that you can drill down into the source while debugging</li>
<li>I'm setting the source and target jdk compliance to 6</li>
<li>I'm using Jetty-jsp 8.1.4 - many other jstl implementations I tried have bugs, including a nasty one where recursive calls in tag-files would not compile.</li>
<li>I've never really bothered with things like maven archetypes, which is probably lazy-stupid of me. I tend to start from a pom that i've created previously then modify it to suit my needs.</li>
</ul>

<p>After creating the pom in my project directory I create the <code>src/main/java</code> and <code>src/test/java</code> directories and then run <code>mvn eclipse:eclipse</code> to fetch the dependencies and create the eclipse .project and .classpath files. Having done that I import the project to Eclipse.</p>

<p>Once I have the project in Eclipse I create a few more directories - specifically the <code>META-INF/webapp/WEB-INF</code> directory to host my web.xml and spring context files (amongst other things).</p>

<p>I typically start with a spring application context and a spring web context, so I can specify beans at a larger scope than the web-application. Here's some simple example web and spring configs, all of which I place in WEB-INF:</p>

<h3>web.xml</h3>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns="http://java.sun.com/xml/ns/javaee" 
xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
xsi:schemaLocation="
  http://java.sun.com/xml/ns/javaee 
  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
id="WebApp_ID" version="3.0"&gt;

&lt;listener&gt;
  &lt;listener-class&gt;
    org.springframework.web.context.ContextLoaderListener
  &lt;/listener-class&gt;
&lt;/listener&gt;

&lt;context-param&gt;
    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
    &lt;param-value&gt;
        /WEB-INF/application-context.xml
    &lt;/param-value&gt;
&lt;/context-param&gt;

&lt;!-- Handles all requests into the application --&gt;
&lt;servlet&gt;
    &lt;servlet-name&gt;Spring MVC Dispatcher Servlet&lt;/servlet-name&gt;
    &lt;servlet-class&gt;
      org.springframework.web.servlet.DispatcherServlet
    &lt;/servlet-class&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
        &lt;param-value&gt;/WEB-INF/web-context.xml&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
&lt;/servlet&gt;  

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;Spring MVC Dispatcher Servlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;      

&lt;/web-app&gt;
</code></pre>

<h3>application-context.xml</h3>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

&lt;!-- Define your application beans here. They will be available to the
   beans defined in your web-context because it is a sub-context.

   Beans defined in the web-context will not be available in the 
   application context.
--&gt;

&lt;/beans&gt;
</code></pre>

<h3>web-context.xml</h3>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:mvc="http://www.springframework.org/schema/mvc"
  xsi:schemaLocation="
http://www.springframework.org/schema/mvc 
http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

&lt;!-- Configures the @Controller programming model --&gt;
&lt;mvc:annotation-driven/&gt;

&lt;!-- Forwards requests to the "/" resource to the "home" view --&gt;
&lt;mvc:view-controller path="/" view-name="index"/&gt;    

&lt;mvc:resources mapping="/i/**" location="WEB-INF/images/" /&gt;
&lt;mvc:resources mapping="/c/**" location="WEB-INF/css/" /&gt;
&lt;mvc:resources mapping="/s/**" location="WEB-INF/scripts/" /&gt;
&lt;mvc:resources mapping="/favicon.ico" 
  location="WEB-INF/images/favicon.ico" /&gt;

&lt;!-- Resolve jsp's --&gt;
&lt;bean id="viewResolver" 
  class="org.springframework.web.servlet.view.UrlBasedViewResolver"&gt;
    &lt;property name="viewClass" 
      value="org.springframework.web.servlet.view.JstlView"/&gt;
    &lt;property name="prefix" value="/WEB-INF/views/"/&gt;
    &lt;property name="suffix" value=".jsp"/&gt;
&lt;/bean&gt;

&lt;!-- i18n message source --&gt;
&lt;bean id="messageSource" 
  class="
    org.springframework.context.support.
      ReloadableResourceBundleMessageSource"&gt;
    &lt;property name="basename" value="/WEB-INF/i18n/messages" /&gt;
    &lt;property name="defaultEncoding" value="UTF-8"/&gt;
    &lt;property name="cacheSeconds" value="30" /&gt;
&lt;/bean&gt;

&lt;/beans&gt;
</code></pre>

<p>Some important things to note in this file are:</p>

<ul>
<li>We're using the annotation model for spring Controllers, hence there aren't any Controller beans specified in this xml</li>
<li>We're mapping static resources to be served efficiently by the Spring dispatcher servlet</li>
<li>We've set up a view resolver to look for jsp's in /WEB-INF/views. Note that when specifying a view in Controller code you drop the .jsp suffix.</li>
<li>We're configuring an internationalization message source, just so we can demonstrate use of a spring taglib a bit later...</li>
</ul>

<p>Now we need to create a class to set up the embedded Jetty.</p>

<h3>Embedded Jetty</h3>

<pre><code>package com.sjl;

import java.io.*;
import java.net.*;
import java.util.*;

import org.eclipse.jetty.server.*;
import org.eclipse.jetty.server.handler.*;
import org.eclipse.jetty.server.nio.*;
import org.eclipse.jetty.util.thread.*;
import org.eclipse.jetty.webapp.*;

/**
 * Example WebServer class which sets up an embedded Jetty 
 * appropriately whether running in an IDE or in "production" 
 * mode in a shaded jar.
 */
public class WebServer
{
    // TODO: You should configure this appropriately for 
    // your environment
    private static final String LOG_PATH = 
      "./var/logs/access/yyyy_mm_dd.request.log";

    private static final String WEB_XML = 
      "META-INF/webapp/WEB-INF/web.xml";
    private static final String CLASS_ONLY_AVAILABLE_IN_IDE = 
      "com.sjl.IDE";
    private static final String PROJECT_RELATIVE_PATH_TO_WEBAPP = 
      "src/main/java/META-INF/webapp";

    public static interface WebContext
    {
        public File getWarPath();
        public String getContextPath();
    }

    private Server server;
    private int port;
    private String bindInterface;

    public WebServer(int aPort)
    {
        this(aPort, null);
    }

    public WebServer(int aPort, String aBindInterface)
    {        
        port = aPort;
        bindInterface = aBindInterface;
    }

    public void start() throws Exception
    {
        server = new Server();

        server.setThreadPool(createThreadPool());
        server.addConnector(createConnector());
        server.setHandler(createHandlers());        
        server.setStopAtShutdown(true);

        server.start();       
    }

    public void join() throws InterruptedException
    {
        server.join();
    }

    public void stop() throws Exception
    {        
        server.stop();
    }

    private ThreadPool createThreadPool()
    {
        // TODO: You should configure these appropriately
        // for your environment - this is an example only
        QueuedThreadPool _threadPool = new QueuedThreadPool();
        _threadPool.setMinThreads(10);
        _threadPool.setMaxThreads(100);
        return _threadPool;
    }

    private SelectChannelConnector createConnector()
    {
        SelectChannelConnector _connector = 
            new SelectChannelConnector();
        _connector.setPort(port);
        _connector.setHost(bindInterface);
        return _connector;
    }

    private HandlerCollection createHandlers()
    {                
        WebAppContext _ctx = new WebAppContext();
        _ctx.setContextPath("/");

        if(isRunningInShadedJar())
        {          
            _ctx.setWar(getShadedWarUrl());
        }
        else
        {            
            _ctx.setWar(PROJECT_RELATIVE_PATH_TO_WEBAPP);
        }

        List&amp;lt;Handler&gt; _handlers = new ArrayList&amp;lt;Handler&gt;();

        _handlers.add(_ctx);

        HandlerList _contexts = new HandlerList();
        _contexts.setHandlers(_handlers.toArray(new Handler[0]));

        RequestLogHandler _log = new RequestLogHandler();
        _log.setRequestLog(createRequestLog());

        HandlerCollection _result = new HandlerCollection();
        _result.setHandlers(new Handler[] {_contexts, _log});

        return _result;
    }

    private RequestLog createRequestLog()
    {
        NCSARequestLog _log = new NCSARequestLog();

        File _logPath = new File(LOG_PATH);
        _logPath.getParentFile().mkdirs();

        _log.setFilename(_logPath.getPath());
        _log.setRetainDays(90);
        _log.setExtended(false);
        _log.setAppend(true);
        _log.setLogTimeZone("GMT");
        _log.setLogLatency(true);
        return _log;
    }  

    private boolean isRunningInShadedJar()
    {
        try
        {
            Class.forName(CLASS_ONLY_AVAILABLE_IN_IDE);
            return false;
        }
        catch(ClassNotFoundException anExc)
        {
            return true;
        }
    }

    private URL getResource(String aResource)
    {
        return Thread.currentThread().
            getContextClassLoader().getResource(aResource); 
    }

    private String getShadedWarUrl()
    {
        String _urlStr = getResource(WEB_XML).toString();
        // Strip off "WEB-INF/web.xml"
        return _urlStr.substring(0, _urlStr.length() - 15);
    }
}
</code></pre>

<p>Notice that here we try to load a class that will only ever be available if we're running in test mode (e.g. directly from Eclipse). </p>

<p>If the class is found we assume we're running in exploded form, otherwise we assume we're running in a shaded jar - this is so that we can use the correct path to locate the web resources. </p>

<p>If you're trying this out you must make sure that the com.sjl.IDE class exists in your test source tree!.</p>

<h3>Spring MVC Controller</h3>

<pre><code>package com.sjl.web;

import org.springframework.stereotype.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.*;

@Controller
public class Home {
    @RequestMapping("/")
    public ModelAndView home()
    {
        return new ModelAndView("index");
    }
}
</code></pre>

<p>A very simple Controller that simply tells Spring to render the index.jsp view when a request is made for the root of the web-app.</p>

<h3>index.jsp</h3>

<pre><code>&lt;%@taglib prefix="spring" uri="http://www.springframework.org/tags"%&gt;
&lt;html&gt;
  &lt;body&gt;
    &lt;p&gt;&lt;spring:message code="hello"/&gt;&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h3>messages.properties</h3>

<pre><code>hello=Hi
</code></pre>

<p>That's almost everything. You will need a couple of other little pieces, for example a main class to instantiate the WebServer.</p>

<h3>Project directory structure</h3>

<p>Your project directory structure should end up looking something like this:</p>

<pre><code>|_src
|___main
|_____java
|_______META-INF
|_________webapp
|___________WEB-INF
|_____________[web.xml and spring context configs here]
|_____________css
|_____________i18n
|_____________images
|_____________scripts
|_____________views
|_______________[jsp files here]
|_______com
|_________sjl
|___________web
|_____________[Spring MVC Controllers here]
|___test
|_____java
|_______com
|_________sjl
</code></pre>

<p>Check out the <a href="https://github.com/steveliles/jetty-embedded-spring-mvc">github project</a> for the complete working example.</p>
]]></description>
          <category>Jetty</category>
          <category>Embedded</category>
          <category>Spring</category>
          <category>MVC</category>
          <category>Maven</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Sat, 25 Aug 2012 00:00:00 +0100</pubDate>
      </item>
      <item>
        <title><![CDATA[Android Activity Lifecycle Gotcha]]></title>
        <link><![CDATA[http://steveliles.github.com/android_activity_lifecycle_gotcha.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/android_activity_lifecycle_gotcha.html</guid>
        <description><![CDATA[<p>My Android app has been live in Google Play for 6 months, but I'm still encountering strange bugs and behaviours, making big mistakes, and learning surprising things. The latest surprise has come with a recent flush of ICS users who's devices are putting more significant demands on my handling of the Activity lifecycle, specifically with relation to managing state.</p>

<p>tl:dr; - beware when invoking <code>startActivityForResult</code> that onActivityResult is invoked <em>before</em> onResume!</p>

<p>Before I get to the problems, lets have a quick look at the Activity lifecycle. I'm going to "borrow" google's lifecycle diagram:</p>

<p><img src="http://developer.android.com/images/activity_lifecycle.png" alt="Android Activity Lifecycle" /></p>

<p>Some important things to remember here are:</p>

<ul>
<li>Apps typically consist of <em>multiple</em> Activity's, and <em>each</em> Activity follows the above lifecycle while your app is running.</li>
<li>When your Activity starts a <em>child</em> Activity (with <code>startActivity</code> or <code>startActivityForResult</code>), both the <code>onPause</code> and <code>onStop</code> lifecycle methods of the parent Activity <em>should</em> be called, in that order.</li>
<li>When an Activity is invoked <em>as</em> a child Activity, its lifecycle will be completed by the time the parent Activity is fully in control again (at least <code>onCreate</code>, <code>onStart</code>, <code>onResume</code>, and <code>onPause</code> will have been invoked).</li>
<li>Your Activity can be killed off <em>at any time</em> after its <code>onPause</code> has completed, without necessarily passing through <code>onStop</code> or <code>onDestroy</code>. It is critically important to remember that <em>this includes situations where your Activity is on the back-stack waiting for a result from a child Activity, or even when it is still visible but mostly covered by a dialog!</em></li>
</ul>

<p>With regard to the last point its worth familiarising yourself with <a href="http://developer.android.com/guide/topics/fundamentals/processes-and-threads.html">the way Android manages Processes</a>.</p>

<h2>State, and the Application object</h2>

<p>One simple way, you might think, to manage state without worrying too much about the <code>Activity</code> lifecycle is to use the Application object. Android allows you to specify your own class (<code>extends Application</code>), which your Activity's can access through <code>getApplication</code>.</p>

<p>That's nice. It needs care though, since the process that your Application object lives in can be killed and restarted at (perhaps) unexpected junctures. Take this scenario:</p>

<ol>
<li>App A starts with Activity A1, which sets up some state in the Application object.</li>
<li>Activity A1 starts Activity A2, which uses the state in the Application object.</li>
<li>Activity A2 fires an <code>Intent</code> for Activity B1 of App B and expects some result (lets say we fired an <code>Intent</code> asking for an image to be captured by the camera app).</li>
<li>App B starts, and launches Activity B1.</li>
<li>Activity B1 is memory-heavy, so <em>the system shuts down App A (completely kills its process), even though it is on the back-stack waiting for a result</em>.</li>
<li>Activity B1 returns, app A's Application object is created, Activity A2 is started again but Activity A1 never launched in the lifetime of this Application object so <em>does not get the opportunity to set up the state of the Application object</em>.</li>
</ol>

<p>The sequence diagram might look something like this:</p>

<p><img src="https://lh3.googleusercontent.com/-5ObK6-kJmEw/T99trhVZyCI/AAAAAAAAKRU/70rljFQPRKE/s800/sequence-diagram.png" alt="seuqence diagram" /></p>

<p>Clearly, if Activity A2 relies on A1 having run first to set up the application state, there's going to be trouble as soon as A2 starts trying to access that state after resuming from B2. <em>If you're going to use the Application object to manage state, make sure that it is set up as part of the Application's own lifecycle methods</em>.</p>

<p>Now, the gotcha that's been hurting me is this: I assumed that onActivityResult would be invoked <em>after</em> onResume. Turns out this is not the case, and in fact onActivityResult was getting called long before my state was re-initialised in onResume. </p>

<p>On my devices I never suffered from this because my process was not being killed and the state was still present in memory at the point when onActivityResult was invoked!</p>
]]></description>
          <category>Android</category>
          <category>Activity Lifecycle</category>
          <category>Large Heap</category>
          <category>Fragmentation</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Mon, 18 Jun 2012 00:00:00 +0100</pubDate>
      </item>
      <item>
        <title><![CDATA[Testing Android apps]]></title>
        <link><![CDATA[http://steveliles.github.com/testing_android_apps.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/testing_android_apps.html</guid>
        <description><![CDATA[<p>I've been developing an Android app as a spare-time project for 6 months now. I have access to 3 Android devices:</p>

<ul>
<li>Samsung Galaxy SII running ICS (my personal mobile)</li>
<li>Samsung Galaxy Mini running Gingerbread (bought as a temporary dev device when my old HTC Desire gave up the ghost)</li>
<li>Motorola Xoom II Media Edition (tablet used for day job)</li>
</ul>

<p>My app runs beautifully on all these devices. I <em>cannot</em> make it crash. It really frustrates me that I get crash reports from other devices and cannot replicate them. For a spare-time project I can't afford to buy lots of devices to test with. Enter <a href="http://www.appthwack.com/">AppThwack</a>.</p>

<h2>AppThwack</h2>

<p>I first heard about AppThwack after I tweeted about one of its competitors - testdroid - trying to find some testimonials from other users. I didn't find any, but I did get a reply from <a href="https://twitter.com/#!/tdpeterson">@tdpeterson</a> inviting me to AppThwack's beta.</p>

<p>Some weeks later I finally found a spare few minutes to take a look, and I'm so glad I did!</p>

<p>As they are currently in beta, you need a code to be able to sign up. Mine arrived a few hours after requesting it, and I immediately signed up to give it a try. The service makes it very easy to get started, which is clever, because once you're in you really are hooked - its just too good.</p>

<h3>Chaos Monkeys</h3>

<p>I uploaded the latest release apk I had to hand and launched the UI Exerciser Monkey tests (these are automatic and randomised tests that poke all the buttons and what-not). From sign-up to running tests took less than 2 minutes.</p>

<p><img style="float:right; margin:25px;" src="https://lh3.googleusercontent.com/-C3vMO8EpKjY/T9I13xsV1VI/AAAAAAAAKQs/v83alvoNCYo/s288/tmpBxqtro.png"></p>

<p>The monkeys found at least two bugs that I was not aware of on that first run. I am torn between horror and delight. The horror and delight turn to embarassment when I realise that I have uploaded an obfuscated apk, and the stack-traces are in gibberese. Lesson#1 right there.</p>

<p>A test run takes a while to complete, but you can watch the results coming in in real time. When you realise what is going on behind the scenes its really impressive: your app is installed, launched, monkeyed, and then uninstalled <em>simultaneously across a whole farm of different devices</em> running different versions of Android. I'd love to see what that looks like :)</p>

<p>You can view the results of your test runs in a number of different ways. I like the "issues by device" mode, which lists all the devices that experienced problems or warnings, and allows you to drill down to see what happened in the monkey log - with a full stack trace of the crash - and then down again into log-cat.</p>

<p>Pause a second and let that sink in. I just ran my app on 43 different devices and Android versions in under 5 mins and now I have instant access to the stack traces from the crashing devices and <em>the full log-cat output</em>. I even get screen-shots from some of the devices - above is from an HTC Evo 4G running 2.3.3. Holy shitcakes!</p>

<p>Oh, and you can filter the log-cat output directly in the web-app. Nice.</p>

<p><img style="margin-left:100px;" src="https://lh6.googleusercontent.com/-_CnnB9TOWeo/T9I7XwlEiKI/AAAAAAAAKRA/Yw3bRzhhmWU/s400/Screen%2520Shot%25202012-06-08%2520at%252018.45.54.png"></p>

<h3>Programmed Tests</h3>

<p>OK, now I have some crashes that I want to try to replicate which are going to involve some complex interactions. Its going to take a lot of chaos monkeys a long time to replicate those tests, but the AppThwack guys have thought of that and integrate Robotium testing too.</p>

<p>Robotium was also new to me, but again its a great tool and a doddle to get started: </p>

<ol>
<li>download the robotium jar from <a href="http://code.google.com/p/robotium/downloads/list">here</a></li>
<li>create an Android test project, set up to test "this" project (<em>not</em> the project you actually want to test)</li>
<li>set the manifest &lt;instrumentation&gt; tag's targetPackage attribute to be the package of the app you want to test</li>
<li>copy the basic test code from <a href="http://robotium.googlecode.com/files/TestAndroidapkfileUsingRobotium.pdf">this tutorial</a> (I confess I find it weird that the tutorial is a pdf, not a web page!)</li>
<li>tweak the test code to test your app - its a very straight-forward API</li>
<li>Run the app you want to test in an emulator</li>
<li>Run your test and watch as it drives your app in the emulator - great fun</li>
</ol>

<p>Once you have a working test that you want to run over at AppThwack's device farm its really easy to get that going too:</p>

<ol>
<li>export a signed apk of the app you want to test (app-under-test)</li>
<li>export a signed apk of the test project (sign with the same key!)</li>
<li>upload app-under-test apk</li>
<li>click the configure icon</li>
<li>click "add test apk", and upload the test project apk</li>
<li>click go</li>
<li>marvel as the results start rolling in</li>
</ol>

<h3>Early days</h3>

<p>I haven't really tried to fix my crashing bugs yet, but at least there is light at the end of the tunnel now, thanks to AppThwack and Robotium.</p>

<p>I noticed a few funnies along the way, which I plan to mention to the AppThwack guys when I've had a bit more experience:</p>

<ul>
<li>Many devices crashed at the same point, but there's no way to collapse common issues together - I found myself opening the log for each device to check the stack-traces to find out the total number of different problems. <em>update: Pawel from AppThwack tells me a new view mode "By Failure" is in the works and will be landing in the beta very soon!)</em></li>
<li>Some devices timed out while installing. I'm not sure if this is a problem with my app (seems unlikely?) or some issue with the devices themselves? Its not a catastrophe if its a device problem, but then probably they should be marked as warnings rather than errors. <em>update: Pawel confirmed there were timeouts within the device-farm which I'm sure they'll resolve soon</em></li>
<li>I noticed lots of these in the monkey logs: <code>java.io.FileNotFoundException: /mnt/sdcard/scriptlog.txt (Permission denied)</code> which seem to be just noise (at least as far as I am concerned)</li>
</ul>

<p>So far so wonderful as far as I'm concerned: my thanks to Trellis Automation for AppThwack, and I really hope the beta goes well and the business is successful! </p>
]]></description>
          <category>Android</category>
          <category>Testing</category>
          <category>Robotium</category>
          <category>AppThwack</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Fri, 08 Jun 2012 00:00:00 +0100</pubDate>
      </item>
      <item>
        <title><![CDATA[Minimum Viable Products]]></title>
        <link><![CDATA[http://steveliles.github.com/minimum_viable_products.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/minimum_viable_products.html</guid>
        <description><![CDATA[<p>I haven't blogged in a while. I've been very busy with lots of different things, but nothing sufficiently technical and juicy to write about. Some less techy and more entrepreneurial adventures have been floating around, so I though to make some notes on those.</p>

<p>Things have taken a strange turn at work, with a very ambitious new project in the pipeline that is quite a departure from our usual business. I am tasked to deliver both development-wise <em>and</em> in terms of defining the business model. </p>

<p>The development alone will be a monumental task. Defining a business model is &hellip; quite some way outside my experience. The budget is almost non-existent. The time-scales are horribly short. I'm not even sure I completely buy the basic premise of the project. And yet &hellip; it is still a strangely attractive prospect, and its all Eric Ries' fault.</p>

<h3>The Lean Startup</h3>

<p><a style="float:left; margin:25px;" href="http://www.amazon.co.uk/gp/product/0670921602/ref=as_li_ss_tl?ie=UTF8&amp;tag=stlibl-21&amp;linkCode=as2&amp;camp=1634&amp;creative=19450&amp;creativeASIN=06709216020"><img src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&amp;Format=_SL160_&amp;ASIN=0670921602&amp;MarketPlace=GB&amp;ID=AsinImage&amp;WS=1&amp;tag=stlibl-21&amp;ServiceVersion=20070822"></a></p>

<p>In September last year I read Eric Reis' excellent book - <a href="http://www.amazon.co.uk/gp/product/0670921602/ref=as_li_ss_tl?ie=UTF8&amp;tag=stlibl-21&amp;linkCode=as2&amp;camp=1634&amp;creative=19450&amp;creativeASIN=06709216020">The Lean Startup</a> - and was inspired to put it into practice on my personal projects. I stopped getting hung up on the infinite details of feature-complete perfection, and started thinking in terms of Minimum Viable Product.</p>

<p>It led me to release my first ever solo "for profit" work, a super-simple <a href="http://www.overpayment-calculator.com/">mortgage repayment calculator</a>. </p>

<p>The development part was fun, and I got an excuse to use one of my <a href="http://steveliles.github.com/mortgage_loan_overpayment_calculator.html">open-source libraries</a>. </p>

<p>What turned out to be really interesting though, was that to get it online I had to register a domain-name and figure out how to <a href="http://steveliles.github.com/pointing_a_domain_name_to_an_amazon_s3_bucket.html">point it at an Amazon S3 bucket</a>, which I had to <a href="http://steveliles.github.com/hosting_a_static_website_in_amazon_s3.html">configure to host a website</a>. Two things I'd never done before. </p>

<p>I also spent time researching keywords, used multiple landing pages on different sub-domains with different keyword content, and set up analytics to see which gets most traffic - following Eric's advice to scientifically test a theory.</p>

<p>For my second project I had a bit more time - I had a week off in the run-up to Christmas to use up my 2011 vacation entitlement. My wife was working, which meant I had a guilt-free coding week (my wife is great about me coding at home, but it doesn't stop me feeling guilty).</p>

<p><a style="float:right; margin:25px;" href=""><img src="https://lh5.ggpht.com/xOyfv0sgk1SUn_BYDKDUJoXb8ZkpKQrZSql4O7fFAJZsDB3MHB3AX265-9LMirlkDg=w124"></a></p>

<p>I used the time to introduce myself properly to Android and build upon a little idea that I'd had. It started out by me wanting to use comic-book style pictures of myself on my blog to represent topics. </p>

<p>I had spent time working on some java code to take a bitmap and process it to resemble an SVG. From there it wasn't much of a leap to try to make an app that lets you build comic strips from your photos, and so <a href="https://play.google.com/store/apps/details?id=com.roundwoodstudios.comicstripit">Comic Strip It!</a> was born on Christmas Eve, 2011.</p>

<p>It really was a minimum viable product. The feature set of release 1.0 was:</p>

<ul>
<li>add photos to your comic strip, in 350x350 pixel frames</li>
<li>zoom and rotate photos to fit the frames</li>
<li>the comic strip would be laid out automatically in blocks of 3 frames across</li>
<li>add a caption below each frame</li>
<li>set a title for the comic strip</li>
<li>share the comic strip (email/twitter/facebook/etc - Android made this super-easy to do)</li>
</ul>

<p>I've added many features since, as directed by user feedback. Much of best feedback has come from people who emailed me directly with suggestions, especially in the early days, but some of the real kickers have come from disgruntled commenters. </p>

<p>In the spirit of Lean Startup experimentation I launched two versions - starting with the free version as described above then, in early january, a paid version that included speech balloons.</p>

<p>I've learned so much about people, product development/marketing/monetisation, and myself from having an app out there in the wild with no barrier between me and the users! My main problem now is finding a block of time to work on accelerating the growth of the user base.</p>

<h3>More Experiments</h3>

<p>Given the lack of a decent block of time to work on the app, I've spent a little time here and there on a couple of new, small, experiments. These aren't really MVP's as such, but they are in the spirit of Lean Startup.</p>

<h4>www.tribyute.com</h4>

<p><a style="float:left; margin:25px;" href="http://www.tribyute.com"><img src="https://lh5.googleusercontent.com/-w48tKzKVVgQ/T9DnorMq8eI/AAAAAAAAKQY/rI1RXv-8eXM/s200/tribyute.com.png"></a></p>

<p>The first is a <a href="http://www.tribyute.com/">teaser website</a> for an idea I had about expressing admiration for people you know, in such a way that over time an online character reference builds up, and the recipient gets an occasional boost when someone praises them.</p>

<p>The point here was just to test if there was any interest in the idea by asking people to leave their email to get notified later when the service goes live.</p>

<p>No ideas really about how to monetise it, but that wasn't the point of this one, it was just an idle thought that expressing admiration like that would be a nice thing to be able to do.</p>

<p>I registered a domain and pointed it at an app-engine web-app, thrown together with some simple html and css and a servlet. All in all just a few hours work. Its only just started to appear in google searches, so too early to say how the experiment will pan out.</p>

<h4>Zazzle t-shirts</h4>

<div style="float:right; text-align:center;line-height:150%"> <a href="http://www.zazzle.co.uk/sleep_tees-235809889333236460?gl=roundwood&rf=238286102792357014"> <img src="http://rlv.zcache.co.uk/sleep_tees-rf3ca96555d9547a692dee0727df16340_f0czi_325.jpg" alt="sleep tees" style="border:0;" /></a></div>

<p>The second experiment is something quite different. For some work-related research I'd been reading about affiliate-marketing. </p>

<p>I was aware of the Amazon affiliate system (indeed the book links on my blog are affiliate links), but I hadn't really considered that it was a common practice til now. </p>

<p>Zazzle's affiliate system allows anyone to set up a "store" under the main zazzle website, and populate it with their own products. </p>

<p>These products are customised versions of the products that zazzle themselves sell - ie. t-shirts, hoodies, decorated mugs, etc. You even get to set your own level of commission on each product. You can see one of my designs here :)</p>

<p>Zazzle help with tools for marketing your products too, but because its so easy <em>lots</em> of people have set up stores, and there's lots of competition. For me its really just a fun experiment, and a chance to do a bit of art work, so its all good really.</p>

<h3>Conclusion, sort of</h3>

<p><a style="float:left; margin:25px;" href="http://www.amazon.co.uk/gp/product/0091929113/ref=as_li_ss_il?ie=UTF8&amp;tag=stlibl-21&amp;linkCode=as2&amp;camp=1634&amp;creative=19450&amp;creativeASIN=0091929113"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&amp;Format=_SL160_&amp;ASIN=0091929113&amp;MarketPlace=GB&amp;ID=AsinImage&amp;WS=1&amp;tag=stlibl-21&amp;ServiceVersion=20070822" ></a></p>

<p>My main point throughout all this waffle is probably this: Stop trying to do something and do it! Create the smallest possible version of your product that can deliver value, release it, and use scientific measurement to direct your efforts for what to do next. If nothing else you will learn so much!</p>

<p>If you are involved at some level in the development of products, buy <a href="http://www.amazon.co.uk/gp/product/0670921602/ref=as_li_ss_tl?ie=UTF8&amp;tag=stlibl-21&amp;linkCode=as2&amp;camp=1634&amp;creative=19450&amp;creativeASIN=06709216020">The Lean Startup</a> - it will change how you think about product development. </p>

<p>While you're there, you might want to look at <a href="http://www.amazon.co.uk/gp/product/0091929113/ref=as_li_ss_il?ie=UTF8&amp;tag=stlibl-21&amp;linkCode=as2&amp;camp=1634&amp;creative=19450&amp;creativeASIN=0091929113">The 4-hour work week</a>, which shattered lots of my illusions about how the world works, despite the fact that I don't like a fair number of the prescribed methods.</p>

<p>I'll leave you with this superb Lean Startup story of how a startup saved themselves millions of dollars with a $40 prototype:</p>

<p><iframe src="http://player.vimeo.com/video/24749599" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe> <p><a href="http://vimeo.com/24749599">Ignite: Lean Startup - Paul Howe, Founder &amp; CEO of NeedFeed "How $40 Saved Us 9 Months and $2MM"</a> from <a href="http://vimeo.com/dreamsimplicity">DreamSimplicity</a> on <a href="http://vimeo.com">Vimeo</a>.</p></p>
]]></description>
          <category>MVP</category>
          <category>entrepreneurship</category>
          <category>Lean Startup</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Thu, 07 Jun 2012 00:00:00 +0100</pubDate>
      </item>
      <item>
        <title><![CDATA[SAX based dsl4xml for Android]]></title>
        <link><![CDATA[http://steveliles.github.com/sax_based_dsl4xml_for_android.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/sax_based_dsl4xml_for_android.html</guid>
        <description><![CDATA[<p>I just checked in a <a href="https://github.com/steveliles/dsl4xml/blob/master/src/main/java/com/sjl/dsl4xml/SAXDocumentReader.java">SAX parser based version of dsl4xml</a> to github, and finally got a chance to run the perf tests on an Android device. This is how it looks:</p>

<div style="width:590px; height:300px;" id="sax_dsl4xml_chart_div"></div>

<p>Notice that while it loses about 15% on raw SAX parsing, it still provides approximately an order of magnitude greater throughpout than the next best (raw pull parsing). And of course, its damn easy to write <em>readable</em> unmarshalling code with :)</p>

<p>I also added SimpleXML parsing to my performance tests - it ties for last place (performance-wise) with W3C DOM parsing. Arguably it is more readable and requires less code than the others, though personally I'm not a huge fan.</p>

<script type="text/javascript" src="https://www.google.com/jsapi"></script>
<script type="text/javascript">
      google.load("visualization", "1", {packages:["corechart"]});
      google.setOnLoadCallback(drawCharts);

      function drawCharts() {
        drawSAXdsl4xmlChart();
      }

      function drawSAXdsl4xmlChart() {

        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Concurrency (threads)');


data.addColumn('number', 'W3C DOM');
data.addColumn('number', 'SAX');
data.addColumn('number', 'Pull');
data.addColumn('number', 'dsl4xml (pull)');
data.addColumn('number', 'dsl4xml (SAX)');
data.addColumn('number', 'SJXP');
data.addColumn('number', 'SimpleXML');

        data.addRows([

['1',2.3990626431189757,43.064527743674304,3.5096192666862467,3.1076837111373043,29.861563321354247,2.4664573717826044,2.3909004146918598],
['2',3.8097945346845243,69.65230695343173,6.033185779344725,5.719798415469687,54.390135966806106,4.19575915770385,3.927812341410011],
['3',3.6368249512540114,71.39012835438209,5.537694525649179,4.886205168164367,58.04773944850799,3.8392278830888653,3.5690149046875117],
['4',3.6586810559054896,78.02354281756789,5.476464455883683,4.989187889389914,60.89659425282844,4.014151778333453,3.6487355420874175]
        ]);

        var options = {
          title: 'Parsing Throughput (higher is better)',
          hAxis: { title: 'Concurrency (threads)' },
          vAxis: { title: 'Throughput (docs/sec)' }
        };

        var chart = new google.visualization.ColumnChart(document.getElementById('sax_dsl4xml_chart_div'));
        chart.draw(data, options);

      }
</script>
]]></description>
          <category>java</category>
          <category>xml</category>
          <category>parse</category>
          <category>dsl</category>
          <category>perforamnce</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Mon, 23 Apr 2012 00:00:00 +0100</pubDate>
      </item>
      <item>
        <title><![CDATA[Android Market Comments - Severe Fail]]></title>
        <link><![CDATA[http://steveliles.github.com/android_market_comments_severe_fail.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/android_market_comments_severe_fail.html</guid>
        <description><![CDATA[<p>I'm so fed up with the Google Play comments and rating system. How can they have got it so wrong? Comments and user-ratings are a bad system to start with, but Google's system is broken beyond belief.</p>

<h3>Comment/Rating is a broken idea</h3>

<p>Commenting and rating systems are a bad idea to begin with. They pander to the extremes no matter what the subject under comment.</p>

<p>Check any app - <em>any app</em> - on the market: I defy you to find <em>one</em> that is not overwhelmingly rated 1 or 5 stars. Why? Because most people between the two extremes don't care enough or can't be bothered to rate an app.</p>

<p>That leaves the big fans who love the apps unquestionably but, bless 'em, unhelpfully ("&#9733;&#9733;&#9733;&#9733;&#9733; Love this app"), and the haters ("&#9733;&#9734;&#9734;&#9734;&#9734; Gross! sucks! don't download!").</p>

<p>The big fans are wonderful, but not helpful, but neither are they being destructive. The haters though, they really get to me. I <em>want</em> my apps to be good. I <em>want</em> them to work for everyone. I <em>want</em> them to be liked. I feel it <em>really personally</em> when my app gets a bad rating. I shouldn't, everyone tells me, but I can't help it - I'm invested in my work.</p>

<p>I've put a lot of time and effort into this thing - poured myself into it. A lot of that time I've given away free. Gratis. No charge. The "pro" version is the price of a newspaper that you'd read once and throw away.</p>

<p>If you download, don't like, &#9733;&#9734;&#9734;&#9734;&#9734; and walk away, I'm stuck with a bad rating that I can do <em>nothing</em> about, and its cost you <em>nothing</em> (Google Play allows a refund within a couple of hours of the download). </p>

<p>Please don't misunderstand me - I'm not railing against the people who comment and rate negatively - everyone is entitled to an opinion. The problem is the system which Google have created seems designed to make life difficult for app developers, and frustrating for users.</p>

<p>Negative commenters seem to fall into a few categories:</p>

<h4>The Unwittingly Unhelpful</h4>

<blockquote>
  <p>&#9733;&#9734;&#9734;&#9734;&#9734; <em>N. O'Tunreasonable</em> on April 20th, 2012 (Motorola shit-hot-superphone-II with version 2.0.1)</p>
  
  <p>"Doesn't work on Motorola shit-hot-superphone-II. FIX IT OR REFUND ME!".</p>
</blockquote>

<p>Dude, I'd love to fix it. No really, I would! Ask any one of the dozen or so people who've emailed or tweeted me about a problem and who got a response within hours and a fix within two days at most (best I can do on a personal project - I have a day job!).</p>

<p>Unfortunately I don't have a Motorola shit-hot-superphone-II (its always Motorola, why is that? Oh, occasionally its an HTC, but nearly always Motorola. Curse them). </p>

<p>It works great on my Samsung's, including the Galaxy mini that cost Â£50 in Tesco. No new crash reports or freezes in my developer console. How in the living hells do you expect me to FIX IT or, for that matter, to refund you? <em>I do not know who you are</em> because Google anonymise you!</p>

<p>I don't blame these guys actually - they rightly expect the app to work, and equally they expect a commenting system to allow some kind of conversation. Unfortunately, the Android eco-system is fragmented to hell and back, bugs are a universal truth of software, and Play's commenting system does not allow threaded responses and does not give the developer access to the commenters identity.</p>

<p>The first two I can handle - fragmentation requires more work, and bugs can be fixed, but I <em>need</em> to be able to communicate with commenters or I can't help them. I'm looking at you Google. With beetled brows.</p>

<h4>The Blackmailer</h4>

<p>Uses the power of a bad rating to demand whatever features he feels the app should have before benificently conferring his generous 5 stars.</p>

<blockquote>
  <p>&#9733;&#9734;&#9734;&#9734;&#9734; <em>Dick Dastardly</em> on April 16th, 2012 (HTC Wonderful with version 2.0.1)</p>
  
  <p>"Great app, will rate 5* when you add XYZ feature"</p>
</blockquote>

<p>Really, this has happened to me several times. Luckily so far the "requests" have been for features I was already working on, so I've managed to satisfy these without having to bow to any whims. Strangely they do get all gushy afterwards.</p>

<h4>The Affronted</h4>

<p>Affronted that after skipping the description and reading just the name and maybe glancing at the icon of the app, it turns out not to do what they wanted - the confusion thus engendered renders the app's very existence <em>a personal insult</em>.</p>

<blockquote>
  <p>&#9733;&#9734;&#9734;&#9734;&#9734; <em>D. Idnot RTFM</em> on April 16th, 2012 (Samsung Universe XVI with version 2.0.1)</p>
  
  <p>"I ecspected this app to XXX but it dusnt it only YYY sooooo ridicolus OMFG I waisted nerly 30 seconds of my life on this thing and then I culdnt make it XXX but it shoud and like whatever this sux, dont waist ur life on this"</p>
</blockquote>

<p>OK, nothing much I an do about that, except try to come up with a better name / more descriptive icon / shorter and more pointed description. I guess I just have to hope that other potential downloaders do read the app description and take these kinds of comments with a pinch of salt. </p>

<h4>The Cryptic Critic</h4>

<blockquote>
  <p>&#9733;&#9734;&#9734;&#9734;&#9734; on April 16th, 2012 (HTC Wonderful with version 2.0.1)</p>
  
  <p>"Shocking. So baaad. Even the icons suck. WTF!?"</p>
</blockquote>

<p>OK, come on guys! Shocking how? What's bad? Why do the icons suck? Give us a frigging clue here! There must have been something about the app that tempted you to download (unless I've mislabelled one of The Affronted), so presumably the issues with the app could have been worked out.</p>

<p>Except Google didn't give me the chance to help you, or to improve the app for those that come after, because I have <em>no way</em> to answer the comment, publicly or privately, or to try to get any further information from the complainant.</p>

<h2>Options for Developers on Google Play</h2>

<h3>Build great apps</h3>

<p>OK, this one sounds obvious, but its hard to build a great app on the first shot without any helpful feedback. </p>

<p>As a solo developer its especially hard, actually, to see your own mistakes and evaluate the quality of something when you are so close to the work. If you have a company or a team working on an app there are lots of eyes and minds to spot mistakes, find bugs, and think of improvements.</p>

<p>There are a few things we could do as developers, but I'm not sure of the efficacy of these strategies: </p>

<ul>
<li>Build diagnostics into our own apps - crash reports are very very useful, but miss a lot of vital information (Android version!? Heap size on <em>all</em> memory errors!?). We either have to wait for Google to make improvements or DIY it.</li>
<li>Build feedback into our own apps - ask the user to submit feedback from within the app, and record and publish that feedback on the developers website. Doesn't solve the problem of comments on the Google market, but <em>might</em> make it possible to engage in a conversation with a percentage of the users you would otherwise be unable to talk to.</li>
<li>Switch allegiance to Amazon's store. Of course, then you have to pay a fee to join, and are subject to an Apple-like review process, and I've no idea if the result is worth it - do Amazon solve any of the problems with Google's market?</li>
<li>Build our own market that does a better job. No seriously, I'd love to do this. Of course, its a massive undertaking, and would require an incredible confluence of circumstances (or marketing budget) to really take off.</li>
</ul>

<h3>Self comment</h3>

<p>On my free app I added a comment of my own, and I periodically freshen it up so it stays near the top of the stack so new commenters see it. Here's what it says:</p>

<blockquote>
  <p>&#9733;&#9733;&#9733;&#9733;&#9733; steve on March 10, 2012 (Samsung Galaxy S2 with version 1.5.4)
  I am the developer...</p>
  
  <p>Hi all! Please consider contacting me before leaving a negative review - I am very keen to improve the app, will fix reported bugs quickly, and will add popularly requested features! </p>
  
  <p>If you only leave a comment like "forces close" I can't fix it because it doesn't give me any info to work with - that makes me sad.</p>
</blockquote>

<p>Yes, I five-starred my own app. I don't feel bad actually, because how else can I contend with Google's broken ratings/comment system?</p>

<p>Unfortunately I'm not allowed to buy my own paid app, so this technique doesn't work there. I have added more or less the same information in the app description but, as we know, not everyone reads the descriptions.</p>

<blockquote>
  <p>Please please, if you have any problems at all contact us directly by email - crash reports and comments are great but Google don't give us any way to contact you back!!</p>
</blockquote>

<p>To be fair, many (paying) users have emailed me, as has one person who wanted the app but couldn't download either free or paid versions on her device (apparent Market bug! I sent her the paid app for free and contacted the device manufacturer - Samsung - as there's no clear way to contact Google).</p>

<p>Sometimes when I've had negative comments from paying users I've been able to contact them by matching up the purchase record with the information in the comment. </p>

<p>I can't always match them up, but when I can they are never surprised that I was able to contact them. They <em>expect</em> that commenting makes their information available to the developer. Why wouldn't it?</p>

<h3>Mark as spam</h3>

<p>The only tool Google give developers to deal with comments is a spam/not-spam toggle. I don't think its appropriate to mark genuine comments (and I do think all of the above are genuine comments) as spam.</p>

<p>I understand this tool was added some time ago because there were big spam problems. So far I didn't get any spam comments at all.</p>

<h3>Paid vs Free</h3>

<p>Strangely, the users of paid apps are typically much more polite and less inclined to negatively review. They are more often inclined to email for help and delighted to get a response. </p>

<p>Could be its the <a href="http://www.google.co.uk/url?sa=t&amp;rct=j&amp;q=principle%20of%20commitment&amp;source=web&amp;cd=2&amp;ved=0CDcQFjAB&amp;url=http%3A%2F%2Fsumitdhar.blogspot.com%2F2005%2F09%2Finfluence-techniques-commitment.html&amp;ei=AhNET9KDG9OJhQfjl8XnBQ&amp;usg=AFQjCNE8lIgMAPaBaWA2A1-D09qravE6Ew">Principle of Commitment</a> and maybe <a href="http://en.wikipedia.org/wiki/Post-purchase_rationalization">Post-purchase Rationalisation</a> at work? Or maybe its just the demographic of free vs paid users?</p>

<p>I'm strongly considering never publishing a free app again, just for the reduced hassle.</p>

<h2>What Google can do to help developers</h2>

<p>I don't pretend to have all the answers, but a few small things would make my life as an Android developer much easier:</p>

<ul>
<li>Give developers access to the email address of commenters, or even a way to contact them via Google that keeps them anonymous. I imagine Google think that they are protecting users by anonymising them, but its really not helping anyone.</li>
<li>Allow threaded comments. That would be enough - if I could respond, and the commenter was alerted to the response, an awful lot of problems and misunderstandings could be cleared up quickly. This would be massively to Google's benefit, reducing user and developer frustration!</li>
<li>Include more device info in crash reports and comments (e.g. Android build versions and heap size for starters)</li>
<li>Maintain a list of device specs or emulator configurations that can be used to replicate crashes or bugs reported by users - including things like the damn heap size. I can't afford to buy one of every device on the market - my developer console states "This application is available to over 1245 devices.".</li>
</ul>

<p>Please Google, please just help us to help our users. Help us to make the Android eco-system better. Help us to generate more profits for you. Everyone wins.</p>

<p><em>p.s. I found a <a href="http://productforums.google.com/forum/#!category-topic/android-market/feature-requests--suggestions/Ks4Eyg-UnpA">product-forums thread</a> on this topic where the originating comment dates back to May 2009 and raises many of the same points I've raised here. Clearly Google's priorities lie elsewhere :(</em></p>
]]></description>
          <category>Android Market</category>
          <category>Google Play</category>
          <category>Comments</category>
          <category>Fail</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Sat, 21 Apr 2012 00:00:00 +0100</pubDate>
      </item>
      <item>
        <title><![CDATA[Comparing methods of XML parsing in Android]]></title>
        <link><![CDATA[http://steveliles.github.com/comparing_methods_of_xml_parsing_in_android.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/comparing_methods_of_xml_parsing_in_android.html</guid>
        <description><![CDATA[<p>This post details my experiments parsing the same document with the usual-suspects - DOM, SAX, and Pull parsing - and comparing the results for readability and performance - especially for Android. The parsing mechanisms compared here are:</p>

<ol>
<li>W3C DOM parsing</li>
<li>W3C DOM and XPath</li>
<li>SAX Parsing</li>
<li>Pull Parsing</li>
<li><a href="https://github.com/steveliles/dsl4xml">dsl4xml</a> (dsl around Pull-parser)</li>
<li><a href="http://www.thebuzzmedia.com/software/simple-java-xml-parser-sjxp/">SJXP</a> (thin Pull-parser wrapper using xpath-like expressions)</li>
</ol>

<p>I hope to add more later - some contenders include: <a href="http://www.oracle.com/technetwork/articles/javase/index-140168.html">jaxb</a>; <a href="http://xstream.codehaus.org/">xstream</a>; and <a href="http://simple.sourceforge.net/">Simple</a>.</p>

<p>The <a href="https://github.com/steveliles/dsl4xml-perf">code for the entire project</a> is in github. You will need to Maven install the <a href="https://github.com/steveliles/dsl4xml">dsl4xml</a> library if you want to run the tests yourself, as I'm afraid I don't have a public repo for it yet.</p>

<p><em>Important Note</em>: This experiment was inspired by some work I did to optimise a slow Android app, where the original authors had used mostly DOM parsing with a sprinkling of XPath. </p>

<p>My ultimate aim was to run these perf tests on one or more real Android devices and show how they compare there.</p>

<p>For this reason if you look at the project in github, you'll see that I've imported the Android 4 jar and used only the parser implementations that are available without additional imports in Android. (OK, the two pull-parser wrappers require very small standalone jars, sorry).</p>

<p>The Android project and Activity for running the tests on a device is in a separate project <a href="https://github.com/steveliles/dsl4xml-perf-android">here</a>.</p>

<h2>The XML</h2>

<p>The XML file being parsed is a Twitter search result (Atom feed). You can see the actual file <a href="https://github.com/steveliles/dsl4xml-perf/blob/master/src/main/java/com/sjl/dsl4xml/performance/model/twitter-atom.xml">here</a>, but this is a snippet of the parts I'm interested in parsing for these tests (the 15 <code>&lt;entry&gt;</code>'s in the document):</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;feed .. &gt;
  ..
  &lt;entry&gt;
    ..
    &lt;published&gt;2012-04-09T10:10:24Z&lt;/published&gt;
    &lt;title&gt;Tweet title&lt;/title&gt;
    &lt;content type="html"&gt;Full tweet content&lt;/content&gt;
    ..
    &lt;twitter:lang&gt;en&lt;/twitter:lang&gt;
    &lt;author&gt;
        &lt;name&gt;steveliles (Steve Liles)&lt;/name&gt;
        &lt;uri&gt;http://twitter.com/steveliles&lt;/uri&gt;
    &lt;/author&gt;
  &lt;/entry&gt;
  ..
&lt;/feed&gt;
</code></pre>

<h2>The POJO's</h2>

<p>The Java objects we're unmarshalling to are very simple and don't need any explanation. You can see them in Github <a href="https://github.com/steveliles/dsl4xml-perf/tree/master/src/main/java/com/sjl/dsl4xml/performance/model">here</a>.</p>

<h2>Parsing the Twitter/Atom feed</h2>

<p>First, just a few notes on what I'm trying to do. I basically want to compare two things:</p>

<ol>
<li>Readability/maintainability of <em>typical</em> parsing code.</li>
<li>Parsing performance with said <em>typical</em> parsing code, incl. under concurrent load.</li>
</ol>

<p>With that in mind, I've tried to keep the parsing code small, tight, and (AFAIK) typical for each mechanism, but without layering any further libraries or helper methods on top. </p>

<p>In working with each parsing mechanism I have tried to choose more performant approaches where the readability trade-off is not high.</p>

<p>Without further ado, lets see what parsing this document and marshalling to Java objects is like using the various libraries.</p>

<h3>W3C DOM</h3>

<p>DOM (Document Object Model) parsing builds an in-memory object representation of the entire XML document. You can then rummage around in the DOM, going and back and forth between elements and reading data from them in whatever order you like.</p>

<p>Because the entire document is read into memory, there is an upper limit on the size of document you can read (constrained by the size of your Java heap). </p>

<p>Memory is not used particularly efficiently either - a DOM may consist of very many sparsely populated <code>List</code> objects (backed by mostly empty arrays). A side effect of all these objects in memory is that when you're finished with them there's a lot for the Garbage Collector to clean up.</p>

<p>On the plus side, DOM parsing is straight-forward to work with, particularly if you don't care much about speed and use <code>getElementsByTagName()</code> wherever possible.</p>

<p>The actual code I used for the performance test is <a href="https://github.com/steveliles/dsl4xml-perf/blob/master/src/main/java/com/sjl/dsl4xml/performance/parsers/DOMTweetsReader.java">here</a>, but this is roughly what it ended up looking like:</p>

<pre><code>private DocumentBuilder builder;
private DateFormat dateFormat;

public DOMTweetsReader() 
throws Exception {
    DocumentBuilderFactory factory = 
        DocumentBuilderFactory.newInstance();
    builder = factory.newDocumentBuilder();
    dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
}

@Override
public String getParserName() {
    return "W3C DOM";
}

public Tweets read(InputStream anInputStream) 
throws Exception {
    Document _d = builder.parse(anInputStream, "utf-8");
    Tweets _result = new Tweets();
    unmarshall(_d, _result);
    return _result;
}

public void unmarshall(Document aDoc, Tweets aTo) 
throws Exception {
    NodeList _nodes = aDoc.getChildNodes().item(0).getChildNodes();
    for (int i=0; i&amp;lt;_nodes.getLength(); i++) {
        Node _n = _nodes.item(i);
        if ((_n.getNodeType() == Node.ELEMENT_NODE) &amp;&amp; 
            ("entry".equals(_n.getNodeName())
         ){
            Tweet _tweet = new Tweet();
            aTo.addTweet(_tweet);
            unmarshallEntry((Element)_n, _tweet);
        }
    }
}

private void unmarshallEntry(Element aTweetEl, Tweet aTo)
throws Exception {
    NodeList _nodes = aTweetEl.getChildNodes();
    for (int i=0; i&amp;lt;_nodes.getLength(); i++) {
        Node _n = _nodes.item(i);
        if (_n.getNodeType() == Node.ELEMENT_NODE) {                    
            if ("published".equals(_n.getNodeName())) {                         
                aTo.setPublished(dateFormat.parse(getPCData(_n)));
            } else if ("title".equals(_n.getNodeName())) {
                aTo.setTitle(getPCData(_n));
            } else if ("content".equals(_n.getNodeName())) {
                Content _content = new Content();
                aTo.setContent(_content);
                unmarshallContent((Element)_n, _content);
            } else if ("lang".equals(_n.getNodeName())) {
                aTo.setLanguage(getPCData(_n));
            } else if ("author".equals(_n.getNodeName())) {
                Author _author = new Author();
                aTo.setAuthor(_author);
                unmarshallAuthor((Element)_n, _author);
            }
        }
    }
}

private void unmarshallContent(Element aContentEl, Content aTo) {
    aTo.setType(aContentEl.getAttribute("type"));
    aTo.setValue(aContentEl.getNodeValue());
}

private void unmarshallAuthor(Element anAuthorEl, Author aTo) {
    NodeList _nodes = anAuthorEl.getChildNodes();
    for (int i=0; i&amp;lt;_nodes.getLength(); i++) {
        Node _n = _nodes.item(i);
        if ("name".equals(_n.getNodeName())) {
            aTo.setName(getPCData(_n));
        } else if ("uri".equals(_n.getNodeName())) {
            aTo.setUri(getPCData(_n));
        }
    }
}

private String getPCData(Node aNode) {
    StringBuilder _sb = new StringBuilder();
    if (Node.ELEMENT_NODE == aNode.getNodeType()) {
        NodeList _nodes = aNode.getChildNodes();
        for (int i=0; i&amp;lt;_nodes.getLength(); i++) {
            Node _n = _nodes.item(i);
            if (Node.ELEMENT_NODE == _n.getNodeType()) {
                _sb.append(getPCData(_n));
            } else if (Node.TEXT_NODE == _n.getNodeType()) {
                _sb.append(_n.getNodeValue());
            }
        }
    }
    return _sb.toString();
}
</code></pre>

<p>Its worth noting that I would normally extract some useful utility classes/methods - for example <code>getPCData(Node)</code> - but here I'm trying to keep the sample self-contained.</p>

<p>Note that this code is not thread-safe because of the unsynchronized use of <code>SimpleDateFormat</code>. I am using separate instances of the Reader classes in each thread for my threaded tests.</p>

<h3>W3C DOM and XPath</h3>

<p>XPath is a language for describing locations within an XML document as paths from a starting location (which can be the root of the document (/), the current location (.//) or anywhere (//)).</p>

<p>I've used XPath on and off for years, mostly in XSLT stylesheets, but also occasionally to pluck bits of information out of documents in code. It is very straight-forward to use.</p>

<p>Here's a sample for parsing our Twitter Atom feed. The <a href="https://github.com/steveliles/dsl4xml-perf/blob/master/src/main/java/com/sjl/dsl4xml/performance/parsers/DOMXPathTweetsReader.java">actual test code</a> is in github.</p>

<pre><code>private DocumentBuilder builder;
private XPathFactory factory;

private XPathExpression entry;
private XPathExpression published;
private XPathExpression title;
private XPathExpression contentType;
private XPathExpression content;
private XPathExpression lang;
private XPathExpression authorName;
private XPathExpression authorUri;

private DateFormat dateFormat;

public DOMXPathTweetsReader() 
throws Exception {
    DocumentBuilderFactory _dbf = 
        DocumentBuilderFactory.newInstance();
    _dbf.setNamespaceAware(true);
    builder = _dbf.newDocumentBuilder();
    factory = XPathFactory.newInstance();

    NamespaceContext _ctx = new NamespaceContext() {
        public String getNamespaceURI(String aPrefix) {
            String _uri;
            if (aPrefix.equals("atom"))
                _uri = "http://www.w3.org/2005/Atom";
            else if (aPrefix.equals("twitter"))
                _uri = "http://api.twitter.com/";
            else
                _uri = null;
            return _uri;
        }

        @Override
        public String getPrefix(String aArg0) {
            return null;
        }

        @Override
        @SuppressWarnings("rawtypes")
        public Iterator getPrefixes(String aArg0) {
            return null;
        }
    };

    entry = newXPath(factory, _ctx, "/atom:feed/atom:entry");
    published = newXPath(factory, _ctx, ".//atom:published");
    title = newXPath(factory, _ctx, ".//atom:title");
    contentType = newXPath(factory, _ctx, ".//atom:content/@type");
    content = newXPath(factory, _ctx, ".//atom:content");
    lang = newXPath(factory, _ctx, ".//twitter:lang");
    authorName = newXPath(factory, _ctx, ".//atom:author/atom:name");
    authorUri = newXPath(factory, _ctx, ".//atom:author/atom:uri");

    dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
}

private XPathExpression newXPath(
    XPathFactory aFactory, NamespaceContext aCtx, String anXPath
) throws Exception {
    XPath _xp = factory.newXPath();
    _xp.setNamespaceContext(aCtx);
    return _xp.compile(anXPath);
}

@Override
public String getParserName() {
    return "W3C DOM/XPath";
}

@Override
public Tweets read(InputStream anInputStream)
throws Exception {
    Tweets _result = new Tweets();
    Document _document = builder.parse(anInputStream);

    NodeList _entries = (NodeList) 
        entry.evaluate(_document, XPathConstants.NODESET);                  
    for (int i=0; i&amp;lt;_entries.getLength(); i++) {
        Tweet _tweet = new Tweet();
        _result.addTweet(_tweet);

        Node _entryNode = _entries.item(i);

        _tweet.setPublished(getPublishedDate(_entryNode));
        _tweet.setTitle(title.evaluate(_entryNode));
        _tweet.setLanguage(lang.evaluate(_entryNode));

        Content _c = new Content();
        _tweet.setContent(_c);

        _c.setType(contentType.evaluate(_entryNode));
        _c.setValue(content.evaluate(_entryNode));

        Author _a = new Author();
        _tweet.setAuthor(_a);

        _a.setName(authorName.evaluate(_entryNode));
        _a.setUri(authorUri.evaluate(_entryNode));
    }

    return _result;
}

private Date getPublishedDate(Node aNode) 
throws Exception {
    return dateFormat.parse(published.evaluate(aNode));
}
</code></pre>

<p>The code ends up being quite easy to read and can be written to nest in a way that mimics the document structure. There is a very big downside - as you'll see later - the performance is <em>atrocious</em>. </p>

<h3>SAX Parser</h3>

<p>SAX stands for Simple API for XML. It uses a "push" approach: whereas with DOM you can dig around in the document in whatever order you like, SAX parsing is event-driven which means you have to handle the data as it is given to you.</p>

<p>SAX parsers fire events when they encounter the various components that make up an XML file. You register a <code>ContentHandler</code> whose methods are called-back when these events occur (for example when the parser finds a new start element, it invokes the startElement method of your <code>ContentHandler</code>).</p>

<p>The API assumes that the consumer (<code>ContentHandler</code>) is going to maintain some awareness of its state (e.g. where it currently is within the document). I sometimes use a <code>java.util.Stack</code> to push/pop/peek at which element I'm currently working in, but here I can get away with just recording the name of the current element.</p>

<p>I'm extending <code>DefaultHandler</code> because I'm not interested in many of the events (it provides a default empty implementation of those methods for me).</p>

<p>The <a href="https://github.com/steveliles/dsl4xml-perf/blob/master/src/main/java/com/sjl/dsl4xml/performance/parsers/SAXTweetsReader.java">actual test code</a> is in github, and is actually more complex in order to handle entity-refs via a <code>LexicalHandler</code>,  but here's the gist of it:</p>

<pre><code>private XMLReader reader;
private TweetsHandler handler;

public SAXTweetsReader() 
throws Exception {
    SAXParserFactory _f = SAXParserFactory.newInstance();
    SAXParser _p = _f.newSAXParser();
    reader = _p.getXMLReader();
    handler = new TweetsHandler();
    reader.setContentHandler(handler);
}

@Override
public String getParserName() {
    return "SAX";
}

@Override
public Tweets read(InputStream anInputStream) 
throws Exception {
    reader.parse(new InputSource(anInputStream));
    return handler.getResult();
}

private static class TweetsHandler extends DefaultHandler {

    private DateFormat dateFormat = 
        new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
    private Tweets tweets;
    private Tweet tweet;
    private Content content;
    private Author author;
    private String currentElement;

    public Tweets getResult() {
        return tweets;
    }

    @Override
    public void startDocument() throws SAXException {
        tweets = new Tweets();
    }

    @Override
    public void startElement(
        String aUri, String aLocalName, 
        String aQName, Attributes aAttributes
    ) throws SAXException {
        currentElement = aQName;
        if ("entry".equals(aQName)) {
            tweets.addTweet(tweet = new Tweet());
        } else if ("content".equals(aQName)) {
            tweet.setContent(content = new Content());
            content.setType(aAttributes.getValue("type"));
        } else if ("author".equals(aQName)) {
            tweet.setAuthor(author = new Author());
        }
    }

    @Override
    public void endElement(
        String aUri, String aLocalName, String aQName
    ) throws SAXException {
        currentElement = null;
    }

    @Override
    public void characters(char[] aCh, int aStart, int aLength)
    throws SAXException {
        if ("published".equals(currentElement)) {
            try {
                tweet.setPublished(dateFormat.parse(
                    new String(aCh, aStart, aLength))
                );
            } catch (ParseException anExc) {
                throw new SAXException(anExc);
            }
        } else if (
            ("title".equals(currentElement)) &amp;&amp;
            (tweet != null)
        ) {
            tweet.setTitle(new String(aCh, aStart, aLength));
        } else if ("content".equals(currentElement)) {
            content.setValue(new String(aCh, aStart, aLength));
        } else if ("lang".equals(currentElement)) {
            tweet.setLanguage(new String(aCh, aStart, aLength));
        } else if ("name".equals(currentElement)) {
            author.setName(new String(aCh, aStart, aLength));
        } else if ("uri".equals(currentElement)) {
            author.setUri(new String(aCh, aStart, aLength));
        }
    }
}
</code></pre>

<p>One downside when handling more complicated documents is that the <code>ContentHandler</code> can get littered with intermediate state objects - for example here I have the <code>tweet</code>, <code>content</code>, and <code>author</code> fields.</p>

<p>Another is that SAX is very low level and you have to handle pretty much everything - including that text nodes are passed to you in pieces when there are entity-references present.</p>

<h3>Pull Parser</h3>

<p>Pull-parsing is the "pull" to SAX parsing's "push". SAX pushes content at you by firing events as it encounters constructs within the xml document. Pull-parsing lets you ask for (pull) the next significant construct you are interested in.</p>

<p>You still have to take the data in the order it appears in the document - you can't go back and forth through the document like you can with DOM - but you can skip over bits you aren't interested in.</p>

<p><a href="https://github.com/steveliles/dsl4xml-perf/blob/master/src/main/java/com/sjl/dsl4xml/performance/parsers/PullParserTweetsReader.java">Test code</a> is in github, this is roughly what it looks like:</p>

<pre><code>private DateFormat dateFormat;
private XmlPullParserFactory f;
private Tweets tweets;
private Tweet currentTweet;
private Author currentAuthor;

public PullParserTweetsReader() 
throws Exception {
    dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
    f = XmlPullParserFactory.newInstance();
    f.setNamespaceAware(true);
}

@Override
public String getParserName() {
    return "Pull-Parser";
}

@Override
public Tweets read(InputStream anInputStream) throws Exception {
    XmlPullParser _p = f.newPullParser();
    _p.setInput(anInputStream, "utf-8");
    return parse(_p);
}

private Tweets parse(XmlPullParser aParser) 
throws Exception {
    tweets = new Tweets();

    int _e = aParser.next();
    while (_e != XmlPullParser.END_DOCUMENT) {
        if (_e == XmlPullParser.START_TAG) {
            startTag(aParser.getPrefix(), aParser.getName(), aParser);
        }
        _e = aParser.next();
    }

    return tweets;
}

private void startTag(String aPrefix, String aName, XmlPullParser aParser)
throws Exception {
    if ("entry".equals(aName)) {
        tweets.addTweet(currentTweet = new Tweet());
    } else if ("published".equals(aName)) {
        aParser.next();
        currentTweet.setPublished(dateFormat.parse(aParser.getText()));
    } else if (("title".equals(aName)) &amp;&amp; (currentTweet != null)) {
        aParser.next();
        currentTweet.setTitle(aParser.getText());
    } else if ("content".equals(aName)) {
        Content _c = new Content();
        _c.setType(aParser.getAttributeValue(null, "type"));
        aParser.next();
        _c.setValue(aParser.getText());
        currentTweet.setContent(_c);
    } else if ("lang".equals(aName)) {
        aParser.next();
        currentTweet.setLanguage(aParser.getText());
    } else if ("author".equals(aName)) {
        currentTweet.setAuthor(currentAuthor = new Author());
    } else if ("name".equals(aName)) {
        aParser.next();
        currentAuthor.setName(aParser.getText());
    } else if ("uri".equals(aName)) {
        aParser.next();
        currentAuthor.setUri(aParser.getText());
    }
}
</code></pre>

<h3>SJXP (Pull-Parser wrapper)</h3>

<p>The first of the pull-parser <em>wrappers</em> under test, I stumbled upon <a href="http://www.thebuzzmedia.com/software/simple-java-xml-parser-sjxp/">this one</a> yesterday. I liked the idea behind it so decided to give it a try. </p>

<p>I'm a big fan of callbacks generally, and having spent quite some time working with XPath in the past the idea of using XPath-like syntax to request callbacks from the pull-parser seems tempting.</p>

<p>There was one problem I couldn't work around which seems like either a gap in my knowledge (and the documentation) or an irritating bug - when declaring the paths you have to use the full namespace uri <em>even on elements in the default namespace</em>. </p>

<p>This means that my path declarations even on this shallow document are enormous and I had to split them onto three lines to fit the width of my blog.</p>

<p><a href="https://github.com/steveliles/dsl4xml-perf/blob/master/src/main/java/com/sjl/dsl4xml/performance/parsers/SJXPTweetsReader.java">Code is in github</a>, this is the gist of it:</p>

<pre><code>private Tweet currentTweet;
private DateFormat dateFormat;
private XMLParser&amp;lt;Tweets&gt; parser; 

private IRule&amp;lt;Tweets&gt; tweet = new DefaultRule&amp;lt;Tweets&gt;(Type.TAG, 
    "/[http://www.w3.org/2005/Atom]feed" +
    "/[http://www.w3.org/2005/Atom]entry"
) {
    public void handleTag(
        XMLParser&amp;lt;Tweets&gt; aParser, boolean aIsStartTag, Tweets aUserObject) {
        if (aIsStartTag)
            aUserObject.addTweet(currentTweet = new Tweet());
    }   
};

private IRule&amp;lt;Tweets&gt; published = new DefaultRule&amp;lt;Tweets&gt;(Type.CHARACTER, 
    "/[http://www.w3.org/2005/Atom]feed" +
    "/[http://www.w3.org/2005/Atom]entry" +
    "/[http://www.w3.org/2005/Atom]published"
) {
    public void handleParsedCharacters(
        XMLParser&amp;lt;Tweets&gt; aParser, String aText, Tweets aUserObject
    ) {
        try {                   
            currentTweet.setPublished(dateFormat.parse(aText));
        } catch (ParseException anExc) {
            throw new XMLParserException("date-parsing problem", anExc);
        }
    }           
}; 

private IRule&amp;lt;Tweets&gt; title = new DefaultRule&amp;lt;Tweets&gt;(Type.CHARACTER, 
    "/[http://www.w3.org/2005/Atom]feed" +
    "/[http://www.w3.org/2005/Atom]entry" +
    "/[http://www.w3.org/2005/Atom]title"
) {
    public void handleParsedCharacters(
        XMLParser&amp;lt;Tweets&gt; aParser, String aText, Tweets aUserObject
    ) {
        currentTweet.setTitle(aText);
    }           
};

IRule&amp;lt;Tweets&gt; content = new DefaultRule&amp;lt;Tweets&gt;(Type.TAG, 
    "/[http://www.w3.org/2005/Atom]feed" +
    "/[http://www.w3.org/2005/Atom]entry" +
    "/[http://www.w3.org/2005/Atom]content" +
) {
    public void handleTag(
        XMLParser&amp;lt;Tweets&gt; aParser, boolean aIsStartTag, Tweets aUserObject
    ) {
        if (aIsStartTag)
            currentTweet.setContent(new Content());
        super.handleTag(aParser, aIsStartTag, aUserObject);
    }
};

private IRule&amp;lt;Tweets&gt; contentType = new DefaultRule&amp;lt;Tweets&gt;(Type.ATTRIBUTE, 
    "/[http://www.w3.org/2005/Atom]feed" +
    "/[http://www.w3.org/2005/Atom]entry" +
    "/[http://www.w3.org/2005/Atom]content", "type"
) {
    public void handleParsedAttribute(
        XMLParser&amp;lt;Tweets&gt; aParser, int aIndex, String aValue, Tweets aUserObject
    ) {                 
        currentTweet.getContent().setType(aValue);
    }
};

private IRule&amp;lt;Tweets&gt; contentText = new DefaultRule&amp;lt;Tweets&gt;(Type.CHARACTER, 
    "/[http://www.w3.org/2005/Atom]feed" +
    "/[http://www.w3.org/2005/Atom]entry" +
    "/[http://www.w3.org/2005/Atom]content"
) {
    public void handleParsedCharacters(
        XMLParser&amp;lt;Tweets&gt; aParser, String aText, Tweets aUserObject
    ) {                 
        currentTweet.getContent().setValue(aText);
    }
};

private IRule&amp;lt;Tweets&gt; lang = new DefaultRule&amp;lt;Tweets&gt;(Type.CHARACTER, 
    "/[http://www.w3.org/2005/Atom]feed" +
    "/[http://www.w3.org/2005/Atom]entry" +
    "/[http://api.twitter.com/]lang"
) {
    public void handleParsedCharacters(
        XMLParser&amp;lt;Tweets&gt; aParser, String aText, Tweets aUserObject
    ) {
        currentTweet.setLanguage(aText);
    }
};

private IRule&amp;lt;Tweets&gt; author = new DefaultRule&amp;lt;Tweets&gt;(Type.TAG, 
    "/[http://www.w3.org/2005/Atom]feed" +
    "/[http://www.w3.org/2005/Atom]entry" +
    "/[http://www.w3.org/2005/Atom]author"
) {
    public void handleTag(
        XMLParser&amp;lt;Tweets&gt; aParser, boolean aIsStartTag, Tweets aUserObject
    ) {
        if (aIsStartTag)
            currentTweet.setAuthor(new Author());
        super.handleTag(aParser, aIsStartTag, aUserObject);
    }
};

private IRule&amp;lt;Tweets&gt; authorName = new DefaultRule&amp;lt;Tweets&gt;(Type.CHARACTER, 
    "/[http://www.w3.org/2005/Atom]feed"
    "/[http://www.w3.org/2005/Atom]entry" +
    "/[http://www.w3.org/2005/Atom]author" +
    "/[http://www.w3.org/2005/Atom]name"
) {
    public void handleParsedCharacters(
        XMLParser&amp;lt;Tweets&gt; aParser, String aText, Tweets aUserObject
    ) {
        currentTweet.getAuthor().setName(aText);
    }
};

private IRule&amp;lt;Tweets&gt; authorUri = new DefaultRule&amp;lt;Tweets&gt;(Type.CHARACTER, 
    "/[http://www.w3.org/2005/Atom]feed" +
    "/[http://www.w3.org/2005/Atom]entry" +
    "/[http://www.w3.org/2005/Atom]author" +
    "/[http://www.w3.org/2005/Atom]uri"
) {
    public void handleParsedCharacters(
        XMLParser&amp;lt;Tweets&gt; aParser, String aText, Tweets aUserObject
    ) {
        currentTweet.getAuthor().setUri(aText);
    }
};

@SuppressWarnings("all")
public SJXPTweetsReader() {
    dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
    parser = parser = new XMLParser&amp;lt;Tweets&gt;(
        tweet, published, title, content, contentType, 
        contentText, lang, author, authorName, authorUri
    );
}

@Override
public String getParserName() {
    return "SJXP (pull)";
}

@Override
public Tweets read(InputStream anInputStream) 
throws Exception {
    Tweets _result = new Tweets();  
    parser.parse(anInputStream, "utf-8", _result);
    return _result;
}
</code></pre>

<p>I like the idea of SXJP and I think that - particularly on more complex documents - it will lead to code that is easier to understand and maintain because you can consider each part entirely separately. It bulks up with boiler-plate though, especially with that namespace issue I mentioned.</p>

<p>Like SAX and "straight" Pull parsing it also suffers the problem of having to manage intermediate state (in my sample its <code>currentTweet</code>). It does allow a state/context object to be pushed into the callback methods, so I could have passed a customised context class to manage my state in instead of passing <code>Tweets</code>.</p>

<h3>dsl4xml (Pull-parser wrapper)</h3>

<p>This is my own small wrapper around XMLPullParser. The goals and reasons for it are stated at length <a href="https://github.com/steveliles/dsl4xml">else</a>-<a href="http://steveliles.github.com/xml_parsing_in_android.html">where</a>, but suffice to say that readability without sacrificing speed was my main aim.</p>

<p>Dsl4xml parsing code has a declarative style, is concise, and uses reflection to cut boiler-plate to a minimum.</p>

<p><a href="https://github.com/steveliles/dsl4xml-perf/blob/master/src/main/java/com/sjl/dsl4xml/performance/parsers/Dsl4XmlPullTweetsReader.java">Actual code</a> is in Github, here's what it looks like:</p>

<pre><code>private DocumentReader&amp;lt;Tweets&gt; reader;

public Dsl4XmlTweetsReader() {
    reader = mappingOf(Tweets.class).to(
        tag("entry", Tweet.class).with(
            tag("published"),
            tag("title"),
            tag("content", Content.class).with(
                attribute("type"),
                pcdataMappedTo("value")
            ),
            tag("twitter", "lang").
                withPCDataMappedTo("language"),
            tag("author", Author.class).with(
                tag("name"),
                tag("uri")
            )
        )
    );

    reader.registerConverters(
        new ThreadUnsafeDateConverter("yyyy-MM-dd'T'HH:mm:ss")
    );
}

@Override
public String getParserName() {
    return "DSL4XML (pull)";
}

@Override
public Tweets read(InputStream anInputStream) throws Exception {
    return reader.read(anInputStream, "utf-8");
}
</code></pre>

<p>There are two things I want to point out, which I guess you will have noticed already:</p>

<ol>
<li>This is by far the shortest and simplest code of all the samples shown.</li>
<li>The code is slightly unusual in its style because it uses an <a href="http://martinfowler.com/bliki/DomainSpecificLanguage.html">Internal Domain Specific Language</a>. The nice thing (IMHO) is that it is very readable, and even mimics the structure of the XML itself.</li>
</ol>

<p>Its still early days for dsl4xml, so the DSL may evolve a bit with time. I'm also looking into ways to keep the same tight syntax without resorting to reflection - the aim being to narrow the performance gap between the raw underlying parser (currently a Pull parser) and dsl4xml.</p>

<h2>Performance Comparison</h2>

<p>I built some performance tests using the mechanisms described above to parse the same document repeatedly. </p>

<p>The tests are run repeatedly with increasing numbers of threads, from 1 to 8, parsing 1000 documents in each thread. The xml document is read into a byte array in memory before the test starts to eliminate disk IO from consideration.</p>

<p>When the statistics for each method have been collected, the test generates a html document that uses Google charts to render the results.</p>

<p>Each parsing method is tested several times and the results averaged to smooth out some of the wilder outliers (still far from perfect, partly due to garbage collection). I ran the tests on my Linux Desktop, Macbook Air, Samsung Galaxy S2 and Morotola Xoom2 Media Edition. </p>

<p>Here is the chart for the desktop (Core i7 (quad) 1.8GHz, 4GB RAM, Ubuntu 11.10, Sun JDK 1.6.0-26). There is a noticeable hump at 4 threads, presumably because its a quad core. Performance keeps rising up to 8 threads, this presumably because the cpu has hyperthreading. After 8 threads the performance slowly drops off as the context-switching overhead builds up (not shown here):</p>

<div id="desktop_chart_div"></div>

<p>And here's the chart from my MacBook Air (Core i5 (dual) 1.7GHz, 4GB RAM, OSX Lion, Apple JDK 1.6.0-31):</p>

<div id="laptop_chart_div"></div>

<p>The difference running under Android is, to put it mildly, astonishing. Here's the chart from my Samsung Galaxy S2 running Android 2.3.4, 64Mb heap. I reduced the max concurrency to 4 and the number of documents parsed per thread to 10, otherwise my phone would be obsolete before the results came back :)</p>

<div id="mobile_chart_div"></div>

<p>Yep, SAX kicking ass right there.</p>

<p>Here's how it looks on a Motorola Xoom 2 Media edition running Android 3.2.2 (with 48Mb heap):</p>

<div id="tablet_chart_div"></div>

<p>Confirming that SAX is the way to go on Android!</p>

<h4>Quick side note about iOS</h4>

<p>My friend <a href="http://twitter.com/#!/prestonmr">Matt Preston</a> did a quick port of the <em>DOM</em> and <em>SAX</em> parsing tests to iOS. </p>

<p>He didn't produce a chart (yet!), but the <em>DOM</em> parsing throughput on an iPhone 4S was approximately twice as good as <em>SAX</em> parsing on my Samsung. SAX Parsing on the iPhone churned through on average 150 docs/sec!</p>

<p>Its interesting to note that the iPhone4S runs a 1GHz Cortex A9 CPU <em>clocked down</em> to 800Mhz, while my Samsung is running a <em>1.2GHz</em> Cortex A9.</p>

<h4>Why XPath parsing sucked so bad</h4>

<p>The observant will have noticed the charts do not contain figures for the XPath parsing. That's because I dropped it when I realised it was two orders of magnitude slower even than DOM parsing.</p>

<p>This appalling performance seems to be because when executing <em>each</em> xpath expression a context object is created which involves looking up several files on the classpath (and all the inherent synchronisation this entails). I don't intend to waste my time digging into why this can't done once and cached :(.</p>

<p>If you're interested, this is what my threads spent most of their time doing in the XPath test:</p>

<pre><code>"Thread-11" prio=5 tid=7fcf544d2000 nid=0x10d6bb000 
    waiting for monitor entry [10d6b9000]
    java.lang.Thread.State: BLOCKED (on object monitor)
    at java.util.zip.ZipFile.getEntry(ZipFile.java:159)
    - locked &amp;lt;7f4514c88&gt; (a java.util.jar.JarFile)
    at java.util.jar.JarFile.getEntry(JarFile.java:208)
    at java.util.jar.JarFile.getJarEntry(JarFile.java:191)
    at sun.misc.URLClassPath$JarLoader.getResource(URLClassPath.java:757)
    at sun.misc.URLClassPath$JarLoader.findResource(URLClassPath.java:735)
    at sun.misc.URLClassPath.findResource(URLClassPath.java:146)
    at java.net.URLClassLoader$2.run(URLClassLoader.java:385)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.net.URLClassLoader.findResource(URLClassLoader.java:382)
    at java.lang.ClassLoader.getResource(ClassLoader.java:1002)
    at java.lang.ClassLoader.getResource(ClassLoader.java:997)
    at java.lang.ClassLoader.getSystemResource(ClassLoader.java:1100)
    at java.lang.ClassLoader.getSystemResourceAsStream(ClassLoader.java:1214)
    at com.sun.org.apache.xml.internal.dtm.SecuritySupport12$6.run
        (SecuritySupport12.java:117)
    at java.security.AccessController.doPrivileged(Native Method)
    at
    com.sun.org.apache.xml.internal.dtm.SecuritySupport12.
        getResourceAsStream(SecuritySupport12.java:112)
    at com.sun.org.apache.xml.internal.dtm.ObjectFactory.
        findJarServiceProviderName(ObjectFactory.java:549)
    at com.sun.org.apache.xml.internal.dtm.ObjectFactory.
        lookUpFactoryClassName(ObjectFactory.java:373)
    at com.sun.org.apache.xml.internal.dtm.ObjectFactory.
        lookUpFactoryClass(ObjectFactory.java:206)
    at com.sun.org.apache.xml.internal.dtm.ObjectFactory.
        createObject(ObjectFactory.java:131)
    at com.sun.org.apache.xml.internal.dtm.ObjectFactory.
        createObject(ObjectFactory.java:101)
    at com.sun.org.apache.xml.internal.dtm.DTMManager.
        newInstance(DTMManager.java:135)
    at com.sun.org.apache.xpath.internal.XPathContext.
        &amp;lt;init&gt;(XPathContext.java:100)
    at com.sun.org.apache.xpath.internal.jaxp.XPathExpressionImpl.
        eval(XPathExpressionImpl.java:110)
</code></pre>

<h2>Conclusions</h2>

<h3>Readability</h3>

<p>Of the mechanisms tested so far, and from the code samples above, I think that dsl4xml produces far the most readable and maintainable parsing code. Of course I am biased. </p>

<p>I think SAX parsing would have worked out to be the most readable of the other mechanisms if it hadn't been for those pesky entity-refs. As it is I have to recommend Pull-parsing as the way to go for readability.</p>

<h3>Desktop/laptop xml parsing performance</h3>

<p>SAX parsing and the pull-parsing wrappers give comparable performance. Raw Pull-parsing beats the lot by a margin of around 15%. DOM performs relatively badly - around twice as slow as any of the others. Don't go near XPath based parsing unless you like watching paint dry.</p>

<p>Recommendation: Pull Parser for max performance and relative ease of use. Dsl4xml if you want performance <em>and</em> great readability :)</p>

<h3>Android xml parsing performance</h3>

<p>Avoid XPath at all costs. DOM and pull-parsing appear to have similarly poor performance characteristics. SAX absolutely <em>destroys</em> all the others - roughly an order of magnitude quicker.</p>

<p>Recommendation: SAX, every time. I'll get working on a SAX-based dsl4xml implementation :)</p>

<p><em>Update (23rd April 2012): Just finished a SAX-based dsl4xml - here's the performance chart for my Samsung Galaxy SII again (also includes figures for SimpleXML):</em></p>

<div id="update_chart_div"></div>

<h3>Final words</h3>

<p>The Twitter Atom feed is not particularly complicated - tags are not deeply nested, not too many attributes, no nested tags of the same name, no mixed content (tags and text-nodes as siblings), etc. </p>

<p>I suspect that the performance gap between the different mechanisms widens as the document complexity increases, but as yet have no real evidence to back that up.</p>

<script type="text/javascript" src="https://www.google.com/jsapi"></script>
<script type="text/javascript">
      google.load("visualization", "1", {packages:["corechart"]});
      google.setOnLoadCallback(drawCharts);

      function drawCharts() {
        drawDesktopChart();
        drawLaptopChart();
        drawMobileChart();
        drawTabletChart();
        drawUpdateChart();
      }

      function drawDesktopChart() {
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Concurrency (threads)');

data.addColumn('number', 'W3C DOM');
data.addColumn('number', 'SAX');
data.addColumn('number', 'Pull');
data.addColumn('number', 'dsl4xml');
data.addColumn('number', 'SJXP');

        data.addRows([

['1', 1832.602735709364, 3047.309539315194, 3173.0422460858813, 3107.05642523978, 3135.5741046887833],
['2', 3582.1149494513074, 5472.478667789554, 7353.287244493242, 5612.2292748296813, 5523.7554631906182],
['3', 4677.6970491022244, 6051.68803044958, 8035.124424148545, 7802.535738870123, 6631.802574047084],
['4', 5359.016501380009, 9074.944239050174, 13088.8170146974735, 10659.357606318107, 9064.701562460433],
['5', 5840.4790247755773, 8386.967417466271, 11803.470921843835, 9494.022503516175, 9404.295333931408],
['6', 7090.0232840469225, 10439.749336350581, 12337.1859987374073, 11472.185791651998, 10465.21753387524],
['7', 7686.6631274700644, 10403.344206920294, 14162.5448904135455, 11761.212554175974, 11103.283101461672],
['8', 7968.051665388115, 10980.660778139436, 14713.042602646617, 12341.624527230158, 12035.611975742948]
        ]);

        var options = {
          title: 'Parsing Throughput (higher is better)',
          hAxis: { title: 'Concurrency (threads)' },
          vAxis: { title: 'Throughput (docs/sec)' }
        };

        var chart = new google.visualization.ColumnChart(document.getElementById('desktop_chart_div'));
        chart.draw(data, options);
      }

    function drawLaptopChart() {
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Concurrency (threads)');

data.addColumn('number', 'W3C DOM');
data.addColumn('number', 'SAX');
data.addColumn('number', 'Pull');
data.addColumn('number', 'dsl4xml');
data.addColumn('number', 'SJXP');

        data.addRows([

['1', 1832.602735709364, 2647.309539315194, 3473.0422460858813, 2387.05642523978, 2535.5741046887833],
['2', 2182.1149494513074, 3972.478667789554, 5253.287244493242, 4012.2292748296813, 3823.7554631906182],
['3', 2977.6970491022244, 4951.68803044958, 6035.124424148545, 4802.535738870123, 4631.802574047084],
['4', 3559.016501380009, 5074.944239050174, 6388.8170146974735, 5659.357606318107, 5064.701562460433],
['5', 3440.4790247755773, 5386.967417466271, 6103.470921843835, 5494.022503516175, 5404.295333931408],
['6', 3690.0232840469225, 5439.749336350581, 6137.1859987374073, 5472.185791651998, 5465.21753387524],
['7', 3686.6631274700644, 5403.344206920294, 5462.5448904135455, 5761.212554175974, 5503.283101461672],
['8', 3568.051665388115, 5580.660778139436, 6713.042602646617, 5541.624527230158, 5535.611975742948]
        ]);

        var options = {
          title: 'Parsing Throughput (higher is better)',
          hAxis: { title: 'Concurrency (threads)' },
          vAxis: { title: 'Throughput (docs/sec)' }
        };

        var chart = new google.visualization.ColumnChart(document.getElementById('laptop_chart_div'));
        chart.draw(data, options);
      }

    function drawMobileChart() {
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Concurrency (threads)');

data.addColumn('number', 'W3C DOM');
data.addColumn('number', 'SAX');
data.addColumn('number', 'Pull');
data.addColumn('number', 'dsl4xml');
data.addColumn('number', 'SJXP');

        data.addRows([

['1', 2.541707357944222, 39.240257662110984, 3.5759414102545857, 3.1541200188086482, 2.5026521752567215],
['2', 4.330846368265108, 61.60437643946365, 6.456946359247942, 5.686983737649393, 4.732176431626203],
['3', 4.351606992043577, 61.514316431090535, 6.307925946534443, 5.685825899522886, 4.586118360054465],
['4', 4.459386705412041, 61.89969059133254, 6.448053162500682, 5.741419718006399, 4.58759932615774]
        ]);

        var options = {
          title: 'Parsing Throughput (higher is better)',
          hAxis: { title: 'Concurrency (threads)' },
          vAxis: { title: 'Throughput (docs/sec)' }
        };

        var chart = new google.visualization.ColumnChart(document.getElementById('mobile_chart_div'));
        chart.draw(data, options);
      }

    function drawTabletChart() {
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Concurrency (threads)');

data.addColumn('number', 'W3C DOM');
data.addColumn('number', 'SAX');
data.addColumn('number', 'Pull');
data.addColumn('number', 'dsl4xml');
data.addColumn('number', 'SJXP');

        data.addRows([

['1', 2.808355131127302, 41.19998995148725, 5.265999845098719, 4.471127605806691, 3.2549656900511446],
['2', 3.7760722761427994, 56.689099096842824, 9.289035040035463, 7.928630708496687, 5.984694902484068],
['3', 3.7462729340199994, 59.54930941243503, 9.301339793390131, 7.970383487927541, 5.957854290081462],
['4', 3.6944918608450323, 58.9957330285963, 9.50247436158096, 8.08040954423548, 6.088092287251627]
        ]);

        var options = {
          title: 'Parsing Throughput (higher is better)',
          hAxis: { title: 'Concurrency (threads)' },
          vAxis: { title: 'Throughput (docs/sec)' }
        };

        var chart = new google.visualization.ColumnChart(document.getElementById('tablet_chart_div'));
        chart.draw(data, options);
      }

      function drawUpdateChart() {

        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Concurrency (threads)');


data.addColumn('number', 'W3C DOM');
data.addColumn('number', 'SAX');
data.addColumn('number', 'Pull');
data.addColumn('number', 'dsl4xml (pull)');
data.addColumn('number', 'dsl4xml (SAX)');
data.addColumn('number', 'SJXP');
data.addColumn('number', 'SimpleXML');

        data.addRows([

['1',2.3990626431189757,43.064527743674304,3.5096192666862467,3.1076837111373043,29.861563321354247,2.4664573717826044,2.3909004146918598],
['2',3.8097945346845243,69.65230695343173,6.033185779344725,5.719798415469687,54.390135966806106,4.19575915770385,3.927812341410011],
['3',3.6368249512540114,71.39012835438209,5.537694525649179,4.886205168164367,58.04773944850799,3.8392278830888653,3.5690149046875117],
['4',3.6586810559054896,78.02354281756789,5.476464455883683,4.989187889389914,60.89659425282844,4.014151778333453,3.6487355420874175]
        ]);

        var options = {
          title: 'Parsing Throughput (higher is better)',
          hAxis: { title: 'Concurrency (threads)' },
          vAxis: { title: 'Throughput (docs/sec)' }
        };

        var chart = new google.visualization.ColumnChart(document.getElementById('update_chart_div'));
        chart.draw(data, options);

      }
</script>
]]></description>
          <category>java</category>
          <category>xml</category>
          <category>parse</category>
          <category>unmarshall</category>
          <category>comparison</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Tue, 10 Apr 2012 00:00:00 +0100</pubDate>
      </item>
      <item>
        <title><![CDATA[DSL for XML parsing in Android]]></title>
        <link><![CDATA[http://steveliles.github.com/dsl_for_xml_parsing_in_android.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/dsl_for_xml_parsing_in_android.html</guid>
        <description><![CDATA[<p>For a readability and performance comparison of different parsing mechanisms available in Android, have a look at my <a href="http://steveliles.github.com/comparing_methods_of_xml_parsing_in_android.html">more recent post</a> that compares parsing a Twitter search result using DOM, SAX, and various Pull parsing methods.</p>

<p><em>The short story:</em> Always use SAX in Android (<a href="https://lh3.googleusercontent.com/-npX8w__TdF8/T4avu-kllZI/AAAAAAAAJBo/rfq8oF43gdw/s800/samsung-galaxy-s2-perf.png">here's why</a>).</p>

<p>SAX and Pull-parsing are fast, but don't lead to the most readable/maintainable code. Instead, how about a super-simple internal DSL for describing the mapping for unmarshalling from XML to POJO's, with pull-parsing performance? Quick example:</p>

<pre><code>&lt;books&gt;
  &lt;book&gt;
    &lt;title&gt;The Hobbit&lt;/title&gt;
    &lt;synopsis&gt;
        A little guy goes on an adventure, 
        finds ring, comes back.
    &lt;/synopsis&gt;
  &lt;/book&gt;
  &lt;book&gt;
    &lt;title&gt;The Lord of the Rings&lt;/title&gt;
    &lt;synopsis&gt;
        A couple of little guys go on an adventure, 
        lose ring, come back.
    &lt;/synopsis&gt;
  &lt;/book&gt;
&lt;/books&gt;
</code></pre>

<p>Can be unmarshalled to simple POJO's with this:</p>

<pre><code>import static com.sjl.dsl4xml.DocumentReader.*;

class BooksReader {
    private DocumentReader&amp;lt;Books&gt; reader;

    public BooksReader() {
        reader = mappingOf(Books.class).to(
           tag("book", Book.class).with(
               tag("title"),
               tag("synopsis")
           )
        );
    }

    public Books reader(Reader aReader) {
        return reader.read(aReader);
    }
}
</code></pre>

<p><em>The long story:</em></p>

<p>I recently had occasion to work on an Android app that was suffering horrible performance problems on startup (approx 7-12 seconds before displaying content).</p>

<p>A look at the code showed up several possible contenders for the source of the problem:</p>

<ol>
<li>Many concurrent http requests to fetch XML content from web</li>
<li>Parsing the returned XML documents concurrently</li>
<li>Parsing documents using DOM (and some XPath)</li>
</ol>

<p>A quick run through with the excellent profiler built in to DDMS immediately showed lots of time spent in DOM methods, and masses of heap being consumed by sparsely populated <code>java.util.List</code> objects (used to represent the DOM in memory).</p>

<p>Since the app was subsequently discarding the parsed Document object, the large heap consumption was contributing a huge garbage-collection load as a side-effect.</p>

<p>Parsing many documents at once meant that the app suffered a perfect storm of exacerbating issues: Slow DOM traversal with XPath; constant thread context-switching; massive heap consumption; and huge object churn.</p>

<p>The network requests - even over 3G - were comparatively insignificant in the grand scheme.</p>

<h2>Reducing thread context switching</h2>

<p>An obvious and inexpensive thing to try at this point was reducing the concurrency to minimise the overhead of context-switching and hopefully enable the CPU caches to be used to best advantage. </p>

<p>I confess I hoped for a significant improvement from this small change, but the difference, while measurable, was too small to be significant (~5-10%).</p>

<h2>More efficient parsing</h2>

<p>XPath is easy to use, and typically makes it possible to write straight-forward code for marshalling data from an XML document into Java objects. It is, however, horribly slow and a terrible memory hog.</p>

<p>I decided to try an experiment with an alternative parsing method, to see if a worthwhile performance gain could be achieved on one of the smaller documents that could then be applied to others.</p>

<p>I wrote a small test-case confirming the correctness of the existing parsing mechanism and testing the throughput in documents per second, then extracted an interface and created a new implementation that used Pull-Parsing instead of DOM and XPath.</p>

<p>The result was quite pleasing: 5x faster on a simple document. I fully expected the performance gains to be even better on more complex documents, so was quite eager to repeat the process for one of the most complex documents. </p>

<p>However, I had one major concern that put me off: the code for parsing even a simple document was already quite long and had a nasty whiff of conditional-overkill (think: lots of if statements). I wasn't too happy about trading code readability for performance.</p>

<p>I pondered a few alternatives like <a href="http://xstream.codehaus.org/">XStream</a> which I've used a lot for converting from Java to XML but not much the other way around, and <a href="http://simple.sourceforge.net/">SimpleXML</a> which I have used previously and can be nice, but pollutes your model objects with annotations and in some situations can be a real pain to get working.</p>

<h2>An Internal DSL for mapping XML to POJO's</h2>

<p>In the end I decided to spend just a few hours turning the problem over in code to see if I could come up with something more readable for working with the pull-parser directly. </p>

<p>The result, after an afternoon of attempting to parse the most complex XML file the app consumed, was a small Internal DSL (Domain Specific Language) for declaratively describing the mapping between an XML and the Java model classes, and a 15x performance improvement in startup time for the app (7-12 seconds down to ~0.5s).</p>

<p>The DSL I originally came up with required some boiler-plate code to do the final mapping between text nodes / attributes and the model classes being populated. If Java had a neat syntax for closures this would have been much less irritating :)</p>

<p>As it was the boiler plate irked me - too much <em>stuff</em> getting in the way of reading what was really important. I thought about it a bit in my spare time, and had another shot at it. My aims were:</p>

<ol>
<li>To make readable, maintainable, declarative code that unmarshalls XML documents to Java objects.</li>
<li>To make unmarshalling XML documents to Java objects very fast (sax/pull-parsing speeds).</li>
<li>To avoid polluting model classes with metadata about xml parsing (no annotations).</li>
<li>To avoid additional build-time steps or "untouchable" code (code generators, etc).</li>
<li>To produce a very small jar with no large dependencies.</li>
</ol>

<p>The result is starting to take shape in github as <a href="https://github.com/steveliles/dsl4xml">dsl4xml</a>. It removes all of the boiler plate in exchange for a small performance penalty due to use of reflection. I don't have comparative performance figures yet, but will post some when I get time.</p>

<h3>Another example</h3>

<p>XML:</p>

<pre><code>&lt;hobbit&gt;
  &lt;name firstname="Frodo" surname="Baggins"/&gt;
  &lt;dob&gt;11400930&lt;/dob&gt;
  &lt;address&gt;
    &lt;house&gt;
      &lt;name&gt;Bag End&lt;/name&gt;
      &lt;number&gt;&lt;/number&gt;
    &lt;/house&gt;
    &lt;street&gt;Bagshot Row&lt;/street&gt;
    &lt;town&gt;Hobbiton&lt;/town&gt;
    &lt;country&gt;The Shire&lt;/country&gt;
  &lt;/address&gt;
&lt;/hobbit&gt;
</code></pre>

<p>POJO's: <a href="https://github.com/steveliles/dsl4xml/commit/ad2141df218a776ebd68a75072feab16a5221fd5#diff-4">See the source-code of the test-case</a></p>

<p>Unmarshalling code:</p>

<pre><code>private static DocumentReader&amp;lt;Hobbit&gt; newReader() {
    DocumentReader&amp;lt;Hobbit&gt; _marshaller = mappingOf(Hobbit.class).to(
        tag("name", Name.class).with(
            attributes("firstname", "surname")
        ),
        tag("dob"),
        tag("address", Address.class).with(
            tag("house", Address.House.class).with(
                tag("name"),
                tag("number")
            ),
            tag("street"),
            tag("town"),
            tag("country")
        )
    );

    _reader.registerConverters(new ThreadUnsafeDateConverter("yyyyMMdd"));

    return _reader;
}
</code></pre>

<p>A <code>DocumentReader</code>, once constructed, is intended to be re-used repeatedly. The <code>DocumentReader</code> itself is <em>completely thread-safe</em> as unmarshalling does not modify any of its internal state. To ensure thread-safety you must use only thread-safe type converters (see type conversion section below).</p>

<p>A minimum of garbage is generated because we're using a pull parser to skip over parts of the document we don't care about, and the only state maintained along the way (in a single-use context object for thread safety) is the domain objects we're creating.</p>

<h3>Type conversion</h3>

<p>You can create and register your own type converters. They are used only to map the lowest level xml data to your Java objects - attribute values and CData <code>String</code>s. The <code>Converter</code> interface looks like this:</p>

<pre><code>package com.sjl.dsl4xml.support;

public interface Converter&amp;lt;T&gt; {
    public boolean canConvertTo(Class&lt;?&gt; aClass);
    public T convert(String aValue);
}
</code></pre>

<p>An example <code>Converter</code> for converting <code>String</code> values to primitive int's looks like this:</p>

<pre><code>class PrimitiveIntConverter implements Converter&amp;lt;Integer&gt; {
    @Override
    public boolean canConvertTo(Class&amp;lt;?&gt; aClass) {
        return aClass.isAssignableFrom(Integer.TYPE);
    }

    @Override
    public Integer convert(String aValue) {
        return ((aValue == null) || ("".equals(aValue))) ? 
            0 : new Integer(aValue);
    }
}
</code></pre>

<p>Most converters can be thread-safe, but some may require concurrency control for multi-threaded use (example: when converting dates using SimpleDateFormat). </p>

<p>You can use optimised type converters in situations where you <em>know</em> you will not be unmarshalling from multiple threads concurrently. An example is the <code>ThreadUnsafeDateConverter</code> which is used in the example above because it came from a test-case that will only ever run single-threaded. </p>

<pre><code>public class ThreadUnsafeDateConverter implements Converter&amp;lt;Date&gt; {
    private DateFormat dateFormat;

    public ThreadUnsafeDateConverter(String aDateFormatPattern) {
        // SimpleDateFormat is NOT thread-safe
        dateFormat = new SimpleDateFormat(aDateFormatPattern);
    }

    @Override
    public boolean canConvertTo(Class&amp;lt;?&gt; aClass) {
        return aClass.isAssignableFrom(Date.class);
    }

    @Override
    public Date convert(String aValue) {
        try {
            return ((aValue == null) || ("".equals(aValue))) ? 
                null : dateFormat.parse(aValue);
        } catch (ParseException anExc) {
            throw new XmlMarshallingException(anExc);
        }
    }
}
</code></pre>

<p>The alternative <code>ThreadSafeDateConverter</code> looks like this:</p>

<pre><code>class ThreadSafeDateConverter implements Converter&amp;lt;Date&gt; {
    private ThreadLocal&amp;lt;DateFormat&gt; dateFormat;

    public ThreadSafeDateConverter(final String aDateFormatPattern) {
        dateFormat = new ThreadLocal&amp;lt;DateFormat&gt;() {
            protected DateFormat initialValue() {
                return new SimpleDateFormat(aDateFormatPattern);
            }
        };
    }

    @Override
    public boolean canConvertTo(Class&amp;lt;?&gt; aClass) {
        return aClass.isAssignableFrom(Date.class);
    }

    @Override
    public Date convert(String aValue) {
        try {
            return ((aValue == null) || ("".equals(aValue))) ? 
                null : dateFormat.get().parse(aValue);
        } catch (ParseException anExc) {
            throw new XmlMarshallingException(anExc);
        }
    }
}
</code></pre>

<h3>Missing features</h3>

<p>This is still a very new project, and in an experimental stage. There's loads still to do:</p>

<ul>
<li>Experiment with more documents to drive improvements to the DSL</li>
<li>More converters for the obvious types (e.g., BigDecimal, BigInteger, File, URI, etc.)</li>
<li>Support for namespaced documents</li>
<li>Support for CDATA (so far only tested with PCDATA)</li>
<li>Performance comparisons with DOM, SAX and non-DSL'd Pull parsing</li>
<li>Support for explicit (non-reflective) marshalling of properties</li>
<li>Support for SAX parsing instead of Pull-Parsing (see notes below)</li>
<li>Performance tests</li>
<li>Performance optimisations</li>
</ul>

<h3>Notes</h3>

<p>I came across some interesting comments by <a href="https://plus.google.com/105051985738280261832/posts">Diane Hackborn</a> (Android platform developer) in <a href="http://groups.google.com/group/android-developers/browse_thread/thread/3f9c5fc7402ecdf">this thread</a>. </p>

<p>Diane points out that SAX parsing is faster than Pull Parsing (at least on Android). I had been under the impression it was the other way around, hence I went with Pull parsing. </p>

<p>Later perf tests show SAX to be <em>much</em> faster on Android, so I will probably refactor to use SAX.</p>

<p><img src="https://lh3.googleusercontent.com/-npX8w__TdF8/T4avu-kllZI/AAAAAAAAJBo/rfq8oF43gdw/s800/samsung-galaxy-s2-perf.png" alt="android parser performance" /></p>
]]></description>
          <category>xml</category>
          <category>unmarshall</category>
          <category>android</category>
          <category>pull-parsing</category>
          <category>dsl</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Thu, 05 Apr 2012 00:00:00 +0100</pubDate>
      </item>
      <item>
        <title><![CDATA[Android's AsyncTask]]></title>
        <link><![CDATA[http://steveliles.github.com/android_s_asynctask.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/android_s_asynctask.html</guid>
        <description><![CDATA[<p>The Android platform allows you to use all of the normal Java concurrency constructs. You should use them if you need to do any long-running operations: you must do these off the main UI thread if you want keep your users happy, and the platform even enforces this by displaying an Application Not Responding dialog if an app does not respond to user-input within 5 seconds.</p>

<p>The kinds of things you will want to do off the UI thread are reading/writing data from databases, network calls fetching data from web-servcies, and any time-consuming computational work.</p>

<p>The platform provides a couple of mechanisms to facilitate communication between background threads and the main application thread: <code>Handler</code>'s and <code>AsyncTask</code>s. In this article I want to concentrate on <code>AsyncTask</code>.</p>

<h3>The basics of AsyncTask</h3>

<p>AsyncTask provides a simple API for doing work in the background and re-integrating the result with the main thread. Here's what it looks like:</p>

<pre><code>new AsyncTask&amp;lt;Param, Progress, Result&gt;() {
    protected void onPreExecute() {
        // perhaps show a dialog 
        // with a progress bar
        // to let your users know
        // something is happening
    }

    protected Result doInBackground(Param... aParams) {
        // do some expensive work 
        // in the background here
    }

    protected void onPostExecute(Result aResult) {
        // background work is finished, 
        // we can update the UI here
        // including removing the dialog
    }
}.execute();
</code></pre>

<p>The template methods <code>onPreExecute()</code> and <code>onPostExecute(Result)</code> are invoked such that you can safely update the UI from there. </p>

<p>There is a fourth template method - <code>onProgressUpdate(Progress[])</code> - which you can implement if you want to update the UI to show progress is being made within the background thread. For this to actually work you will need to invoke <code>publishProgress(Progress[])</code> regularly from within <code>doInBackground(Param[])</code>.</p>

<p>AsyncTask is generic, and presents three type variables:</p>

<pre><code>class AsyncTask&amp;lt;Params, Progress, Result&gt;
</code></pre>

<p>They are used as follows:</p>

<ol>
<li><code>Params</code> is the argument type for the <em>varargs array</em> passed in to doInBackground.</li>
<li><code>Progress</code> is the argument type for the <em>varargs array</em> passed in to <code>onProgressUpdate</code>, and so is also the type (of array) you must use when invoking <code>publishProgress</code>.</li>
<li><code>Result</code> is the return type of <code>doInBackground</code>, which in turn is the argument type passed in to <code>onPostExecute</code>.</li>
</ol>

<h3>What happens when you execute()?</h3>

<p>When <code>execute(Object.. params)</code> is invoked on an <code>AsyncTask</code> the task is executed in a background thread. Depending on the platform <code>AsyncTask</code>s may be executed serially (pre 1.6 and potentially again in 4+), or concurrently (1.6-3.2). </p>

<p>To be sure of running serially or concurrently as you require, from API Level 11 onwards you can use the <code>executeOnExecutor(Executor executor, Object.. params)</code> method instead, and supply an executor. The platform provides two executors for convenience, accessable as <code>AsyncTask.SERIAL_EXECUTOR</code> and <code>AsyncTask.THREAD_POOL_EXECUTOR</code> respectively. (Note: If you are targeting earlier API levels <code>executeOnExecutor</code> is not available, but you have several options - see below).</p>

<p>I have not tested exhaustively, but at least on tablets running HoneyComb the <code>THREAD_POOL_EXECUTOR</code> is set up with a maximum pool size of 128 and an additional queue length of 10. </p>

<p>If you exhaust the pool by submitting too many <code>AsyncTask</code>'s concurrently you will receive <code>RejectedExecutionException</code>'s - a subclass of RuntimeException which, unless handled, will crash your application. </p>

<p>I suspect that on a resource-constrained device it is probably quite a disaster if you actually have that many <code>AsyncTask</code>'s active concurrently - context-switching all those threads will render the cpu-cache ineffective, cost a lot in terms of CPU time, and anyway all those concurrently active threads will likely be using a good chunk of your heap and generating garbage for the GC to contend with.</p>

<p>You might want to consider an alternative <code>Executor</code> configured with a lower max threads and a longer queue, or a more appropriate strategy for managing the background work: for example if you have many files to download you could enqueue a url and a callback to a download-manager instead of executing an <code>AsyncTask</code> for each one.</p>

<h3>executeOnExecutor for API levels below 11</h3>

<p>AsyncTask gained a nice new method at API level 11 - <code>executeOnExecutor</code> - allowing you some control of the concurrency of your <code>AsyncTask</code>'s. If you need to support older API levels you have a choice to make: do you absolutely have to have <code>executeOnExecutor</code>, or do you simply want to use it when it is available, and fall-back to <code>execute</code> otherwise?</p>

<h4>The fallback approach</h4>

<p>If you want a simple way to take some measure of control where possible, you can subclass AsyncTask, test for the API level at runtime, and invoke the executeOnExecutor method if it is available - something like this:</p>

<pre><code>class MyAsyncTask&amp;lt;Param, Progress, Result&gt; {

    private static final boolean API_LEVEL_11 
        = android.os.Build.VERSION.SDK_INT &gt; 11;

    public void execute(Executor aExecutor, Params... aParams) {     
        if(API_LEVEL_11)
            executeOnExecutor(aExecutor, aParams); 
        else
            super.execute(aParams);
    }

}
</code></pre>

<p>I know that at first glance something appears wrong here:</p>

<pre><code>private static final boolean API_LEVEL_11 
    = android.os.Build.VERSION.SDK_INT &gt; 11;
</code></pre>

<p>This <em>looks</em> like it will be optimised out by the compiler - a static comparison of a literal integer (11) with what appears to be another static integer (android.os.Build.VERSION.SDK<em>INT), but in fact the upper-case VERSION.SDK</em>INT is slightly misleading - the values in VERSION are extracted at runtime from system properties, so the comparison is not baked in at compile-time.</p>

<h4>executeOnExecutor for all API levels</h4>

<p>If you insist on having executeOnExecutor available for all API levels you might try this: copy the code for AsyncTask from API level 15, rename it (and make a few small changes as described <a href="http://stackoverflow.com/questions/7211684/asynctask-executeonexecutor-before-api-level-11">here</a>), and use that everywhere in place of the SDK version.</p>

<h3>AsyncTask and the Activity lifecycle</h3>

<p>The <code>Activity</code> lifecycle is well defined and provides template methods which are invoked when critical events occur in the life of an <code>Activity</code>. </p>

<p><code>AsyncTask</code>'s are started by an <code>Activity</code> because it needs some potentially blocking work done off the UI thread, and unless you <em>really really know what you are doing</em> they should live and die with that <code>Activity</code>.</p>

<p>If your <code>AsyncTask</code> retains a reference to the <code>Activity</code>, not cancelling the task when the <code>Activity</code> dies wastes CPU resources on work that cannot update its UI, and creates a memory leak (the <code>Activity</code> and all its <code>View</code> hierarchy will be retained <em>until the task completes</em>). </p>

<p>Don't forget that the Activity is destroyed and re-created even on something as simple as a device orientation change, so if a user rotates their device you will have two copies of your Activity retained until the last <code>AsyncTask</code> completes. In a memory constrained environment this can be a disaster!</p>

<p>If you do not intend to update the UI after processing you <em>may</em> be using the wrong construct in some cases - consider whether using a Service would be more appropriate.</p>

<p>For some useful discussion and ideas related to <code>AsyncTask</code> and lifecycle management, see <a href="http://stackoverflow.com/questions/3357477/is-asynctask-really-conceptually-flawed-or-am-i-just-missing-something">this stackoverflow post</a>.</p>

<h4>AsyncTask and good Android citizenship</h4>

<p><code>AsyncTask</code> is in the SDK because it fulfils a common need, but it does not enforce a usage pattern that makes your app a good Android citizen.</p>

<p>In an environment where users switch contexts frequently and quickly (example: receive a phone call while in the midst of writing an email on your phone), it is probably important that your app does not hog resources whilst it is not the current focus.</p>

<p>If, as described above, you've set yourself up to cancel tasks according to the Activity lifecycle methods then you're all set and should not face any issues here.</p>
]]></description>
          <category>Android</category>
          <category>AsyncTask</category>
          <category>Threads</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Mon, 26 Mar 2012 00:00:00 +0100</pubDate>
      </item>
      <item>
        <title><![CDATA[Returning a result from an Android Activity]]></title>
        <link><![CDATA[http://steveliles.github.com/returning_a_result_from_an_android_activity.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/returning_a_result_from_an_android_activity.html</guid>
        <description><![CDATA[<p>The Android platform prescribes a number of patterns for putting together an application that plays well with the platform and feels familiar to users.</p>

<p>One of those patterns is the hierarchical use of <code>Activities</code> to segregate the application, and to provide re-usable chunks of application that can service certain requirements. </p>

<p>The higher design goal is to create an eco-system of separable <code>Activities</code> that fulfil <code>Intents</code> that can be re-used by other applications - for example: if my application needs an image, it can request one by invoking an Intent to use an image, and all <code>Activities</code> that can fulfil that <code>Intent</code> will be offered as a choice to the user.</p>

<p>Lets see what that looks like with a code example.</p>

<h3>Invoking an Activity with an Intent</h3>

<p>First of all, lets look at how to invoke an activity with an Intent. Lets say we want to explicitly open the Gallery app to select an image to use in our application. Its very simple:</p>

<pre><code>private static final int PICK_IMAGE_REQUEST = 1;

public void selectImageFromGallery() {
    Intent _intent = new Intent();
    _intent.setType("image/*");
    _intent.setAction(Intent.ACTION_GET_CONTENT);
    startActivityForResult(
        Intent.createChooser(_intent, "Select Picture"), 
        PICK_IMAGE_REQUEST
    );
}
</code></pre>

<p>This will open the gallery app and allow the user to select an image. Notice that in the call to <code>startActivityForResult</code> we provided an int value in the form of <code>PICK_IMAGE_REQUEST</code> - this tells the system what return-code to use when the invoked <code>Activity</code> completes, so that we can respond correctly. </p>

<p>Lets see how we do that ..</p>

<pre><code>@Override
protected void onActivityResult(
    int aRequestCode, int aResultCode, Intent aData
) {
    switch (aRequestCode) {
        case PICK_IMAGE_REQUEST:
            handleUserPickedImage(aData);
            break;
        case SOME_OTHER_REQUEST:
            handleSomethingElse(aData);
            break;
    }
    super.onActivityResult(aRequestCode, aResultCode, aData);
}
</code></pre>

<p>Here we're overriding a method of <code>Activity</code> to handle results being passed back from invoked activities. </p>

<p>The value of <code>aRequestCode</code> is the value passed to the <code>startActivityForResult</code> method (so for us its <code>PICK_IMAGE_REQUEST</code>), and is how we distinguish which activity is returning a result.</p>

<p><code>aResultCode</code> will contain the value set by the invoked <code>Activity</code>'s setResult(int), while <code>aData</code> Intent contains any data returned by the <code>Activity</code>. In our example the Intent contains the Uri of the selected image, which we can access like this:</p>

<pre><code>private void handleUserPickedImage(Intent aData) {
    if ((aData != null) &amp;&amp; (aData.getData() != null)) {
        Uri _imageUri = aData.getData();
        // Do something neat with the image...
    } else {
        // We didn't receive an image...
    }
}
</code></pre>

<h3>Returning values from an Activity</h3>

<p>Great, we can invoke existing <code>Activity</code>'s and collect results. What does it look like from the other side? - How does the Activity return its results to us?</p>

<pre><code>Uri _resultUri = .. // Some uri we want to return  
Intent _result = new Intent();              
_result.setData(_resultUri);
setResult(Activity.RESULT_OK, _result);
finish();
</code></pre>

<p>Its a simple as that: </p>

<ol>
<li>Create an Intent (the result object)</li>
<li>Set the result data (you don't have to return a Uri - you can use the putExtra methods to set any values you want)</li>
<li>Call <code>setResult</code> on your Activity, giving it the result Intent</li>
<li>Call <code>finish</code> on your Activity</li>
</ol>
]]></description>
          <category>Android</category>
          <category>Activity</category>
          <category>Result</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Sat, 03 Mar 2012 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Custom fonts in Android]]></title>
        <link><![CDATA[http://steveliles.github.com/custom_fonts_in_android.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/custom_fonts_in_android.html</guid>
        <description><![CDATA[<p>I've been playing with Android since late December (2011). Its been fun. I've been meaning to document some things I've picked up, but I've been pretty busy hacking away. Time to write a few things down before I forget!</p>

<p>In my - admittedly limited - experience, Android devices typically come pre-installed with just the one font family. Before Ice-Cream Sandwich that font was <a href="http://goo.gl/ssJLD">Droid</a>. In Ice-Cream Sandwich its <a href="http://en.wikipedia.org/wiki/Roboto">Roboto</a>.</p>

<p>If you want to use other fonts in your app, you must package them as assets. I believe Android has supported true-type fonts since the beginning, but now also supports open-type fonts (since 1.6). I always use true-type fonts anyway.</p>

<p>To bundle the font, simply place the .tff file in your project's assets directory. Here's how you load the font in your <code>Activity</code> code:</p>

<pre><code>Typeface t = Typeface.createFromAsset(getAssets(), "my-font.ttf");
</code></pre>

<p>If you want to reference the font from xml markup you're in for a frustrating time. If you do want to take that path, check out this handy <a href="http://stackoverflow.com/questions/2376250/custom-fonts-and-xml-layouts-android">StackOverflow post</a>.</p>

<p>If, like me, you prefer to set the font programmatically to the necessary views, you can call <code>setTypeface(Typeface)</code> on <code>TextView</code>'s and <code>EditText</code>'s.</p>

<p>In some of my layouts (for example "help" screens) I have many <code>TextView</code>'s interspersed with <code>ImageView</code>'s. To make life a bit easier I use the following utility method to set the font on all <code>TextView</code>'s in the view hierarchy:</p>

<pre><code>public static void setFontForAllTextViewsInHierarchy(
    ViewGroup aViewGroup, Typeface aFont) {
    for (int i=0; i&amp;lt;aViewGroup.getChildCount(); i++) {
        View _v = aViewGroup.getChildAt(i);
        if (_v instanceof TextView) {
            ((TextView) _v).setTypeface(aFont);
        } else if (_v instanceof ViewGroup) {
            setFontForAllTextViewsInHierarchy((ViewGroup) _v, aFont);
        }
    }
}
</code></pre>

<p>Using this utility method is as simple as finding <code>ViewGroup</code> whose descendants need a font change, then invoking the method with that <code>ViewGroup</code>:</p>

<pre><code>// somewhere in an Activity..
Typeface font = Typeface.createFromAsset(getAssets(), "my-font.ttf");
ViewGroup vg = (ViewGroup) findViewById(R.id.myViewGroup);
Utils.setFontForAllTextViewsInHierarchy(vg, font);
</code></pre>

<p>I worried at first that this would cause a noticeable re-draw where you first see the system font, then it flashes over to the custom font. Since I tend to set my fonts in my <code>Activity</code>'s <code>onCreate</code>  method immediately following the call to <code>setContentView</code>, my custom font is already specified before the first <code>onDraw</code> invocation hits any of my <code>View</code>'s.</p>
]]></description>
          <category>fonts</category>
          <category>android</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Mon, 20 Feb 2012 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Android 2.1 - trouble with bitmaps]]></title>
        <link><![CDATA[http://steveliles.github.com/android_2_1_trouble_with_bitmaps.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/android_2_1_trouble_with_bitmaps.html</guid>
        <description><![CDATA[<p>I got the following mail from a user of my app:</p>

<blockquote>
  <p>Hi,</p>
  
  <p>Comic strip is a great app and i love it very much.
  But there are couple of problem</p>
  
  <ol>
  <li>It force close when i apply FX</li>
  <li>When i preview the strip, the pictures turn out black</li>
  </ol>
  
  <p>Please fix it
  My handphone is samsung galaxy beam andriod 2.1</p>
</blockquote>

<p>This user has paid for the "pro" version. He also added the following comment in the market:</p>

<blockquote>
  <p>(2 stars) on February 18, 2012 (Samsung Galaxy Beam with version 1.5.0)
  It force close when i fx the pics and the pics turn out blank in the preview page..
  Will upgrade to 5 stars when fixed</p>
</blockquote>

<p>Interesting use of both carrot ("will upgrade to 5 stars"") and stick (current rating: 2 stars). I think the rating mechanism is pretty harsh on developers, but that's a topic for another post :)</p>

<h3>Black images in preview</h3>

<p>I started by looking into problem (2) - the black images in preview. This one sounded unusual - I've had no other reports of this problem at all.</p>

<p>I set up an Android 2.1 device in my emulator and set about trying to replicate the issue. I allowed it a 24Mb heap per app, and started to look into the black images in preview.</p>

<p><img src="https://lh3.googleusercontent.com/-YVYANUbg_aU/T0DJhhXIbJI/AAAAAAAAI4o/Ur3jwiklV4Y/s800/Screen%2520Shot%25202012-02-19%2520at%252010.02.06.png" alt="Galaxy-Beam virtual device" /></p>

<p>I was pretty surprised to see that there was indeed a problem. In all my testing using other Android API levels I hadn't encountered any such issue. Every time I tried to re-load one of the images for preview I saw the following error in log-cat:</p>

<pre><code>Resolve uri failed on bad Bitmap uri: ...
</code></pre>

<p>The strange thing, of course, is that the uri was perfectly fine, works great in all API levels greater than 7, was created by the system using <code>Uri.fromFile(file)</code>, and is working fine even in API level 7 when I reload the image in the scene editor activity!</p>

<h3>Fix for "resolve uri failed on bad bitmap uri"</h3>

<p>Given that the scene-editor was able to load the image just fine, I compared the code I was using to load images in the scene-editor with the code in the preview-activity. I had the following:</p>

<pre><code>// scene-editor-activity snippet - works fine!
Bitmap _b = BitmapFactory.decodeStream(
    rslv.openInputStream(aScene.getBackgroundUri()), null, _opts
);
_img.setImageBitmap(_b);

// preview-activity snippet - fails with 'bad bitmap uri'
ImageView _image = new ImageView(ctx);  
_image.setImageURI(aScene.getBackgroundUri());
</code></pre>

<p>It seems that ImageView in Android versions less than 2.2 (API level 8) has a problem with directly resolving perfectly valid Bitmap uri's. </p>

<p>In the scene-editor I was always resolving the <code>Uri</code> to an <code>InputStream</code> using <code>ContentResolver</code> (which you can obtain from the Activity with <code>getContentResolver()</code>), whilst in my preview activity I was simply expecting ImageView to resolve the uri.</p>

<p>The fix for all Android versions was to use the slightly more laborious method of loading the Bitmap via <code>ContentResolver</code> and setting the <code>Bitmap</code> to the <code>ImageView</code>, like this:</p>

<pre><code>// Resolve a uri to a Bitmap
private Bitmap getImageBitmap(Uri aUri) {
    try {
        BitmapFactory.Options _opts = new BitmapFactory.Options();
        _opts.inScaled = false;
        _opts.inSampleSize = 1;
        _opts.inPreferredConfig = config;

        return BitmapFactory.decodeStream(
            rslv.openInputStream(aUri), null, _opts
        );
    } catch (Exception anExc) {
        L.e("loading bitmap", anExc);
        return null;
    }
}

// set a bitmap instead of a uri...
_image.setImageBitmap(getImageBitmap(aScene));
</code></pre>

<p>If the Uri really resolves to a missing file then I'll still get black images, but this is only likely in fairly extreme circumstances, and at least the app doesn't crash :). I suppose a better solution would be to return the app icon in such cases.</p>

<p>So to the next problem...</p>

<h3>Force-Close while applying FX</h3>

<p>My first guess was that this was going to be a VM budget issue. I've had them before, but with the v1.5.0 release I seemed to have largely solved them (no crash reports <em>at all</em> since). Here are some of the issues:</p>

<ol>
<li>Older Android devices only allow 16Mb to each running app. The generation of devices from about 2 years ago (e.g. original Motorola Droid) often allow 24Mb per app, which is still pretty small for dealing with large images. Current generation (e.g. Samsung Galaxy Mini and S2) allow 64Mb (yay!).</li>
<li>One of the nice things about Android devices is the way in which they integrate with Google's eco-system. For example, the "Gallery" app on most devices shows images from your Picasa Web Albums, as well as photos taken directly on the device. Of course, this means that the phone has access to potentially very large images taken with a "real" camera.</li>
<li>Many mobiles these days have 8MP camera's built in, therefore a single photo can be very large!</li>
<li>The nature of my app (making comic strips from your own images) means that I am dealing with potentially many images at any given time. Applying FX requires at least two such images concurrently in-memory (the source, and the target). The finished strips are rendered as rows of 350x350 images, so the size of that final bitmap depends on how many frames you add to your strip.</li>
</ol>

<p>A quick investigation revealed that I wasn't exceeding the VM budget - nowhere near in fact: the app crashed frequently with the VM size still less than 7Mb. Switching back and forth between API levels 7 and 8 showed that this was definitely only a problem at API level 7 (Android 2.1). </p>

<p>In 2.2 and above I can go through all of the FX several times over with no problems. In 2.1 the app usually crashes at the application of the second effect, but sometimes goes at the first or third attempt.</p>

<h3>SIGSEGV while recycling Bitmap's</h3>

<p>My app allows you to apply some image effects to the photos you select for each frame, to give a more comic-book feel. For example, you can apply a half-tone print effect, or a quantised and outlined "cartoon" effect.</p>

<p>To process these effects I have to juggle multiple <code>Bitmap</code>'s and <code>Canvas</code>'s, and - because of the resource-constrained environment of a mobile device - clean up the memory that these objects were using as soon as they are no longer needed.</p>

<p>To make the user-experience more friendly the FX are processed in a background thread. On the UI thread I show a dialog with a spinner to let the user know something is happening. This is nothing special - I'm using the <code>AsyncTask</code> class provided by the Android framework for exactly this purpose.</p>

<p>In Android - pre Honeycomb - Bitmap memory is allocated off-heap by JNI calls in the Bitmap class. It doesn't gain you extra memory to play with in your VM - the bitmap pixel data is still counted within the total memory used by your app (witness the number of StackOverflow questions pertaining to Bitmap's and VM budget!). In Honeycomb the bitmap pixel data has <a href="http://www.youtube.com/watch?v=_CruQY55HOk">moved into the VM</a></p>

<p>As soon as you're done with a Bitmap, you are supposed to let the Runtime know, by invoking <code>Bitmap.recycle()</code>, then null'ing the reference to the Bitmap. Fine, my app works great on API levels above 7 - no crashes, no warnings, no memory leaks. </p>

<p>At API level 7 (Android 2.1) however, this is what happens:</p>

<pre><code>02-19 09:41:19.710: I/DEBUG(28): *** *** *** *** *** *** *** *** *** 
    *** *** *** *** *** *** ***
02-19 09:41:19.710: I/DEBUG(28): Build fingerprint: 
    'generic/sdk/generic/:2.1-update1/ECLAIR/35983:eng/test-keys'
02-19 09:41:19.710: I/DEBUG(28): pid: 224, tid: 234  
    &gt;&gt;&gt; com.roundwoodstudios.comicstripitpro &lt;&lt;&lt;
02-19 09:41:19.710: I/DEBUG(28): signal 11 (SIGSEGV), fault addr 00000028
02-19 09:41:19.720: I/DEBUG(28):  
    r0 00000000  r1 0012715c  r2 00000000  r3 0012715c
02-19 09:41:19.720: I/DEBUG(28):  
    r4 00137e18  r5 0012719c  r6 00000000  r7 00000000
02-19 09:41:19.720: I/DEBUG(28):  
    r8 00000001  r9 00000000  10 00000000  fp 00000000
02-19 09:41:19.720: I/DEBUG(28):  
    ip ff000000  sp 47285c58  lr 00000000  pc ac065288  
    cpsr 60000010
02-19 09:41:19.840: I/DEBUG(28):  #00  pc 00065288  /system/lib/libskia.so
02-19 09:41:19.840: I/DEBUG(28):  #01  pc 00065dcc  /system/lib/libskia.so
02-19 09:41:19.840: I/DEBUG(28):  #02  pc 00064148  /system/lib/libskia.so
02-19 09:41:19.840: I/DEBUG(28):  #03  pc 00041986  
    /system/lib/libandroid_runtime.so
02-19 09:41:19.850: I/DEBUG(28):  #04  pc 0000f1f4  /system/lib/libdvm.so
02-19 09:41:19.850: I/DEBUG(28):  #05  pc 00037f90  /system/lib/libdvm.so
02-19 09:41:19.850: I/DEBUG(28):  #06  pc 00031612  /system/lib/libdvm.so
02-19 09:41:19.860: I/DEBUG(28):  #07  pc 00013f58  /system/lib/libdvm.so
02-19 09:41:19.860: I/DEBUG(28):  #08  pc 00019888  /system/lib/libdvm.so
02-19 09:41:19.860: I/DEBUG(28):  #09  pc 00018d5c  /system/lib/libdvm.so
02-19 09:41:19.880: I/DEBUG(28):  #10  pc 0004d6d0  /system/lib/libdvm.so
02-19 09:41:19.880: I/DEBUG(28):  #11  pc 0004d702  /system/lib/libdvm.so
02-19 09:41:19.880: I/DEBUG(28):  #12  pc 00041c78  /system/lib/libdvm.so
02-19 09:41:19.890: I/DEBUG(28):  #13  pc 00010000  /system/lib/libc.so
02-19 09:41:19.890: I/DEBUG(28):  #14  pc 0000fad4  /system/lib/libc.so
02-19 09:41:19.890: I/DEBUG(28): code around pc:
02-19 09:41:19.890: I/DEBUG(28): ac065278 e1d4e2f4 e1d472f6 e5946004 e197200e 
02-19 09:41:19.890: I/DEBUG(28): ac065288 e5969028 e596a024 0a00002e e59db00c 
02-19 09:41:19.900: I/DEBUG(28): ac065298 e2848028 e1a0c008 e8bb000f e8ac000f 
02-19 09:41:19.900: I/DEBUG(28): code around lr:
02-19 09:41:19.900: I/DEBUG(28): stack:
02-19 09:41:19.900: I/DEBUG(28):     47285c18  4001d001  
    /dev/ashmem/mspace/dalvik-heap/zygote/0 (deleted)
02-19 09:41:19.900: I/DEBUG(28):     47285c1c  ad04d21d  /system/lib/libdvm.so
02-19 09:41:19.900: I/DEBUG(28):     47285c20  00000000  
02-19 09:41:19.910: I/DEBUG(28):     47285c24  00010002  [heap]
02-19 09:41:19.910: I/DEBUG(28):     47285c28  00010002  [heap]
02-19 09:41:19.910: I/DEBUG(28):     47285c2c  418ab254  
    /dev/ashmem/dalvik-LinearAlloc (deleted)
02-19 09:41:19.910: I/DEBUG(28):     47285c30  0012a0f8  [heap]
02-19 09:41:19.910: I/DEBUG(28):     47285c34  ad04d6d9  /system/lib/libdvm.so
02-19 09:41:19.910: I/DEBUG(28):     47285c38  ad07ff50  /system/lib/libdvm.so
02-19 09:41:19.910: I/DEBUG(28):     47285c3c  42ab4edd  
    /data/dalvik-cache/system@framework@framework.jar@classes.dex
02-19 09:41:19.910: I/DEBUG(28):     47285c40  47285c48  
02-19 09:41:19.910: I/DEBUG(28):     47285c44  00000001  
02-19 09:41:19.910: I/DEBUG(28):     47285c48  00000001  
02-19 09:41:19.910: I/DEBUG(28):     47285c4c  00000007  
02-19 09:41:19.910: I/DEBUG(28):     47285c50  df002777  
02-19 09:41:19.920: I/DEBUG(28):     47285c54  e3a070ad  
02-19 09:41:19.920: I/DEBUG(28): #00 47285c58  44ebe8a0  
    /dev/ashmem/mspace/dalvik-heap/2 (deleted)
02-19 09:41:19.920: I/DEBUG(28):     47285c5c  0012a0f8  [heap]
02-19 09:41:19.920: I/DEBUG(28):     47285c60  418ab254  
    /dev/ashmem/dalvik-LinearAlloc (deleted)
02-19 09:41:19.920: I/DEBUG(28):     47285c64  00127174  [heap]
02-19 09:41:19.920: I/DEBUG(28):     47285c68  47285c70  
02-19 09:41:19.920: I/DEBUG(28):     47285c6c  47285cd4  
02-19 09:41:19.930: I/DEBUG(28):     47285c70  000000f0  
02-19 09:41:19.930: I/DEBUG(28):     47285c74  00127128  [heap]
02-19 09:41:19.930: I/DEBUG(28):     47285c78  000000e4  
02-19 09:41:19.930: I/DEBUG(28):     47285c7c  0012a0f8  [heap]
02-19 09:41:19.930: I/DEBUG(28):     47285c80  00000001  
02-19 09:41:19.930: I/DEBUG(28):     47285c84  00000007  
02-19 09:41:19.930: I/DEBUG(28):     47285c88  00000001  
02-19 09:41:19.941: I/DEBUG(28):     47285c8c  ad040a89  /system/lib/libdvm.so
02-19 09:41:19.941: I/DEBUG(28):     47285c90  00000000  
02-19 09:41:19.941: I/DEBUG(28):     47285c94  0012a0f8  [heap]
02-19 09:41:19.941: I/DEBUG(28):     47285c98  ad07ecc0  /system/lib/libdvm.so
02-19 09:41:19.941: I/DEBUG(28):     47285c9c  ad03775b  /system/lib/libdvm.so
02-19 09:41:19.941: I/DEBUG(28):     47285ca0  ad037745  /system/lib/libdvm.so
02-19 09:41:19.941: I/DEBUG(28):     47285ca4  47285d2c  
02-19 09:41:19.941: I/DEBUG(28):     47285ca8  47285cd0  
02-19 09:41:19.941: I/DEBUG(28):     47285cac  00127128  [heap]
02-19 09:41:19.941: I/DEBUG(28):     47285cb0  00000000  
02-19 09:41:19.941: I/DEBUG(28):     47285cb4  00000001  
02-19 09:41:19.950: I/DEBUG(28):     47285cb8  00000000  
02-19 09:41:19.950: I/DEBUG(28):     47285cbc  00000000  
02-19 09:41:19.950: I/DEBUG(28):     47285cc0  00000000  
02-19 09:41:19.950: I/DEBUG(28):     47285cc4  ac065dd0  
    /system/lib/libskia.so
02-19 09:41:19.950: I/DEBUG(28): #01 47285cc8  00000000  
02-19 09:41:19.950: I/DEBUG(28):     47285ccc  00000000  
02-19 09:41:19.950: I/DEBUG(28):     47285cd0  00000000  
02-19 09:41:19.950: I/DEBUG(28):     47285cd4  afe0f2c0  /system/lib/libc.so
02-19 09:41:19.950: I/DEBUG(28):     47285cd8  47285d28  
02-19 09:41:19.950: I/DEBUG(28):     47285cdc  00000000  
02-19 09:41:19.950: I/DEBUG(28):     47285ce0  00000000  
02-19 09:41:19.950: I/DEBUG(28):     47285ce4  00000000  
02-19 09:41:19.950: I/DEBUG(28):     47285ce8  00127128  [heap]
02-19 09:41:19.960: I/DEBUG(28):     47285cec  afe0f3b0  /system/lib/libc.so
02-19 09:41:19.960: I/DEBUG(28):     47285cf0  00000000  
02-19 09:41:19.960: I/DEBUG(28):     47285cf4  afe0f2c0  /system/lib/libc.so
02-19 09:41:19.960: I/DEBUG(28):     47285cf8  00000003  
02-19 09:41:19.960: I/DEBUG(28):     47285cfc  afe3b9bc  
02-19 09:41:19.960: I/DEBUG(28):     47285d00  00137e18  [heap]
02-19 09:41:19.960: I/DEBUG(28):     47285d04  47285d2c  
02-19 09:41:19.960: I/DEBUG(28):     47285d08  00127128  [heap]
02-19 09:41:19.960: I/DEBUG(28):     47285d0c  00000003  
02-19 09:41:19.960: I/DEBUG(28):     47285d10  ffffffff  
02-19 09:41:19.960: I/DEBUG(28):     47285d14  47285d88  
02-19 09:41:19.960: I/DEBUG(28):     47285d18  42f0cd88  
02-19 09:41:19.970: I/DEBUG(28):     47285d1c  42f0cd74  
02-19 09:41:19.980: I/DEBUG(28):     47285d20  0012a0f8  [heap]
02-19 09:41:19.980: I/DEBUG(28):     47285d24  ac06414c  /system/lib/libskia.so
02-19 09:41:21.230: D/Zygote(30): Process 224 terminated by signal (11)
02-19 09:41:21.230: I/WindowManager(52): WIN DEATH: 
    Window{44d330a0 Just a sec! paused=false}
02-19 09:41:21.240: I/ActivityManager(52): Process 
    com.roundwoodstudios.comicstripitpro (pid 224) has died.
02-19 09:41:21.250: I/WindowManager(52): WIN DEATH: Window{44d72738
    com.roundwoodstudios.comicstripitpro/
        com.roundwoodstudios.comicstripit.SceneActivity paused=false}
02-19 09:41:21.320: I/UsageStats(52): Unexpected resume of com.android.launcher 
    while already resumed in com.roundwoodstudios.comicstripitpro
</code></pre>

<p>Yep, that's a seg-fault of the Dalvik VM triggered in the libskia library (Android's graphics lib), so I'm pretty screwed here - there's no catch and recover strategy for that! I've tried all sorts of things to try to work around it for Eclair, but so far no joy. </p>

<p>I got quite a few hits on StackOverflow for similar problems. Most seemed to be related to calling recycle, but I often hit the problem even before I recycle - I get blow-outs when creating Bitmaps (and yes, I'm still well within the VM budget, and I even tried allowing a 64Mb heap per app).</p>

<p>This looks like a monstrous bug in Android-2.1 to me. If I can't work around it I'll refund my user (he's a user of the paid version), but I doubt if that will lead to recovery of my previously 4.8 star rating.</p>

<p>Did I mention that I thought the rating mechanism was pretty harsh on developers? :(</p>

<h3>Update - a few hours later :)</h3>

<p>After some more debugging, I isolated the problem and created the simplest re-construction possible. The following code crashes reliably under API level 7, but runs to completion under API level 8 or above:</p>

<pre><code>package com.roundwoodstudios.bitmaptest;

import android.app.Activity;
import android.graphics.Canvas;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;

public class BitmapActivity extends Activity {
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        for (int i=0; i&lt;100; i++) {
            Log.i("Bitmap Test", "Iteration: " + i);
            Canvas _c = new Canvas();
            _c.drawColor(Color.WHITE);
        }
    }
}
</code></pre>

<p>When you look at it like that its fairly clear what's wrong: the canvas isn't really initialised properly yet - it doesn't know how large it is, for example. If I set a bitmap to it <em>first</em> it runs fine even under API level 7:</p>

<pre><code>package com.roundwoodstudios.bitmaptest;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;

public class BitmapActivity extends Activity {
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        for (int i=0; i&lt;100; i++) {
            Log.i("Bitmap Test", "Iteration: " + i);
            Canvas _c = new Canvas();
            Bitmap _b = Bitmap.createBitmap(350, 350, Bitmap.Config.ARGB_8888);
            _c.setBitmap(_b);
            _c.drawColor(Color.WHITE);
        }
    }
}
</code></pre>

<p>Phew, that's a relief :)</p>
]]></description>
          <category>android</category>
          <category>eclair</category>
          <category>bitmap</category>
          <category>crash</category>
          <category>sigsegv</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Sun, 19 Feb 2012 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Paths and Selections in Gimp]]></title>
        <link><![CDATA[http://steveliles.github.com/paths_and_selections_in_gimp.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/paths_and_selections_in_gimp.html</guid>
        <description><![CDATA[<p>As I mentioned in my previous post, I've been learning to use Gimp so I can produce icons for my apps. The most significant new finding for me has been the discovery of paths and how to use them in combination with selections.</p>

<p>The ability to use set operations to combine selections in different ways, and to remember selections as paths opens up a whole world of possibilities. Lets look at a really simple example:</p>

<p>Fire up the Gimp, and create a new image to work on. I'm going with a 512x512 canvas again. Choose the oval selection tool and draw an oval on your canvas, then hold down shift and draw another oval that overlaps the first a little. (I was already surprised that I could add to the selections like this actually!)</p>

<p><img src="https://lh6.googleusercontent.com/-V7Kv9JeUjCg/TzogTnl5N9I/AAAAAAAAI3A/gdMgMCdWnAY/s800/Screen%2520Shot%25202012-02-14%2520at%252008.49.07.png" alt="multiple concurrent selections with gimp" /></p>

<p>Now, in the "Layers, Channels, Paths, .." window, open the paths tab, and click the "Selection to Path" icon (red circle with black lines above and below). You'll see a new entry added in the palette for your current selection shape. Here's how mine looks at this point:</p>

<p><img src="https://lh3.googleusercontent.com/-DewiC7SQ5XY/TzohG7h9qHI/AAAAAAAAI3Y/QvwAoWgS4Sg/s800/Screen%2520Shot%25202012-02-14%2520at%252008.53.24.png" alt="gimp path dialog" /></p>

<p>There are immediately some neat things we can do:</p>

<ul>
<li>We can recreate this same selection at any time by selecting the path in the paths palette and clicking the "path to selection"" icon (the red square icon with dotted outline).</li>
<li>We can "Stroke" this path (draw around its outline), using the currently selected tool, brush and colour, by clicking the paint-brush icon on the paths panel.</li>
<li>We can add to or subtract from this selection using other selections, by drawing a new selection then holding down shift/ctrl/shift+ctrl and clicking the "path to selection" icon.</li>
<li>We can add hand-drawn shapes to our path by using the path tool to create them, then adding them to a selection as described above.</li>
</ul>

<p>One thing I found very useful, is that you can convert text to a path, which allows you to get creative with the stroke and fill used on that text. I'm going to clear my canvas and add some text:</p>

<ol>
<li>Select the text tool, click on the canvas and enter some text (I went with "Hello!")</li>
<li>Increase the font size so that the text just fits on the canvas (I'm using Trebuchet MS bold italic at 175px). You might have to grab the corners of the text selection and expand it so that you can see all of the text.</li>
<li>Move the text into the centre of the canvas.</li>
<li>On the tool window, in the section at the bottom containing the tool controls, look for a button  that says "Path from Text" - should be right at the bottom. Click it.</li>
<li>Open the paths dialog again (from the layers, channels, paths.. window) - you should see that you now have a path called "Hello!", which looks like an outlined version of your text.</li>
</ol>

<p>Now you can stroke and fill your text, convert it to a selection (allowing you to paint only inside or only outside), and generally do all kinds of neat things. For example:</p>

<ol>
<li>Switch to the "layers" dialog, and delete the floating text layer.</li>
<li>Switch back to the "Paths" dialog again, click the "path to selection" icon</li>
<li>Pick a nice colour to outline your text with (I've selected a deep blue)</li>
<li>Invert your selection (ctrl-i) - this is so that we only paint around the outside in the next step</li>
<li>From the "Paths" dialog, click the stroke icon</li>
<li>In the dialog that pops up, set the stroke width to be around 10. Because we are stroking the line at the edge of the selection, half of the stroke width falls inside the text outline and will not be painted because it isn't part of our current selection. Click OK to stroke the path.</li>
</ol>

<p><img src="https://lh5.googleusercontent.com/-Mu31NnkM59o/Tzonpy4bkqI/AAAAAAAAI3w/r8ab3bN_aVs/s800/hello-1.png" alt="" /></p>

<p>Now lets paint a gradient inside our text:</p>

<ol>
<li>From the "paths" dialog, click the "path to selection" icon</li>
<li>From the tool palette, select the gradient tool</li>
<li>Choose a foreground and background colour for the end-colours of your gradient (I'm going with red and yellow)</li>
<li>Click and hold the left button in the "H" of your text, then drag over to the "!" before letting go of the button. A gradient will be painted <em>inside</em> your text outline only.</li>
</ol>

<p><img src="https://lh4.googleusercontent.com/-q35MFgTHqRE/Tzoovka7aRI/AAAAAAAAI4I/r9J_Fi06MX0/s800/hello-2.png" alt="" /></p>
]]></description>
          <category>Gimp</category>
          <category>Icon</category>
          <category>Path</category>
          <category>Selection</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Tue, 14 Feb 2012 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Creating comic-book style icons with Gimp]]></title>
        <link><![CDATA[http://steveliles.github.com/creating_comic_book_style_icons_with_gimp.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/creating_comic_book_style_icons_with_gimp.html</guid>
        <description><![CDATA[<p>I've long had a love-hate relationship with Gimp. I <em>hate</em> the MDI interface - all those windows really grate on my nerves. I <em>love</em> that its a really great and full-featured graphics package, and free. </p>

<p>In the past I've fired it up to do all kinds of little jobs, but never really tried to use it to compose artwork of any complexity from scratch. That changed recently when I needed to create some nice icons for my Android app <a href="https://market.android.com/details?id=com.roundwoodstudios.comicstripitpro">Comic Strip It!</a>.</p>

<p>Finally, and almost by accident, I've learned how to use paths, masks, and layers, as well as a few of the filters, and managed to turn out some icons that I'm not too embarrassed by! Here's some examples:</p>

<p><img src="https://lh6.googleusercontent.com/-ZOZmYN_bszw/TzgptOjJ1bI/AAAAAAAAIzE/emf1ce6lnmc/s144/ic_pick.png" alt="pick from gallery icon" />
<img src="https://lh4.googleusercontent.com/-VNKQco0IpEQ/TzgpsWgymEI/AAAAAAAAIy0/Oit-b0pWdZw/s144/ic_next.png" alt="next arrow icon" />
<img src="https://lh5.googleusercontent.com/-ujoySEPeK0A/Tzgpl7iVAkI/AAAAAAAAIxU/37zF9BjWRx8/s144/ic_accept.png" alt="accept icon" />
<img src="https://lh5.googleusercontent.com/-Of1oDouIR9I/Tzgpt8pNT-I/AAAAAAAAIzI/eztu4X6JMi8/s144/ic_preview.png" alt="magnifier preview icon" />
<img src="https://lh3.googleusercontent.com/-J5MhVusK6fo/Tzgpmf9lF0I/AAAAAAAAIxY/wUCI4F6mJQ4/s144/ic_camera.png" alt="camera icon" />
<img src="https://lh5.googleusercontent.com/-y-53iL_XMes/TzgpvXzrHbI/AAAAAAAAIzc/TpgXHLEEqQ4/s144/ic_save.png" alt="piggy-bank save icon" />
<img src="https://lh6.googleusercontent.com/-ixZwd4Yj6iI/Tzgpvuf_MWI/AAAAAAAAIzk/6wt6dUYwJNw/s144/ic_share.png" alt="double-arrow share icon" />
<img src="https://lh4.googleusercontent.com/-F0tC5dE6g4k/TzgpoiXN8uI/AAAAAAAAIx0/nOQun526Okg/s144/ic_font_size.png" alt="text-size icon" />
<img src="https://lh3.googleusercontent.com/-1TdNH4i5rxY/TzgppsCAugI/AAAAAAAAIyQ/_A6cDO7vWZY/s144/ic_help.png" alt="help icon" />
<img src="https://lh4.googleusercontent.com/-0DTcVRMkfnc/TzgpweaWEzI/AAAAAAAAI0E/I_asX4AQbWE/s144/ic_speech.png" alt="speech bubble icon" />
<img src="https://lh5.googleusercontent.com/-fXTBnJIYg5U/TzgppohC8nI/AAAAAAAAIyI/UOYY65oDbL4/s144/ic_image_effects.png" alt="special effects / fx icon" />
<img src="https://lh4.googleusercontent.com/-zK2LU5sVZ1g/TzgprvV1rlI/AAAAAAAAIyk/EUfWgvTnmJc/s144/ic_new_strip.png" alt="new strip icon" /></p>

<p>Since the app is all about creating comic strips I wanted icons that really fit with that idea, so I spent some time looking at comics and comic graphics. </p>

<p>The half-tone effect - coloured dots printed in rows at different sizes and angles to create the illusion of different shades of colour - figures heavily in print comic-books, and has a such a recognisable stylistic effect that I settled on using that as much as possible. My attempts at re-creating it aren't "real" half-tones, but I think the effect works.</p>

<h2>A few working practices</h2>

<p>I drew all my icons at 512x512 pixels, then re-scaled for use. Android wants 4 different sizes to cater for four different screen densities (low - 32x32, medium - 48x48, high - 72x72, extra-high - 96x96). </p>

<p>Drawing at the much larger size of 512x512 just makes it much easier to work, covers minor errors once you scale down, <em>and</em> means that you usually end up with a decent quality scaled image.</p>

<p>I save all the original icons using Gimp's native XCF file format, which retains the layers and masks and so on - this means I can always go back later and make small changes if I need to (and I did, many times).</p>

<p>Because my laptop runs Ubuntu I saved my icons in a folder shared by Ubuntu One (cloud backup and replication), but this didn't always work out well - connectivity issues on a few evenings meant that I got conflicting versions between my laptop and my desktop, and it wasn't too easy to sort out. </p>

<p>In future I will use <a href="http://git-scm.com/">git</a>, as that puts control of when you update in your hands, and provides explicit versioning and access to old versions. I've upgraded to a paid <a href="http://www.github.com">github</a> account now that my app is live in the Android Market, and all my source-code lives there now.</p>

<p>So, to the icons...</p>

<h2>Creating a halftone background</h2>

<p>Almost all of my icons use a circular splash of half-tone colour as a background. It took me a good long time to figure out how to do this properly, but once you know how its done its actually very quick to re-create.</p>

<h4>Step 1: The background gradient</h4>

<p>First, create a new 512x512 file, and paint a linear gradient filling the entire image. To paint a gradient:</p>

<ol>
<li>select the "blend" tool, and make sure its send to "linear blend"</li>
<li>select foreground and background colours as the start and end colours for your gradient</li>
<li>hold down the left mouse-button in one corner of your image, move to the diagonally opposite corner and release the button to paint the gradient</li>
</ol>

<p>I picked a deep orange foreground colour, a paler orange-yellow background colour, and drew the gradient from bottom-left to top-right, resulting in the following image:</p>

<p><img src="https://lh6.googleusercontent.com/-RFRY_hGNiNs/Tzg2wBkpxyI/AAAAAAAAI1I/SiObSnce6wM/s800/halftone-background-step1.png" alt="step 1 - the background gradient" /></p>

<h4>Step 2: The half-tone mask</h4>

<p>To create the half-tone dot effect we're going to use one of Gimp's built in filters - "News-print". We want the dots to cluster heavily in the middle, then space further apart and get smaller the further they are from the centre of the image. Here's how we do that:</p>

<ol>
<li>Create a new layer, above the existing colour gradient. I like to do that directly in the "Layers" palette by right-clicking and choosing "New Layer", making sure to select "Transparency" as the layer fill type, and give it a name (I usually call this layer "bg_halftone").</li>
<li>Make sure the layer is above your colour gradient in the layer palette. If it isn't, click and drag and drop it above the background layer.</li>
<li>Select the "blend" tool again, and choose full black as the foreground colour, and full white as the background colour. This time we want to do a "radial blend".</li>
<li>Move the mouse to the centre of your image, hold down the left button, and drag towards the right-hand edge. When you release the mouse you'll get a disc with a black centre, graduating through grey on a white background, as shown below.</li>
</ol>

<p><img src="https://lh5.googleusercontent.com/-DVjmNBG53fw/Tzg56PUUREI/AAAAAAAAI1g/AousTkX7ozY/s800/halftone-background-step2.png" alt="black-to-white gradient disc" /></p>

<p>Now we're going to convert the smooth black-to-white gradient of our disc to a half-tone effect. We'll do that using the News-print filter:</p>

<ol>
<li>From Gimp's "Filters" menu, choose "Distorts -> Newsprint"</li>
<li>Increase the cell-size to something reasonably large - 25 to 30 works well if you're going to scale the final image down as I did. If you won't be scaling the image down, stick to something less than 10.</li>
<li>Visit the three colour channel tabs (red/green/blue) and set the same angle in all of them. I'm using 15 in this example.</li>
<li>Finally, set the anti-aliasing oversample to 15, and apply the filter.</li>
</ol>

<p><img src="https://lh3.googleusercontent.com/-jJ3x3SwAO10/Tzg7UDPi7RI/AAAAAAAAI14/gZLsPkiYrbo/s800/halftone-background-step3.png" alt="newsprint effect" /></p>

<h4>Step 3: Allowing the colour to shine through the mask</h4>

<p>Almost done! We just need to let the colour shine through from the background layer. I tried various ways of doing this. Masks worked well, and "Select->By Color" isn't bad (but does'nt capture anti-aliased areas perfectly). Eventually I got into the habit of a much simpler way:</p>

<ol>
<li>From Gimp's "Colors" menu choose "Color to Alpha"</li>
<li>Click the colour-box (from:) and select full black</li>
<li>Click OK and you'll see your background gradient shine through the dots</li>
</ol>

<p><em>Note: If you noticed that the dots don't quite match up between the following image and the others on this page, its because I added this image after I originally posted, and had to re-create it because I had already deleted the .xcf file I originally used while writing this post. Oops.</em></p>

<p><img src="https://lh6.googleusercontent.com/-W8yUnXLKhWY/TzjVIugjWwI/AAAAAAAAI2o/BZIgOGNtrD8/s800/halftone-background-step4a.png" alt="" /></p>

<p>For completeness, here's the "Select->By Color" method, which I don't use any more because it involves more steps and leaves the dots with slightly jagged edges:</p>

<ol>
<li>From Gimp's "Select" menu, choose "By Color", and then select the white background of the image.</li>
<li>Invert the selection (ctrl-i) so that the black dots are now selected. (We could have selected the black dots initially, but I find that if you do this you end up with black artefacts after the next step)</li>
<li>From the "Edit" menu choose "Clear", or hit the delete key, if you have one (my laptop doesn't). You should now see the gradient colour from your background layer shining through the holes you just made in the top-most layer.</li>
<li>De-select (ctrl-a) and merge the two layers (right-click in the layers palette and choose "merge visible..")</li>
</ol>

<p><img src="https://lh4.googleusercontent.com/-Kvxw_pqsjV0/Tzg-D_dIzXI/AAAAAAAAI2Q/egDujGmzQfg/s800/halftone-background-step4.png" alt="finished half-tone background" /></p>

<p>Notice that the edges of the dots in this version of the image are decidedly jagged, compared to the version created by using the colour-to-alpha technique. This is to do with the select-by-colour method not including anti-aliasing pixels that are closer to white than black in the selection.</p>

<h4>Step 4: Optional - de-focus for use as a background</h4>

<p>I used this technique to create the backgrounds for my icons, adding one more step: gaussian blur to de-focus the background and make the foreground icon stand out nice and sharp.</p>

<p>I used the same technique to pattern-fill the icon detail by using paths and selections. I'll save the details of that for another post.</p>
]]></description>
          <category>Gimp</category>
          <category>Icon</category>
          <category>Comic-Book</category>
          <category>Half-tone</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Sun, 12 Feb 2012 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Creating iOS style icons with ImageMagick]]></title>
        <link><![CDATA[http://steveliles.github.com/creating_ios_style_icons_with_imagemagick.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/creating_ios_style_icons_with_imagemagick.html</guid>
        <description><![CDATA[<p>Icons for iOS apps are generally provided by the app with square corners and no "sheen". The rounded corners and glossy sheen are added by iOS.</p>

<p>If you want to achieve the iOS icon look on icons used elsewhere (Android, Web, etc), you need to round the corners and apply the sheen yourself.</p>

<p>What follows is my quick attempt to give the iOS treatment to this 512x512 icon:</p>

<p><img src="https://lh6.googleusercontent.com/-UaUMm3U99L8/TyLi2QD6E-I/AAAAAAAAIq4/gl-21ZMoBg4/s800/in.png" alt="Original Icon" /></p>

<h3>Transparent Rounded Corners</h3>

<p>OK, transparent rounded corners are actually the easy part. There are several ways to get ImageMagick to do this. The easiest (read: shortest) command i've found looks like this:</p>

<pre><code>convert -size 512x512 xc:none -fill white -draw \
    'roundRectangle 0,0 512,512 50,50' in.png \
    -compose SrcIn -composite rounded.png
</code></pre>

<p>So now we have this:</p>

<p><img src="https://lh3.googleusercontent.com/-ndvucr5orZ4/TyLmOX_XYqI/AAAAAAAAIrc/gMdrV_Hvil8/s800/test.png" alt="Rounded Corners" /></p>

<h3>Overlay some sheen</h3>

<p>The sheen is trickier. I imagine that real ImageMagick pro's could generate the sheen mask with some deft command-line, but I'm nowhere near that proficient.</p>

<p>Instead I created the following image in Gimp - exactly how is a topic for another post :). The black background is coming from the div containing the image - where you see black is actually transparent in my png, and the grey highlight at the top is semi-transparent:</p>

<div style="background-color:black; width:512px;"><img src="https://lh5.googleusercontent.com/-gssBzUQ5a0c/TyLi4f6F6fI/AAAAAAAAIrE/Lc9HhdfRQN8/s800/gloss-over.png"></div>

<p>To composite the rounded-corner image with the glossy overlay (gloss-over.png), I use this ImageMagick command:</p>

<pre><code>convert -draw "image Screen 0,0 0,0 'gloss-over.png'" \
    rounded.png final.png
</code></pre>

<p><img src="https://lh4.googleusercontent.com/-YaXSMS3j_Ws/TyLmvOKZLMI/AAAAAAAAIr0/h_nP4EQ8k94/s800/final.png" alt="Final iOS style image" /></p>
]]></description>
          <category>ImageMagick</category>
          <category>iOS</category>
          <category>Icon</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Fri, 27 Jan 2012 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Invoking Processes from Java]]></title>
        <link><![CDATA[http://steveliles.github.com/invoking_processes_from_java.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/invoking_processes_from_java.html</guid>
        <description><![CDATA[<p>Invoking an external process from Java appears easy enough but there are sooo many gotchas to watch out for. Typical problems that arise include:</p>

<ol>
<li><em>Hanging Processes</em> - The invoked process "hangs" and never completes (because it is waiting for input that never comes, or for the output buffer(s) to be drained).</li>
<li><em>Failure to execute</em> - Commands that work fine from the cmdline refuse to run when invoked from Java (because the parameters are passed incorrectly).</li>
<li><em>Mysterious issues in production</em> - Peculiar situations where processes cease to work after running happily for some time (the file-handle quota is exhausted because the IO streams are not being correctly closed).</li>
</ol>

<p>The first two are irritating, but at least they present themselves immediately and are typically fixed before the code leaves the developer. </p>

<p>The last problem is much more insidious and often only rears its head after some time in production (sometimes this is because it takes time and a significant number of executions before it manifests, other times it is because of differences between the development and production environments).</p>

<p>Lets have a look at the general solution to each of these problems. Later I'll list some code that I've been using to invoke processes safely.</p>

<h3>Hanging Processes</h3>

<p><em>Symptoms:</em> When invoked, the process starts but does not complete. Sometimes this may appear to be caused by the input that is being fed to the process (e.g. with input A it works but with input B it does not), which adds to the confusion over why the problem occurs.</p>

<p><em>Cause:</em> The most common reason for this problem is failing to pump input into the program, and drain output buffers from the program, using separate threads.</p>

<p>If a program is consuming sufficient input via standard-input (stdin), or producing sufficient output via stdout or stderr, the limited buffers available to it will fill up. Until those buffers are drained the process will block on IO to those buffers, so the process is effectively hung.</p>

<p><em>Solution:</em> When you invoke any process from Java, you must use separate threads to pump data to/from stdin, stdout, and stderr:</p>

<pre><code>// invoke the process, keeping a handle to it for later...
final Process _p = Runtime.getRuntime().exec("some-command-or-other");

// Handle stdout...
new Thread() {
    public void run() {
    try {
            Streams.copy(_p.getInputStream(), System.out);
        } catch (Exception anExc) {
            anExc.printStackTrace();
        }
    }
}.start();

// Handle stderr...
new Thread() {
    public void run() {
    try {
            Streams.copy(_p.getInputStream(), System.out);
        } catch (Exception anExc) {
            anExc.printStackTrace();
        }
    }
}.start();
</code></pre>

<p>Correctly pumping data into and out of the std io buffers will keep your processes from hanging.</p>

<h3>Failure to communicate</h3>

<p><em>Symptoms:</em> You have a command-line that works perfectly when executed at the shell prompt, but invoking it from Java results in strange errors and, perhaps, complaints about invalid parameters.</p>

<p><em>Cause:</em> Typically this occurs when you try to pass parameters which include spaces - for example file-names - which you escape or quote at the shell prompt.</p>

<p><a href="https://lh4.googleusercontent.com/-khRgW4ViBts/TyM8-x7BVZI/AAAAAAAAIsQ/2IiEhj5GdkA/s1600/27.jpg"><img alt="Java invoking ImageMagick - a lego comic strip created with Comic Strip It! for Android" src="https://lh4.googleusercontent.com/-khRgW4ViBts/TyM8-x7BVZI/AAAAAAAAIsQ/2IiEhj5GdkA/s600/27.jpg"></a></p>

<p><em>Example:</em> Running ImageMagick "convert" to add transparent rounded corners to an icon:</p>

<pre><code>convert -size 72x72 xc:none -fill white -draw \
  'roundRectangle 0,0 72,72 15,15' in.png \
  -compose SrcIn -composite out.png
</code></pre>

<p>This command-line works fine at a bash prompt, but if you try to invoke it naively from Java it will likely fail in a variety of interesting ways depending on your platform:</p>

<pre><code>public static void main(String... anArgs) {
    // invoke the process, keeping a handle to it for later...
    final Process _p = Runtime.getRuntime().exec(
        "/usr/bin/convert -size 72x72 xc:none -fill white -draw" +
        " 'roundRectangle 0,0 72,72 15,15' /home/steve/Desktop/in.png" +
        " -compose SrcIn -composite /home/steve/Desktop/out.png"
    );

    // Handle stdout...
    new Thread() {
        public void run() {
            try {
                Streams.copy(_p.getInputStream(), System.out);
            } catch (Exception anExc) {
                anExc.printStackTrace();
            }
        }
    }.start();

    // Handle sderr...
    new Thread() {
        public void run() {
            try {
                Streams.copy(_p.getErrorStream(), System.out);
            } catch (Exception anExc) {
                anExc.printStackTrace();
            }
        }
    }.start();

    // wait for the process to complete
    _p.waitFor();
}
</code></pre>

<p>Whilst the command-line worked fine at the bash prompt, running the same command from Java results in an error message!:</p>

<pre><code>convert: non-conforming drawing primitive definition 
    `roundRectangle' @ error/draw.c/DrawImage/3143.
convert: unable to open image `0,0':  @ error/blob.c/OpenBlob/2489.
convert: unable to open image `72,72':  @ error/blob.c/OpenBlob/2489.
convert: unable to open image `15,15'':  @ error/blob.c/OpenBlob/2489.
convert: non-conforming drawing primitive definition 
    `roundRectangle' @ error/draw.c/DrawImage/3143.
</code></pre>

<p>What's going on!? Basically the command we gave to Runtime.exec has been sliced up at spaces, ignoring the single quotes, and so ImageMagick has seen a very different command-line to the one we presented via the shell.</p>

<p><em>Solution:</em> The solution this time is very easy: Use the overloaded Runtime.exec(..) methods that accept the command <em>and</em> the parameters as an array of String's. Re-writing our previous example:</p>

<pre><code>public static void main(String... anArgs) 
throws Exception {
    // invoke the process, keeping a handle to it for later...
    // note that we pass the command and its params as String's in
    // the same String[]
    final Process _p = Runtime.getRuntime().exec(
        new String[]{
            "/usr/bin/convert",
            "-size", "72x72", "xc:none", "-fill", "white", "-draw",
            "roundRectangle 0,0 72,72 15,15", 
            "/home/steve/Desktop/in.png", "-compose", "SrcIn",
            "-composite", "/home/steve/Desktop/out.png"
        }
    );

    // Handle stdout...
    new Thread() {
        public void run() {
            try {
                Streams.copy(_p.getInputStream(), System.out);
            } catch (Exception anExc) {
                anExc.printStackTrace();
            }
        }
    }.start();

    // Handle sderr...
    new Thread() {
        public void run() {
            try {
                Streams.copy(_p.getErrorStream(), System.out);
            } catch (Exception anExc) {
                anExc.printStackTrace();
            }
        }
    }.start();

    // wait for the process to complete
    _p.waitFor();
}
</code></pre>

<p>Passing your cmdline parameters in a String array instead of as one long String should prevent your parameters from being chewed up and mis-interpreted.</p>

<h3>Mysterious issues in production</h3>

<p><em>Symptoms:</em> For a good while things appear to be working fine. Processes are invoked, do their work, and shut-down. After a while a problem occurs - the processes are no longer being invoked, or hang.</p>

<p><em>Cause:</em> The cause of this is usually exhaustion of the available file-handles, which in turn is caused by failing to correctly close all of the IO streams opened to handle the process IO.</p>

<p><em>Solution:</em> Careful closure of all standard IO streams opened by the process <em>and</em> streams opened by you to consume the data from the standard streams opened by the process. Note: That's SIX streams in total, not just the three that you open to deal with stdin, stdout and stderr! I also recommend calling <code>destroy</code> on the Process object.</p>

<p>I <em>may</em> be being over-cautious in closing the process's own std streams, but I have seen many cases where closing these streams solved problems of leaked file-handles. (btw., A handy tool if you're running a *nix is <code>lsof</code>, which lists open file handles).</p>

<p>Here's how I recommend cleaning up after your process completes (this assumes that you did provide input via stdin):</p>

<pre><code>public static void main(String... anArgs) {
    Process _process = null;
    InputStream _in = null;
    OutputStream _out = null;
    OutputStream _err = null;
    try {
        _process = Runtime.getRuntime().exec( ... );
        // ... don't forget to initialise in, out, and error,
        // .... and consume the streams in separate threads!
        _process.waitFor();
    } finally {
        if( _process != null ) {
            close(_process.getErrorStream());
            close(_process.getOutputStream());
            close(_process.getInputStream());
            _process.destroy();
        }
        close(_in);
        close(_out);
        close(_err);
    }
}

private static void close(InputStream anInput) {
    try {
        if (anInput != null) {
            anInput.close();
        }
    } catch (IOException anExc) {
        anExc.printStackTrace();
    }
}

private static void close(OutputStream anOutput) {
    try {
        if (anOutput != null) {
            anOutput.close();
        }
    } catch (IOException anExc) {
        anExc.printStackTrace();
    }
}
</code></pre>

<p>These days I usually use some utility classes which I've written to wrap all this stuff up and make life a little easier. You can find them in my <a href="https://github.com/steveliles/sjl.io">sjl.io</a> project at github. There's an example of usage in the <code>test</code> source tree - <code>ExternalProcessTest</code> - which invokes ImageMagick.</p>
]]></description>
          <category>Java</category>
          <category>Process</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Thu, 26 Jan 2012 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Another mini-figure, another comic strip...]]></title>
        <link><![CDATA[http://steveliles.github.com/another_mini_figure_another_comic_strip.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/another_mini_figure_another_comic_strip.html</guid>
        <description><![CDATA[<p>Here's a quick taster of the new speech-balloon styles and colours available in Comic Strip It! v1.4.2 (and featuring my latest lego minifigure - the Mad Scientist).</p>

<p><a target="top" href="https://lh5.googleusercontent.com/-ZPNFZHx_4vA/TyCF5AJcchI/AAAAAAAAIpk/qpDlLOxZLBg/s1600/20.jpg"><img alt="Joe Hazmat vs Mad Scientist, a lego comic strip made with Comic Strip It!" src="https://lh5.googleusercontent.com/-ZPNFZHx_4vA/TyCF5AJcchI/AAAAAAAAIpk/qpDlLOxZLBg/s600/20.jpg"></a></p>

<table>
 <tr>
  <td>Sorry iOS folks, <a href="https://market.android.com/details?id=com.roundwoodstudios.comicstripitpro">Comic Strip It!</a> is only available for Android at this time. Android folks can jump to the Market with this QR code.</td>
  <td><a href="https://market.android.com/details?id=com.roundwoodstudios.comicstripitpro"><img src="images/qr_code.png"></a></td>
 </tr>
</table>
]]></description>
          <category>Comic Strip It</category>
          <category>Android</category>
          <category>App</category>
          <category>Comic Strip</category>
          <category>Lego</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Wed, 25 Jan 2012 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Maven, Android and Eclipse - joining the team]]></title>
        <link><![CDATA[http://steveliles.github.com/maven_android_and_eclipse_joining_the_team.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/maven_android_and_eclipse_joining_the_team.html</guid>
        <description><![CDATA[<p>I blogged recently about <a href="http://steveliles.github.com/converting_eclipse_adt_android_projects_to_build_with_maven.html">building Android projects with Maven</a>, and <a href="http://steveliles.github.com/setting_up_maven_android_and_svn_for_team_development_of_multiple_applications.html">how we've set things up for team development</a> using Maven, Android and Eclipse. This follow up post describes how someone joining the team would go about setting up and getting to work...</p>

<p>To join in the fun you need a straight-forward installation of the following pre-requisite tools:</p>

<ul>
<li>Eclipse (I usually go for Eclipse classic)</li>
<li>Subversion</li>
<li>Maven 3.0.3</li>
<li>Android SDK</li>
</ul>

<p>You will then need the following Eclipse plugins:</p>

<ul>
<li><a href="http://developer.android.com/sdk/eclipse-adt.html">Android Development Tools (ADT)</a> - update site: https://dl-ssl.google.com/android/eclipse/</li>
<li><a href="http://eclipse.org/m2e/">m2eclipse</a> - update site: http://download.eclipse.org/technology/m2e/releases</li>
<li><a href="http://rgladwell.github.com/m2e-android/">m2e-android</a> - Whilst you can install this like a normal plugin (thx Ricardo for the correction), I recommend that you <em>don't</em> use an update site to install this - instead, follow the instructions at the bottom of this post (after the comic), or at the <a href="http://rgladwell.github.com/m2e-android/">m2e-android site</a>.</li>
</ul>

<p>Since you are setting up to join an existing team, most of the maven configuration has presumably already been done for you. To get working on a project (assuming it is set up <a href="http://steveliles.github.com/setting_up_maven_android_and_svn_for_team_development_of_multiple_applications.html">as I described</a>) you need to check out two projects:</p>

<ol>
<li>The "parent" project containing the common configuration for all Android-Maven projects</li>
<li>The project you actually need to work on</li>
<li>(OK, yes, also any apklib library projects if you need to debug or work on those too)</li>
</ol>

<p>I highly recommend checking out so that all of these projects are siblings in a common projects directory.</p>

<p>The <em>biggest</em> single difference from ADT's usual working style is that you can't (currently) work with the apklib projects as project dependencies <a href="http://steveliles.github.com/the_dreaded_unexpected_top_level_exception.html">because of this issue</a>. Instead, if you make any changes to an apklib project, you'll need to <code>mvn install</code> or <code>mvn deploy</code> it before you can see the change in your dependent apk projects.</p>

<p>I found that I had to "mvn install" each of the apklib projects locally before the dependent projects would build, as the remotely deployed projects for some reason did not include the pom resource - I haven't yet had time to investigate why.</p>

<p><a target="top" href="https://lh4.googleusercontent.com/-WtXO6OjDnEA/Tx1KHLcuupI/AAAAAAAAIoA/HyxxXrw5i10/s1600/75.jpg"><img alt="Converting Eclipse ADT projects to build with Maven, a lego comic strip made with Comic Strip It!" src="https://lh4.googleusercontent.com/-WtXO6OjDnEA/Tx1KHLcuupI/AAAAAAAAIoA/HyxxXrw5i10/s600/75.jpg"></a></p>

<h3>Installing M2E-Android</h3>

<p><em>Don't install this like a normal Eclipse feature!</em> To install M2E-Android, open an Android-Maven project and open the pom.xml. You should see that the <packaging> element is being highlighted as an error, because without M2E-Android, M2Eclipse does not understand the <code>apk</code> or <code>apklib</code> packaging types.</p>

<p>In the header of the pom.xml editor you should see a red error message: <code>plugin execution not covered by lifecycle configuration...</code>.</p>

<p><img src="https://lh5.googleusercontent.com/-Aki7I_BiCLw/Tx6hX3ZXmkI/AAAAAAAAIoU/KNQvbH5sNRI/s600/plugin-execution-crop.png" alt="error when pom packaging set to apk or apklib" /></p>

<p>Click the error and some details open up, including two quick fixes. Click the first quick fix ("discover new m2e connectors"). The following dialog pops up and after a short search, shows the m2e-android connector:</p>

<p><img src="https://lh4.googleusercontent.com/-YeihPZ0PxWQ/TwRWknaVQeI/AAAAAAAAIas/0NnoMugrFa4/s800/install-m2e-connectors.png" alt="discover connectors dialog" /></p>

<p>Install the connector and the warnings <em>should</em> go away. Actually on one of my two machines they did not - I don't know why, but I had to take the 2nd quick-fix option of turning it off in Eclipse. For me that's just about ok, as I want the maven build to be the master anyway.</p>
]]></description>
          <category>Maven</category>
          <category>Android</category>
          <category>Eclipse</category>
          <category>m2e-Android</category>
          <category>m2eclipse</category>
          <category>ADT</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Mon, 23 Jan 2012 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Creating colourised icon theme-sets with Image-Magick]]></title>
        <link><![CDATA[http://steveliles.github.com/creating_colourised_icon_theme_sets_with_image_magick.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/creating_colourised_icon_theme_sets_with_image_magick.html</guid>
        <description><![CDATA[<p>While automating production of customised applications I needed to automatically create a set of icons that match the colour scheme selected by the customer. This article describes some of my experiments (details follow the strip...).</p>

<p><a target="top" href="https://lh6.googleusercontent.com/--oSeeAaXsA4/TxtID4kzrMI/AAAAAAAAImI/24-smIOigfU/s1600/48.jpg"><img alt="ImageMagick comic strip made with @ComicStripIt" src="https://lh6.googleusercontent.com/--oSeeAaXsA4/TxtID4kzrMI/AAAAAAAAImI/24-smIOigfU/s600/48.jpg"></a></p>

<p>My aim was to find a way to take a target colour and re-create the entire icon set matched as closely as possible to that input colour, using a single command-line.</p>

<p>Lets start with a quick look at a sample icon - this was created by our UX designer and used in building the proto-typical instance of the application. It is part of a set of around 30:</p>

<p><img src="https://lh4.googleusercontent.com/-e4m6fYN49O8/Txb9kVwIcjI/AAAAAAAAIg0/QqAZfCYW31I/s800/informations_contactus_icon.png" alt="Original icon" /></p>

<p>Given that I want to be able to apply a colour selected by a customer, I need to start from a neutral state, so my first step is to <em>de-colourise</em> the original icon, producing this grey-scale version:</p>

<p><img src="https://lh6.googleusercontent.com/--8FToJl9oYs/Txb5ePoLJ6I/AAAAAAAAIgc/nCX1EfMY96Y/s800/informations_contactus_icon.png" alt="Example icon to be coloured" /></p>

<p>Note that the icons all have transparency, but otherwise are largely made from shades of a single colour (a gradient) with white highlights.</p>

<p>I started by looking at the simple built-in image-magick commands. Given that I'm converting a large batch of icons I'm using <code>mogrify</code> instead of <code>convert</code>, which also requires that the command-line is re-ordered slightly, for example:</p>

<pre><code>convert in.png -brightness-contrast 20x20 out.png
</code></pre>

<p>becomes:</p>

<pre><code>mogrify -brightness-contrast 20x20 *
</code></pre>

<p>My first attempts used the Image-Magick commands <code>tint</code>, <code>colorize</code>, and <code>+level-colors</code> individually, as I was hoping for a very simple solution to present itself. Let's look at what each of those commands produces if we try to create icons with the following base colour:</p>

<div style="background-color:#0000cc; width:400px; height:60px; margin:auto; padding-left:40px;"><span style="color:white; font-family:'ubuntu mono'; font-size:20px; line-height:60px;">The background here is our base colour</span></div>

<pre><code>mogrify -fill "#0000cc" -tint 100 *
</code></pre>

<p><img src="https://lh6.googleusercontent.com/-cYoe5UrvgsY/TxgphOBN5iI/AAAAAAAAIhM/LVinN-HnqFs/s800/informations_contactus_icon.png" alt="imagemagick tint" /></p>

<pre><code>mogrify -colorize 100,0,0 *
</code></pre>

<p><img src="https://lh6.googleusercontent.com/-52WdHbWDsLc/TxgrS6jOpLI/AAAAAAAAIho/VhS1NSr2RNM/s800/informations_contactus_icon.png" alt="imagemagick colorize" /></p>

<pre><code>mogrify +level-colors "#000066","#0000cc" *
</code></pre>

<p><img src="https://lh6.googleusercontent.com/-djRiYF9xQ_s/TxgslWJEmII/AAAAAAAAIiA/-JRBtifNU_U/s800/informations_contactus_icon.png" alt="imagemagick +level-colors" /></p>

<p>As you can see from those examples, <code>tint</code> does the best job of retaining the fidelity of the icon, but doesn't really get close to the target colour. </p>

<p><code>Colorize</code> has also kept most of the fidelity, but the white foreground has tended towards the target blue colour along with the grey background parts, though neither has really got very close to our intended colour.</p>

<p><code>+level-colors</code> has got us closer to our target colour, but we've almost completely lost the white and the fidelity of the icon is, as a result, pretty much destroyed.</p>

<h2>Reduce and re-compose</h2>

<p>OK, so we can't get there with a simple one-liner. What about if we strip out different aspects of the image, perform different operations on each composite part, and then re-combine them later?</p>

<p>This is ultimately what I ended up doing:</p>

<ol>
<li>Extract the white part only</li>
<li>Brighten the grey part (helps the later stages to get closer to the target colour)</li>
<li>Adjust the grey (background) part towards our target colour</li>
<li>Composite the white foreground back over the re-coloured background</li>
</ol>

<p>Here's the commands to achieve that (note: I switched to using <code>convert</code> instead of <code>mogrify</code> because it was easier to test incremental changes this way):</p>

<pre><code># extract the white parts
convert -fuzz 60% -transparent black in.png 2.png

# lighten the original image
convert in.png -brightness-contrast 20x0 3.png

# level colours ...
convert +level-colors "#000066","#0000cc" 3.png

# composite together ...
convert 3.png 2.png in.png -composite out.png
</code></pre>

<p>It shouldn't be too difficult to follow that. </p>

<p>The first command extracts the white-ish parts of the image (foreground) by making shades of grey - from black through 60% grey - transparent. The fuzz factor is what determines the cut-off point. We produce this white-foreground as a separate image (2.png) because we still need the original for later steps.</p>

<p>Next we create a 3rd image (background) as a lightened version of the original (3.png) then colourise it using the <code>+level-colors</code> command we used earlier.</p>

<p>Finally we composite together the background image as the base, the foreground image on top, and use the original image as a mask so that we don't lose the transparency. The final result looks like this:</p>

<p><img src="https://lh5.googleusercontent.com/-V6IAdSmaJDY/TxhCqKLAarI/AAAAAAAAIig/syTquI4Dtr8/s800/informations_contactus_icon.png" alt="final" /></p>

<p>This is the best I've managed so far with my rudimentary knowledge of ImageMagick. </p>

<p>Since I'm invoking this conversion from a Java process I think I'll try something a little more low-level in Java next. I want the fidelity of the "tint" operation, with the precise colour targeting of the composite approach, I just don't know how to get there with ImageMagick.</p>
]]></description>
          <category>colour</category>
          <category>icon</category>
          <category>Image Magick</category>
          <category>automation</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Wed, 18 Jan 2012 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Capture screenshots from the Android Emulator or Mobile Device]]></title>
        <link><![CDATA[http://steveliles.github.com/capture_screenshots_from_the_android_emulator_or_mobile_device.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/capture_screenshots_from_the_android_emulator_or_mobile_device.html</guid>
        <description><![CDATA[<p>The first few times I needed screenshots of an Android app for the Android Market description I <code>alt-printscreen</code>'d the emulator then sliced the app screenshot out of the resulting image. This is a pain and - as it turns out - completely unnecessary. </p>

<p>For capturing screenshots from physical devices there are (paid) apps in the store, but again, this is completely unnecessary if you are a developer and have set up the Android Development Tools.</p>

<p>Why? Because a screenshot tool comes packaged as part of the android sdk!</p>

<p>From Eclipse you can grab a screenshot by opening DDMS (<code>Window -&gt; Open Perspective -&gt; DDMS</code>), then in the <code>Device</code> pane, select the device you want to take a screenshot from (which can be the emulator or a "real" mobile device), then click the camera icon (top right in the following screenshot):</p>

<p><img src="https://lh6.googleusercontent.com/-7d2j8LBcJ0I/Tw77Op8tmJI/AAAAAAAAIdk/D-ICPn9eVQw/s800/devices.png" alt="screenshot showing the take-screenshot icon in DDMS" /></p>

<p>From the command-line I'm afraid you're pretty much <a href="http://code.google.com/p/android/issues/detail?id=13613">out of luck right now</a> unless you feel like a bit of hacking to create your own cmdline screenshot grabber by connecting to the same service that DDMS connects to.</p>

<p><a href="https://lh6.googleusercontent.com/-xNoeEFqfrDw/TxtJTtrsa8I/AAAAAAAAImQ/6gNcgm-ttwY/s1600/49.jpg"><img alt="Android Emulator Screenshots, a lego comic strip made with Comic Strip It!" src="https://lh6.googleusercontent.com/-xNoeEFqfrDw/TxtJTtrsa8I/AAAAAAAAImQ/6gNcgm-ttwY/s600/49.jpg"></a></p>
]]></description>
          <category>android</category>
          <category>emulator</category>
          <category>eclipse</category>
          <category>screenshot</category>
          <category>ddms</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Thu, 12 Jan 2012 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[The dreaded UNEXPECTED TOP-LEVEL EXCEPTION]]></title>
        <link><![CDATA[http://steveliles.github.com/the_dreaded_unexpected_top_level_exception.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/the_dreaded_unexpected_top_level_exception.html</guid>
        <description><![CDATA[<p><a target="top" href="https://lh6.googleusercontent.com/-9Mgj4PvbD_8/TxtFMEPOvRI/AAAAAAAAImA/1W3xJJjaJkM/s1600/44.jpg"><img alt="Library projects with Eclipse Android and Maven, a lego comic strip made with Comic Strip It!" src="https://lh6.googleusercontent.com/-9Mgj4PvbD_8/TxtFMEPOvRI/AAAAAAAAImA/1W3xJJjaJkM/s600/44.jpg"></a></p>

<p>I'm working on extracting library projects to factor out common code shared between multiple projects. With everything compiling successfully I attempted to run my apk project in an emulator, and got hit with the following:</p>

<pre><code>UNEXPECTED TOP-LEVEL EXCEPTION:
java.lang.IllegalArgumentException: 
  already added: 
    Lcom/android/vending/licensing/Manifest$permission;
</code></pre>

<p>Now it seems there's been a lot of problems with this recently due to changes in ADT, but the added complexity of Maven in my setup throws a few more spanners into the machinery. Robert Schmid describes a project hierarchy very similar to mine <a href="http://robert-schmid.blogspot.com/2011/12/how-i-got-eclipse-to-play-nice-with.html">here</a>, and actually gave me the final clue I needed to unravel the mess.</p>

<p>The difference between my situation and Robert's is that I'm using Maven for release builds and continuous integration - and so far its proving to be ... tricky ... to get the combination of Eclipse, Maven and ADT to play well together.</p>

<p>I got the dreaded UNEXPECTED TOP-LEVEL EXCEPTION because somewhere in the build cycle the Maven-Eclipse plugin is injecting its apklib dependencies into my eclipse build <em>as well as</em> the referenced projects in Eclipse. Having finally worked out what was causing my problem it was pretty easy to resolve:</p>

<ul>
<li>right-click the project, select properties</li>
<li>go to the Maven pane</li>
<li>uncheck "Resolve dependencies from workspace projects"</li>
<li>repeat for all of the apklib projects referenced by your apk project</li>
</ul>

<p>The down-side of this is that if I make changes in my eclipse apklib projects I have to build the jars with Maven before the changes are available to the dependent apk projects. I actually slightly prefer working this way anyway - I find that a little bit of isolation helps.</p>

<p>I should probably point out that I am using Maven-3.0.3, the m2eclipse and m2e-android Eclipse plugins, and the very latest SDK at time of writing (r16). YMMV.</p>
]]></description>
          <category>android</category>
          <category>eclipse</category>
          <category>ADT</category>
          <category>maven</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Wed, 11 Jan 2012 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Setting up Maven, Android and SVN for team development of multiple applications]]></title>
        <link><![CDATA[http://steveliles.github.com/setting_up_maven_android_and_svn_for_team_development_of_multiple_applications.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/setting_up_maven_android_and_svn_for_team_development_of_multiple_applications.html</guid>
        <description><![CDATA[<p>If you don't yet have your Eclipse - ADT - Maven tool-chain set up you might be interested in the <a href="converting_eclipse_adt_android_projects_to_build_with_maven.html">previous post</a>. If you are joining a team that <em>has already set up as I describe here</em> you probably want <a href="http://steveliles.github.com/maven_android_and_eclipse_joining_the_team.html">this post instead</a>.</p>

<p>Google's ADT is great if you're working alone, but falls short when a team needs to work on the same Android project. It gets worse when you have multiple projects - especially if some are library projects.</p>

<p>It gets worse still if the development team is distributed (as we are) and/or running different development platforms - Windows, Linux, Mac OSX - (as we do). A description of how I've set things up follows this brief interlude:</p>

<p><a target="top" href="https://lh6.googleusercontent.com/-3U09-bd8s5E/TxtBOFAOssI/AAAAAAAAIlw/F1kSpCLv_DI/s1600/39.jpg"><img alt="Android Maven Eclipse Subversion, a lego comic strip made with Comic Strip It!" src="https://lh6.googleusercontent.com/-3U09-bd8s5E/TxtBOFAOssI/AAAAAAAAIlw/F1kSpCLv_DI/s600/39.jpg"></a></p>

<p>The important things I wanted to enable in our team environment are:</p>

<ol>
<li>That the whole team can "get" the latest code quickly and easily</li>
<li>That the whole team can contribute updates to the codebase quickly and easily</li>
<li>That any new team member coming on-board can build <em>immediately</em> from check-out (given a short list of pre-requisites)</li>
<li>That any team member can easily, consistently and <em>correctly</em> build a signed apk for release to the market</li>
<li>New projects can be created quickly and easily with minimum of re-work <em>and</em> copy-paste in configuration</li>
<li>Componentisation (e.g. jars and apklibs) is a Good Thing, and should be encouraged by making it as straight-forward as possible</li>
<li>Developers have their choice of OS</li>
</ol>

<p>Here's how I've set things up to support these goals...</p>

<h3>Pre-requisites</h3>

<p>I am assuming that:</p>

<ul>
<li>You use some form of source-code control (Subversion/GIT/other...). Of course you do :)</li>
<li>All developers will install Eclipse and ADT for themselves as a pre-requisite.</li>
<li>If, as a team, you use Maven and/or Continuous integration, all developers will also install m2eclipse and m2e-android eclipse plugins and Maven 3 (see <a href="converting_eclipse_adt_android_projects_to_build_with_maven.html">previous article</a>).</li>
<li>You have some common practices in your team like, for example, checking out all projects as siblings in a single workspace directory (otherwise you'll have problems with sharing relative paths to referenced projects between developers).</li>
</ul>

<h3>Our Setup</h3>

<p>I've set up projects in the workspace such that all of the following are siblings in a single workspace directory:</p>

<ul>
<li>A parent project that hosts most of the maven-android config as a parent pom.</li>
<li>A project that hosts the keystore, and is checked in to source-code control (I actually use the same project for both the parent pom and keystore).</li>
<li>A (Android Library) project that contains a copy of the market licensing code (Google recommend keeping a separate copy outside of the SDK install directory). Ours is checked in to SVN for convenient sharing.</li>
<li>Multiple Android library (apklib) projects for our own code that is shared between multiple apps (apk's).</li>
<li>Multiple Android (apk) projects</li>
</ul>

<p>Since most of the maven configuration is provided by the parent pom, each new project requires only minimal configuration. The parent pom for our android projects currently looks like this:</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xsi:schemaLocation="
  http://maven.apache.org/POM/4.0.0 
  http://maven.apache.org/xsd/maven-4.0.0.xsd" 
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;com.mycompany&lt;/groupId&gt;
  &lt;artifactId&gt;android&lt;/artifactId&gt;
  &lt;version&gt;1.0&lt;/version&gt;
  &lt;packaging&gt;pom&lt;/packaging&gt;
  &lt;build&gt;
    &lt;sourceDirectory&gt;src/java/main&lt;/sourceDirectory&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;!--This plugin's configuration is used to store 
                Eclipse m2e settings only. It has no influence 
                on the Maven build itself.--&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.eclipse.m2e&lt;/groupId&gt;
          &lt;artifactId&gt;lifecycle-mapping&lt;/artifactId&gt;
          &lt;version&gt;1.0.0&lt;/version&gt;
          &lt;configuration&gt;
            &lt;lifecycleMappingMetadata&gt;
              &lt;pluginExecutions&gt;
                &lt;pluginExecution&gt;
                  &lt;pluginExecutionFilter&gt;
                &lt;groupId&gt;
                  com.jayway.maven.plugins.android.generation2
            &lt;/groupId&gt;
                    &lt;artifactId&gt;android-maven-plugin&lt;/artifactId&gt;
                    &lt;versionRange&gt;[3.0.0,)&lt;/versionRange&gt;
                &lt;goals&gt;
                  &lt;goal&gt;proguard&lt;/goal&gt;
                &lt;/goals&gt;
              &lt;/pluginExecutionFilter&gt;
              &lt;action&gt;
                &lt;ignore&gt;&lt;/ignore&gt;
              &lt;/action&gt;
                &lt;/pluginExecution&gt;
              &lt;/pluginExecutions&gt;
            &lt;/lifecycleMappingMetadata&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;com.jayway.maven.plugins.android.generation2&lt;/groupId&gt;
        &lt;artifactId&gt;android-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;3.0.0&lt;/version&gt;
        &lt;configuration&gt;
          &lt;androidManifestFile&gt;
            ${project.basedir}/AndroidManifest.xml
              &lt;/androidManifestFile&gt;
          &lt;assetsDirectory&gt;${project.basedir}/assets&lt;/assetsDirectory&gt;
          &lt;resourceDirectory&gt;${project.basedir}/res&lt;/resourceDirectory&gt;
          &lt;nativeLibrariesDirectory&gt;
            ${project.basedir}/src/main/native
          &lt;/nativeLibrariesDirectory&gt;
          &lt;sdk&gt;
            &lt;platform&gt;14&lt;/platform&gt;
          &lt;/sdk&gt;
          &lt;proguard&gt;
            &lt;skip&gt;false&lt;/skip&gt;
          &lt;/proguard&gt;
          &lt;sign&gt;
            &lt;debug&gt;false&lt;/debug&gt;
          &lt;/sign&gt;
          &lt;deleteConflictingFiles&gt;true&lt;/deleteConflictingFiles&gt;
          &lt;undeployBeforeDeploy&gt;true&lt;/undeployBeforeDeploy&gt;
        &lt;/configuration&gt;
        &lt;extensions&gt;true&lt;/extensions&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-jarsigner-plugin&lt;/artifactId&gt;
        &lt;version&gt;1.2&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;signing&lt;/id&gt;
            &lt;goals&gt;
              &lt;goal&gt;sign&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;phase&gt;package&lt;/phase&gt;
            &lt;inherited&gt;true&lt;/inherited&gt;
            &lt;configuration&gt;
              &lt;archiveDirectory&gt;&lt;/archiveDirectory&gt;
              &lt;includes&gt;
                &lt;include&gt;target/*.apk&lt;/include&gt;
              &lt;/includes&gt;
              &lt;keystore&gt;../android/keystore&lt;/keystore&gt;
              &lt;storepass&gt;keystore-password-goes-here&lt;/storepass&gt;
              &lt;keypass&gt;key-password-goes-here&lt;/keypass&gt;
              &lt;alias&gt;key-alias-goes-here&lt;/alias&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.3.2&lt;/version&gt;
        &lt;configuration&gt;
          &lt;source&gt;1.6&lt;/source&gt;
          &lt;target&gt;1.6&lt;/target&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;
</code></pre>

<p>An example of a pom from a library (apklib) project looks like this:</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xsi:schemaLocation="
    http://maven.apache.org/POM/4.0.0 
    http://maven.apache.org/xsd/maven-4.0.0.xsd" 
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;com.mycompany&lt;/groupId&gt;
    &lt;artifactId&gt;android&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;android.util&lt;/artifactId&gt;
  &lt;version&gt;1.0.1-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;Android Utils&lt;/name&gt;
  &lt;packaging&gt;apklib&lt;/packaging&gt;
  &lt;description&gt;&lt;/description&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.google.android&lt;/groupId&gt;
      &lt;artifactId&gt;android&lt;/artifactId&gt;
      &lt;version&gt;2.2.1&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
        &lt;!-- made available to android by 
             "maven android sdk deployer" --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;android.support&lt;/groupId&gt;
      &lt;artifactId&gt;compatibility-v13&lt;/artifactId&gt;
      &lt;version&gt;r6&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;oauth.signpost&lt;/groupId&gt;
      &lt;artifactId&gt;signpost-core&lt;/artifactId&gt;
      &lt;version&gt;1.2&lt;/version&gt;
      &lt;scope&gt;compile&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;oauth.signpost&lt;/groupId&gt;
      &lt;artifactId&gt;signpost-commonshttp4&lt;/artifactId&gt;
      &lt;version&gt;1.2&lt;/version&gt;
      &lt;scope&gt;compile&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.twitter4j&lt;/groupId&gt;
      &lt;artifactId&gt;twitter4j-core&lt;/artifactId&gt;
      &lt;version&gt;2.1.0&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;scm&gt;
    &lt;connection&gt;scm:svn:svn://repo/project/trunk&lt;/connection&gt;
    &lt;developerConnection&gt;
      scm:svn:svn://repo/project/trunk
    &lt;/developerConnection&gt;
  &lt;/scm&gt;
&lt;/project&gt;
</code></pre>

<p>An example pom for an app (apk) project looks like this:</p>

<pre><code>&lt;project xsi:schemaLocation="
  http://maven.apache.org/POM/4.0.0 
  http://maven.apache.org/xsd/maven-4.0.0.xsd" 
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;com.mycompany&lt;/groupId&gt;
    &lt;artifactId&gt;android&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;android.ui&lt;/artifactId&gt;
  &lt;version&gt;1.0.1-SNAPSHOT&lt;/version&gt;
  &lt;packaging&gt;apk&lt;/packaging&gt;
  &lt;description&gt;&lt;/description&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.mycompany&lt;/groupId&gt;
      &lt;artifactId&gt;domain&lt;/artifactId&gt;
      &lt;version&gt;1.0.1-SNAPSHOT&lt;/version&gt;
      &lt;type&gt;jar&lt;/type&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.mycompany&lt;/groupId&gt;
      &lt;artifactId&gt;android.util&lt;/artifactId&gt;
      &lt;version&gt;1.0.1-SNAPSHOT&lt;/version&gt;
      &lt;type&gt;apklib&lt;/type&gt;
    &lt;/dependency&gt;
    &lt;!-- this project contains a copy of 
             the sdk licensing code --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.mycompany&lt;/groupId&gt;
      &lt;artifactId&gt;android.licensing&lt;/artifactId&gt;
      &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
      &lt;type&gt;apklib&lt;/type&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.google.android&lt;/groupId&gt;
      &lt;artifactId&gt;android&lt;/artifactId&gt;
      &lt;version&gt;2.2.1&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
        &lt;!-- made available to android 
             by "maven android sdk deployer" --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;android.support&lt;/groupId&gt;
      &lt;artifactId&gt;compatibility-v13&lt;/artifactId&gt;
      &lt;version&gt;r6&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;oauth.signpost&lt;/groupId&gt;
      &lt;artifactId&gt;signpost-core&lt;/artifactId&gt;
      &lt;version&gt;1.2&lt;/version&gt;
      &lt;scope&gt;compile&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;oauth.signpost&lt;/groupId&gt;
      &lt;artifactId&gt;signpost-commonshttp4&lt;/artifactId&gt;
      &lt;version&gt;1.2&lt;/version&gt;
      &lt;scope&gt;compile&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.twitter4j&lt;/groupId&gt;
      &lt;artifactId&gt;twitter4j-core&lt;/artifactId&gt;
      &lt;version&gt;2.1.0&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!-- prevent commons-logging from being included by 
         the Google HTTP client dependencies, which creates 
         a truck load of warnings and eventually kills eclipse --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;commons-logging&lt;/groupId&gt;
        &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;
        &lt;version&gt;1.1.1&lt;/version&gt;
        &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;scm&gt;
    &lt;connection&gt;scm:svn:svn://repo/project/trunk&lt;/connection&gt;
    &lt;developerConnection&gt;
      scm:svn:svn://repo/project/trunk
    &lt;/developerConnection&gt;
  &lt;/scm&gt;
&lt;/project&gt;
</code></pre>

<h3>Building a Release</h3>

<p>Building a release, including running proguard to optimise and obfuscate the apk, and signing the apk from the shared keystore is now available from the maven cmdline with (as you'd expect):</p>

<pre><code>mvn clean package
</code></pre>

<p>Its still early days for us, so I'm sure there are still wrinkles to iron out, but so far it seems to be working pretty well.</p>

<p>You can start the emulator and deploy the packaged apk into it using two further commands:</p>

<pre><code>mvn android:emulator-start android:deploy
</code></pre>

<p>Enjoy!</p>
]]></description>
          <category>android</category>
          <category>ADT</category>
          <category>maven</category>
          <category>team</category>
          <category>subversion</category>
          <category>release</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Mon, 09 Jan 2012 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Converting Eclipse ADT Android projects to build with Maven]]></title>
        <link><![CDATA[http://steveliles.github.com/converting_eclipse_adt_android_projects_to_build_with_maven.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/converting_eclipse_adt_android_projects_to_build_with_maven.html</guid>
        <description><![CDATA[<p>Getting Android Development Tools (ADT) for Eclipse to play nicely with Maven is quite a fiddle, involving a bunch of plugins for both Eclipse and Maven. Here's how I got it working (details after the comic-strip...). You might also be interested in two follow posts - <a href="http://steveliles.github.com/setting_up_maven_android_and_svn_for_team_development_of_multiple_applications.html">setting up for team development with Android, Maven and Eclipse</a> and <a href="http://steveliles.github.com/maven_android_and_eclipse_joining_the_team.html">joining a team developing with Android, Maven and Eclipse</a>:</p>

<p><a target="top" href="https://lh5.googleusercontent.com/-pjftaBy3xwo/TxsaQStUT_I/AAAAAAAAIlg/XqSu-Tb2OiQ/s1600/35.jpg"><img alt="Converting Eclipse ADT projects to build with Maven, a lego comic strip made with Comic Strip It!" src="https://lh5.googleusercontent.com/-pjftaBy3xwo/TxsaQStUT_I/AAAAAAAAIlg/XqSu-Tb2OiQ/s600/35.jpg"></a></p>

<h3>Plugins, Tools and Dependencies</h3>

<ol>
<li>The Maven-Android plugin is <a href="http://maven.apache.org/">Maven-3.0.3+</a> only, so you'll need to upgrade Maven if you are running an older version. The good news for Maven-2 users is the Maven guys worked hard to make 3 backwards compatible - and so far I've had no problems on some pretty complex projects.</li>
<li>Eclipse Helios (3.6) or Indigo (3.7)</li>
<li>The Android Developer Tools and SDK (of course).</li>
<li>The <a href="http://www.eclipse.org/m2e/download/">m2eclipse</a> Eclipse plugin (supposedly not required with Eclipse Indigo, but I had to install it)</li>
</ol>

<h3>Setup and Configuration</h3>

<p>First, install maven 3.0.3 (or whatever newer maven is available).</p>

<p>Next install the <a href="http://www.eclipse.org/m2e/download/">m2eclipse</a> plugin (you might want to check if you have it already - Indigo is supposed to come pre-supplied, but that probably depends on which Eclipse bundle you install. I usually go with Classic, and did not have m2eclipse. YMMV).</p>

<p>Now update your android sdk:</p>

<ul>
<li>Using sdk manager, install all api levels you are interested in, including "google apis by google inc."</li>
<li>note: be sure to accept the license agreement for each selected jar (the ? should change to a green tick for ALL).</li>
<li>note: I find that the sdk manager either does not install all ticked packages in one go, or incorrectly reports the number of packages remaining to be installed - it "completes" but there are still pending installs (the "install N packages..." button re-enables with N > 0). I find it safest to restart SDK manager between each attempt so that it correctly shows what is installed.</li>
</ul>

<p>If you want to work with Android 3 you need to perform an additional step. Maven Central does not have the jars available, so you'll need to use <a href="https://github.com/mosabua/maven-android-sdk-deployer">sdk deployer</a> to push them into your repository.</p>

<ul>
<li>check out with git (git clone https://github.com/mosabua/maven-android-sdk-deployer.git)</li>
<li>install android jars as required by running mvn from inside the sdk deployer project directory, example: <code>mvn install -P 1.6</code>, or install the whole lot with <code>mvn install</code></li>
<li><p>if you have a shared / remote / central repository as we do, you will want to deploy the android jars there too. To do this you need to fill two fields in the android-sdk-deployer's pom.xml that the creator <a href="https://github.com/mosabua">Manfred Moser</a> helpfully separated out</p>

<pre><code>&lt;repo.id&gt;kv-repository&lt;/repo.id&gt;
&lt;repo.url&gt;scp://my-repo-host/repository&lt;/repo.url&gt;
</code></pre></li>
</ul>

<p>OK, we're done with installing!</p>

<h3>Create your pom.xml</h3>

<p>There are various ways you can create a pom for your existing Android projects. I went with the simple expedient of using mvn archetype:generate ...</p>

<ul>
<li>from a directory you are happy to create projects in, execute <code>mvn archetype:generate</code></li>
<li>you will be presented with an enormous list of archetypes - type android and hit return</li>
<li>the list should have been filtered down to about 3 from "de.acquinet.android..."</li>
<li>select "de.akquinet.android.archetypes:android-quickstart" - for me this was option 1</li>
<li>follow the prompts to conclusion - this will create a simple android project, including the pom.xml for an apk project.</li>
</ul>

<p>Once you've done that you can copy the pom to your existing project(s) and modify it manually - this is what I did.</p>

<p>(Note: If you are starting a fresh new project you can just run <code>mvn clean eclipse:eclipse</code> to generate the eclipse project and classpath, then "import" the project into eclipse. After importing your project will just appear as a normal java project (neither maven nor android natures will be ascribed). To remedy that, right-click your project, go to <code>configure-&gt;convert to Maven project</code>, both natures are added automatically and you're ready to rock'n'roll.)</p>

<h3>Integrate Eclipse and Maven</h3>

<p>OK, last part ... Getting Eclipse and Maven to play nicely.</p>

<p>If you open the project in Eclipse now you'll probably find that it doesn't like your pom.xml. When you open the pom with m2eclipse installed it will open with the graphical xml editor. You'll notice that there's an error <code>plugin execution not covered by lifecycle configuration...</code>. </p>

<p><img src="https://lh5.googleusercontent.com/-Aki7I_BiCLw/Tx6hX3ZXmkI/AAAAAAAAIoU/KNQvbH5sNRI/s600/plugin-execution-crop.png" alt="error when pom packaging set to apk or apklib" /></p>

<p>Click the error and some details open up, including two quick fixes. Click the first quick fix ("discover new m2e connectors"). The following dialog pops up and after a short search, shows the m2e-android connector:</p>

<p><img src="https://lh4.googleusercontent.com/-YeihPZ0PxWQ/TwRWknaVQeI/AAAAAAAAIas/0NnoMugrFa4/s800/install-m2e-connectors.png" alt="discover connectors dialog" /></p>

<p>Install the connector and the warnings <em>should</em> go away. Actually on one of my two machines they did not - I don't know why, but I had to take the 2nd quick-fix option of turning it off in Eclipse. For me that's just about ok, as I want the maven build to be the master anyway.</p>

<p>Congrats, you should now have a happy Eclipse project, and be able to build it using maven as expected.</p>

<h3>What about android library projects?</h3>

<p>Well basically its the same deal. I actually started with the library projects. The main difference is <packaging> element in the pom should be set to apklib instead of apk.</p>
]]></description>
          <category>android</category>
          <category>eclipse</category>
          <category>ADT</category>
          <category>maven</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Wed, 04 Jan 2012 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Android Source Code available!]]></title>
        <link><![CDATA[http://steveliles.github.com/android_source_code_available.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/android_source_code_available.html</guid>
        <description><![CDATA[<p><a href="https://lh5.googleusercontent.com/-CGAW8UFmRoQ/TxtLqQXEqVI/AAAAAAAAImY/PA_H2G-8N-8/s1600/50.jpg"><img alt="Android Source Code released, a lego minifigure comic strip made with Comic Strip It!" src="https://lh5.googleusercontent.com/-CGAW8UFmRoQ/TxtLqQXEqVI/AAAAAAAAImY/PA_H2G-8N-8/s600/50.jpg"></a></p>

<p>I'm quite surprised it took this long, but as of 13th December 2011 the source-code for Android is finally available as part of the SDK downloads, and can be grabbed with the SDK Manager.</p>

<p>There's no jar file available yet, just a folder containing the source for API level 14 and upwards only. The Android dev who announced this stated that it is "extremely unlikely" that the source for earlier API levels would ever be made available as part of the SDK.</p>

<p>Android Developer Tools (Eclipse plugin) doesn't automatically link to this folder either, so you need to set it up manually.</p>

<p>First, get the source:</p>

<ol>
<li>Fire up the SDK Manager - from Eclipse's "Window" menu, select "Android SDK Manager".</li>
<li>Check the boxes next to "Sources for Android SDK" (at time of writing this is available for both API level 14 and 15).</li>
<li>Click the "Install X packages..." button (bottom right corner), and wait while your new goodies download and install.</li>
</ol>

<p>Once you're done downloading, head back to Eclipse and configure your Android project to use the source directory:</p>

<ol>
<li>In the package-explorer, locate the Android jar file (you may have to turn on "Show referenced libraries" from the little down-arrow icon in the top-right corner of the Package Explorer toolbar before it will show up in the list).</li>
<li>Right-click the jar and choose "Properties" - a dialog pops up.</li>
<li>Select "Java Source Attachment", then click "External Folder..."</li>
<li>Navigate to the source directory, which will be located inside your Android SDK install directory (mine is at /home/steve/dev/sdks/android-sdk-linux/sources/android-14. Select OK to leave the file-chooser dialog, and OK again to leave the jar Properties dialog.</li>
<li>Hover any Android class and ctrl-click (or place the caret on the class name and hit F3) to enjoy the source code for that class :)</li>
</ol>

<p>For the full source-code saga check out the <a href="http://code.google.com/p/android/issues/detail?id=979">issue-tracker entry</a> requesting the source to be made available (be prepared for a long read!)</p>
]]></description>
          <category>Android</category>
          <category>Source</category>
          <category>Code</category>
          <category>SDK</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Tue, 20 Dec 2011 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Perforated postage-stamp border with Inkscape]]></title>
        <link><![CDATA[http://steveliles.github.com/perforated_postage_stamp_border_with_inkscape.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/perforated_postage_stamp_border_with_inkscape.html</guid>
        <description><![CDATA[<p>This short tutorial explains how I created a curved-serrated border - such as you would find on a tear-off postage stamp - using the Inkscape vector graphics tool (v0.48.2). It is extremely easy to do, and shouldn't take more than 5 minutes.</p>

<h3>Getting Inkscape</h3>

<p>If you're running a debian based linux you can install Inkscape with:</p>

<pre><code>sudo apt-get install inkscape
</code></pre>

<p>Ubuntu users can install it using the graphical Ubuntu software centre. Downloads for other OS's can be found <a href="http://inkscape.org/download/">here</a>.</p>

<h3>Creating the perforated border</h3>

<p>First draw a rectangle using the <code>"rectangles and squares (F4)"</code> tool. Make this reasonably large. </p>

<p>Then select the <code>"circles, ellipses and arcs (F5)"</code> tool and draw a much smaller circle. Holding down the ctrl key while drawing the circle will lock the aspect ratio so that you don't end up with an ellipse.</p>

<p><img src="https://lh5.googleusercontent.com/-f7Ifgk1xqds/Tu4lanssEDI/AAAAAAAAH20/ZIkzqyhFnEM/s800/step-2.png" alt="Rectangle and circle" /></p>

<p>Next, select both the circle and the rectangle by first selecting the circle then holding down the shift key and selecting the rectangle.</p>

<p>Now from the <code>"Extensions"</code> menu, select <code>"Generate from path"</code> and in the sub-menu, select <code>"Pattern along path"</code>. The <code>"Pattern along Path"</code> dialog pops up. </p>

<p><img src="https://lh6.googleusercontent.com/-Q-jYlXWOous/Tu4laEZHkvI/AAAAAAAAH28/Sz3ydQTqghQ/s800/pattern-along-path.png" alt="Pattern along path dialog" /></p>

<p>Choose <code>"Repeated"</code> in the <code>"Copies of the pattern"</code> combo, in <code>"Deformation type"</code> choose <code>"Snake"</code>, and pick a number for <code>"Space between copies"</code> - this is the distance between each circle that will be cut out from the border of the rectangle, so good values depend on the size of your circle and subjective taste. Hit <code>"apply"</code>.</p>

<p><img src="https://lh3.googleusercontent.com/-ccgBpNnVZsY/Tu4laDpsFhI/AAAAAAAAH2s/qpmSfkjxo0M/s800/first-pattern-step.png" alt="Circles applied to the path" /></p>

<p>Now we want to <em>remove</em> the path created by the circles around the border of the rectangle. To do that, first select the circles around the edge of the rectangle, then (holding down shift) select the rectangle itself and then choose <code>"Difference"</code> from the <code>"Path"</code> menu.</p>

<p><img src="https://lh6.googleusercontent.com/-XoboYeO1yHM/Tu4lZbdS9DI/AAAAAAAAH2k/ZqTIKj2oecQ/s800/difference.png" alt="Path difference effect" /></p>

<p>Change the colour of your postage-stamp shape to black (fill and stroke), then select it and hit ctrl-c to copy it, then ctrl-v to paste a new copy. Re-select the original and choose <code>"Filters-&gt;Blurs-&gt;Evanescent"</code> - this creates a nice blurred shadow effect.</p>

<p>Select the new copy and change it to an off-white colour (I went for #fbfad4ff), then move it so that it sits just a few pixels above and to the left of the original (blurred shadow) shape.</p>

<p><img src="https://lh3.googleusercontent.com/-Pgk_1jBRtT0/Tu4lZThH_iI/AAAAAAAAH2g/XeJE1jFDNZU/s800/postage-stamp-inkscape.png" alt="the finished postage stamp in inkscape" /></p>

<p>That's it, all done! Now you can add whatever content you like to your stamp and then export as a bitmap image. Below you can see what mine looks like exported as a png. Notice that the corners aren't quite "right" - this is because I didn't spend any time trying to ensure that the rectangle side-lengths were appropriately divisible by the circle + the space between copies - something that's worth doing if you want to get your stamp to look "just right".</p>

<p><img src="https://lh6.googleusercontent.com/-jWvZBSpzLmA/Tu4lZKrXkhI/AAAAAAAAH2c/qrRRQYx43DQ/s800/postage-stamp.png" alt="png postage stamp" /></p>
]]></description>
          <category>inkscape</category>
          <category>perforated</category>
          <category>border</category>
          <category>vector</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Sun, 18 Dec 2011 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Subversion 1.7 Eclipse integration in Ubuntu]]></title>
        <link><![CDATA[http://steveliles.github.com/subversion_1_7_eclipse_integration_in_ubuntu.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/subversion_1_7_eclipse_integration_in_ubuntu.html</guid>
        <description><![CDATA[<p>Getting Subversion 1.7 integration working with Eclipse (3.7.1) and Subclipse 1.8 isn't all that straight-forward because Canonical currently only support the older Javahl-1.6 in their repositories. </p>

<p>If you don't want to switch repo's your best bet is to go with Subclipse 1.6 and the 1.6 version of javahl (and subversion) from the official Canonical Ubuntu repositories.</p>

<p>If you do want to go ahead with SVN 1.7, here's how I got it working by switching to repo's provided by dominik stadler:</p>

<ol>
<li>Add dominik's repository: <code>sudo apt-add-repository ppa:dominik-stadler/subversion-1.7</code></li>
<li>Update apt: <code>sudo apt-get update</code></li>
<li>Install libsvn-java: <code>sudo apt-get install libsvn-java</code></li>
<li>Install subversion 1.7: <code>sudo apt-get install subversion</code></li>
</ol>

<p>To enable Eclipse to see your libsvn-java installation, go to the eclipse install directory (I install in <code>/home/steve/dev/tools/eclipse</code>) and edit the eclipse.ini file. </p>

<p>You need to add <code>-Djava.library.path=/usr/lib/jni</code>, which is where libsvn-java's native libraries get installed. Add it immediately following <code>-vmargs</code>. My eclipse.ini file now looks like this:</p>

<pre><code>-startup
plugins/org.eclipse.equinox.launcher_1.2.0.v20110502.jar
--launcher.library
plugins/org.eclipse.equinox.launcher.gtk.linux.x86_64_1.1.100.v20110505
-showsplash
org.eclipse.platform
--launcher.XXMaxPermSize
256m
--launcher.defaultAction
openFile
-vmargs
-Djava.library.path=/usr/lib/jni
-Xms40m
-Xmx600m
</code></pre>

<p>If you use Subclipse but never previously installed Javahl you probably see irritating warning dialogs the first time you do <em>anything</em> in Eclipse after a restart. Installing javahl correctly will prevent those :). </p>

<p><a href="https://lh3.googleusercontent.com/-KJtp8zUoqwQ/TxtOTq8hF-I/AAAAAAAAImw/fdzs2yeDUxw/s1600/53.jpg"><img alt="Eclipse, SVN and Ubuntu - Javahl, all playing nicely - a lego minifigure comic strip made with Comic Strip It!" src="https://lh3.googleusercontent.com/-KJtp8zUoqwQ/TxtOTq8hF-I/AAAAAAAAImw/fdzs2yeDUxw/s600/53.jpg"></a></p>

<p>Merry Christmas!</p>
]]></description>
          <category>ubuntu</category>
          <category>eclipse</category>
          <category>subversion</category>
          <category>javahl</category>
          <category>subclipse</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Fri, 16 Dec 2011 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Google and rel=author - not a level playing field]]></title>
        <link><![CDATA[http://steveliles.github.com/google_and_rel_author_not_a_level_playing_field.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/google_and_rel_author_not_a_level_playing_field.html</guid>
        <description><![CDATA[<p>If you've read my earlier post documenting my attempts to get Google to recognize my <a href="microformats_rich_snippets_rel_author_and_search_listings.html">rel=author</a> markup you'll see that I expended quite a bit of effort trying to get my mugshot to appear with search result listings for my blog pages. Here's what I'm aiming for:</p>

<p><img src="https://lh3.googleusercontent.com/-DKGP9ZJF8G0/Ts7aVKcwJiI/AAAAAAAAHyE/ZHCauxKCvYM/s600/rich-snippets-search-listing.png" alt="rich-snippets test tool example of how search-result listings could look" /></p>

<p>Its been more than a month now, and the Googlebot has crawled my site many times, but still no mugshots. </p>

<p>Just lately I'm starting to think that there's absolutely nothing wrong with how I've marked up my content (this is confirmed by Google's rich-snippets testing tool as you can see in the screen-shot above). Rather I'm beginning to suspect a minor evil (or stupidity) is at play.</p>

<h3>rel=author: The small-print</h3>

<p>My suspicions were aroused on my latest re-reading of Google's documentation on rel=author. There are three things that struck me on this re-reading:</p>

<p>First, on the subject of your Google Profile picture, Google have this to say:</p>

<blockquote>
  <p>"you'll need a Google Profile with a good, recognizable headshot as your profile photo"</p>
</blockquote>

<p>Mm, ok, well my profile pic is a headshot, and (I think) is pretty recognizable... but what, in Google's subjective judgement, is a "good" photo?</p>

<p>Second, and more ominously:</p>

<blockquote>
  <p>"Google doesn't guarantee to show author information in Google Web Search or Google News results."</p>
</blockquote>

<p>Riiiight. Here's the thing: when do Google actually show author information? Is it based on something algorithmic as you might expect from Google (e.g. PageRank), or is it a subjective human judgement?</p>

<p>Finally:</p>

<blockquote>
  <p>"Once you're done, please complete this <a href="https://spreadsheets.google.com/a/google.com/spreadsheet/viewform?formkey=dHdCLVRwcTlvOWFKQXhNbEgtbE10QVE6MQ">form</a> so we can let you know of any implementation issues. While we won't be able to individually reply to everyone who fills out this form, we may be in touch with questions about your data."</p>
</blockquote>

<p>OK, so this suggests that there actually may be a human in the loop, and google are actively white-listing sites for inclusion of author information. </p>

<p>I hope this is the case, because that would mean at least some small chance that my authorship info will <em>eventually</em> appear in search result listings.</p>

<h3>page-rank: The rich get richer</h3>

<p>Right now - perhaps somewhat pessimistically - I'm guessing that Google will show authorship information if you already have a sufficiently high page-rank (I've no idea what rank is required, but I'm pretty sure I'm a long way below it). </p>

<p>Here's why I think that:</p>

<ol>
<li>It would be very un-Google-like - not to mention unscalable - to have a human in the loop making subjective judgements.</li>
<li>Page-rank gives Google a heuristic on which to judge the quality of a site, and they (understandably) want to promote high-quality sites more vigourously.</li>
</ol>

<h3>Google: Evil, or just stupid?</h3>

<p>And here's why I think that is borderline evil, or at least stupid: it creates a situation where the already popular gain even more popularity, and the rest of us fade even further into obscurity. Its an example of the <a href="http://en.wikipedia.org/wiki/Greedy_algorithm">greedy algorithm</a> at work. </p>

<p>Come on Google - I'm following your rules to the letter, working hard to make the web a better place and helping you to better <a href="http://www.google.com/about/corporate/company/">organise the world's information</a>, why aren't you taking advantage of that?</p>

<h3>Conclusion: It's all just speculation</h3>

<p>Actually my only real problem with all this is that it isn't clear how, when or why authorship information will or will not be used, which leads to the sort of speculation I've presented in this article. </p>

<p>If it were possible to understand definitively why my authorship information isn't showing I could potentially do something about it instead of spinning my wheels guessing how to make it work (and whining about it :)).</p>
]]></description>
          <category>google</category>
          <category>good-evil-stupid?</category>
          <category>rel=author</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Fri, 16 Dec 2011 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Another Google Chrome CSS bug]]></title>
        <link><![CDATA[http://steveliles.github.com/another_google_chrome_css_bug.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/another_google_chrome_css_bug.html</guid>
        <description><![CDATA[<p><style>
.legible { text-rendering:optimizelegibility; }
.shadow { box-shadow: 0px 0px 20px black;}
</style>
Since I moved my blog from blogger I've noticed on many occasions that Chrome would screw up the text rendering on the first view of a page. Hit F5 to refresh and it goes away. For a long time I thought this was related to my use of web-fonts (the excellent <a href="http://www.google.com/webfonts#ChoosePlace:select">Google Web Fonts</a>, but in fact its simpler than that.</p>

<p>Eventually I took the time to look into it a bit more, and narrowed it down to the fact that I am using the <code>text-rendering:optimizeLegibility</code> css directive, which does make a nice difference to the kerning of the fixed-width fonts I'm using (<code>Ubuntu Mono</code>), but also has the apparent side-effect of setting negative margins on those fixed-width texts which make them run into/over surrounding text.</p>

<p>Once I'd figured out what was causing my problem a quick Google search showed I'm not alone. The chromium issue tracker has several relevant bug reports. I chose to add my tuppence to <a href="http://code.google.com/p/chromium/issues/detail?id=96936#c16">bug 96936</a></p>

<h3>Examples of the bug</h3>

<p>Here's what the problem looks like when <code>text-rendering:optimizeLegibility</code> is in use in Chrome 15 (and the as yet unreleased 16 beta):</p>

<p><img class="shadow" title="With 'text-rendering:optimizeLegibility'" src="https://lh5.googleusercontent.com/-T5peLzltfzU/TupN9gwMcoI/AAAAAAAAH18/_CDK0F-qh2Q/s600/text-rendering.png"></p>

<p>And here (and also now in the blog you are reading) is how it looks without optimizeLegibility:</p>

<p><img class="shadow" title="Without 'text-rendering:optimizeLegibility'" src="https://lh6.googleusercontent.com/-sK4tre7Q8dc/TupN-4pchhI/AAAAAAAAH2E/7WYdEGb3kKk/s600/not-text-rendering.png"></p>

<p>If you are reading this in Google Chrome you can check to see if the bug still exists by taking a look at the example text below, which is taken from the sample I submitted to <a href="http://code.google.com/p/chromium/issues/detail?id=96936#c16">bug 96936</a>. If you see overlapping characters below, the bug is not fixed in your version of Chrome.</p>

<div class="example legible">
  <p>Code blocks inside paragraphs like <code>this</code> don't <code>look</code> very <code>nice</code> with text-rendering set to optimizeLegibility.</p>
</div>

<p><em>Note</em>: Some interesting characteristics of the bug include:</p>

<ol>
<li>Text renders correctly if you refresh the page after the initial visit</li>
<li>It appears much worse with certain fonts - fixed-width/monospace fonts in particular seem to suffer</li>
<li>The width of the text appears to be calculated incorrectly, not just margins - you can see this in the first screen-shot where the date tab cuts into the end of "2011".</li>
</ol>
]]></description>
          <category>css</category>
          <category>chrome</category>
          <category>bug</category>
          <category>font</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Wed, 14 Dec 2011 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Google Chrome CSS bug]]></title>
        <link><![CDATA[http://steveliles.github.com/google_chrome_css_bug.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/google_chrome_css_bug.html</guid>
        <description><![CDATA[<p><style>
.s1 { display:inline; }
.s2 { display:table; }
</style>
Today while working on a project that uses <code>contenteditable &lt;div&gt;</code> elements I got stuck on a bug for a good long time because of the crazy failure-mode it exhibited. You can try for yourself in the <code>contenteditable</code> below (sooner or later I hope this bug will be fixed and the example will stop working :)).</p>

<div class="example">
  <div class="s1 s2" contenteditable="true">Try deleting the first character in this sentence (you won't be able to), or the last (the caret will disappear after deleting the character)</div>
</div>

<p>I'm working on a reasonably complex editor using Google Web Toolkit (GWT) with multiple content-editable <code>&lt;div&gt;</code> elements used to collect text input. You might be wondering why we're using <code>contenteditable</code> instead of <code>&lt;textarea&gt;</code> or something - well here's why:</p>

<ol>
<li>Styling <code>contenteditable</code>'s is much easier</li>
<li>Allowing the input area to grow to fit the contained content "just works" - this is pretty hard to do with a <code>&lt;textarea&gt;</code>, though it can be done.</li>
<li>We can deliberately insert html into the <code>contenteditable</code> as the user types - for example i'm creating a tag editor, and by using a <code>contenteditable</code> I can render the tags nicely even as the user is typing - say, whenever the user enters a delimiter.</li>
</ol>

<p>Of course, <code>contenteditable</code>'s are not without problems - not least you have to deal with the html content that they produce (e.g. <code>&lt;p&gt;</code> or <code>&lt;div&gt;</code> tags produced by the enter key), and arbitrary html resulting from paste operations, but that's another story.</p>

<h2>How the bug manifests</h2>

<p>Anyways, I have a bunch of <code>contenteditable</code>'s in my web-app, all seemingly working fine. Then I notice that <em>one</em> of them is behaving a bit strangely: if I try to delete characters from the end of the content the <code>contenteditable</code> loses focus after deleting one character. </p>

<p>Being a complex app I have all kinds of event-handlers bound to these <code>contenteditable</code>'s, so I started removing the likely suspects one by one, trying to find the culprit.</p>

<p>Eventually I'd removed all the event-handlers and was scratching my head, wondering how on earth I could still have this problem on just one of my <code>contenteditable</code>'s. </p>

<p>I checked in Firefox - no problem, all working. I compiled the GWT app to pure javascript and ran outside of GWT development mode, just to be sure it wasn't some weird GWT-chrome-plugin bug - still suffering. I looked for other event handlers bound higher up the DOM tree. Still no joy.</p>

<h2>When the bug manifests</h2>

<p>Finally - almost in desperation - I started inspecting the CSS (surely the CSS could not be causing such bizarre behaviour, right? Uh, wrong!).</p>

<p>After some puzzling I reduced the replication steps down to some very simple html and an unfortunate collision of CSS styles:</p>

<pre><code>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;bug&lt;/title&gt;
    &lt;style&gt;
      .s1 { display:inline; }
      .s2 { display:table; }
    &lt;/style&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class="s1 s2" contenteditable="true"&gt;delete me&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Of course this CSS doesn't make sense - the two <code>display</code> settings conflict. That's easy to spot in a simple example like this, but much more difficult in a complex application with a large DOM tree and many many CSS styles. </p>

<p>As for the failure mode, you might expect one style to "win", and forgivably it could be a different style in different browsers. </p>

<p>What you really <em>don't</em> expect is the bizarre behaviour we experienced. The bug currently manifests in Chrome 15 (and 16 beta) on Linux, Mac and Windows(7), and is reported in the chromium issue tracker as <a href="http://code.google.com/p/chromium/issues/detail?id=107366">bug 107366</a>.</p>
]]></description>
          <category>css</category>
          <category>chrome</category>
          <category>bug</category>
          <category>contenteditable</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Tue, 13 Dec 2011 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Pointing a domain name to an Amazon S3 bucket]]></title>
        <link><![CDATA[http://steveliles.github.com/pointing_a_domain_name_to_an_amazon_s3_bucket.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/pointing_a_domain_name_to_an_amazon_s3_bucket.html</guid>
        <description><![CDATA[<p>I recently registered a domain name for some static content i'm hosting in Amazon's Simple Storage Service (S3). <a href="hosting_a_static_website_in_amazon_s3.html">Setting up an S3 bucket as a static website</a> is pretty straight-forward, but pointing your domain to it is tricky. After a bit of playing and googling I think I've got the right combination:</p>

<h4>Step-1: Create your S3 website bucket</h4>

<p>When naming your bucket you <em>must</em> use the same name as your domain - e.g. <code>www.mydomain.com</code>. The website end-point will then be something like <code>www.mydomain.com.s3-website-eu-west-1.amazonaws.com</code>. If you don't do this you will get warnings (404 not found, nosuchbucket).</p>

<h4>Step-2: Remove any existing "A" records</h4>

<p>Using the administration tools provided by your domain registrar, remove any <code>"A"</code> records that may have been automatically set up for your domain - you don't want your domain name pointing to "parking" sites.</p>

<h4>Step-3: Forward your root domain to www</h4>

<p>Forward your root domain (<code>mydomain.com</code>) to the <code>www</code> subdomain (<code>www.mydomain.com</code>). Most registrars and hosting companies give you the ability to forward domain names. With Fasthosts I had to "add" forwarding to my package, but it didn't cost anything extra.</p>

<p>If you can <em>mask</em> the forwarding, so much the better, as this will mean that visitors to your site will see your registered domain rather than the S3 url (depends what your registrar offers - fasthosts and godaddy both support masked forwarding). In Fasthosts admin, masking is a checkbox option in the forwarding configuration.</p>

<h4>Step-4: Add a `CNAME` pointing to your S3 site</h4>

<p>Add a CNAME for the <code>www</code> subdomain, pointing to your S3 website (<code>www.mydomain.com.s3-website-eu-west-1.amazonaws.com</code>). The admin tools should make this easy for you.</p>

<p><img src="https://lh4.googleusercontent.com/-6aH7JLLgpVQ/TtFmqVjl4QI/AAAAAAAAH0k/vT_wK-8EEd0/s522/cname-config.png" alt="Add a CNAME" /></p>

<p>That's it - all you have to do now is wait for the changes to propagate (this can take a while).</p>

<h4>See it in action...</h4>

<p>You can see this in action with my setup:</p>

<p>My domain-name is overpayment-calculator.com, which forwards to <a href="http://www.overpayment-calculator.com">www.overpayment-calculator.com</a>, which points (via CNAME) at my S3 bucket <a href="http://www.overpayment-calculator.com.s3-website-eu-west-1.amazonaws.com">www.overpayment-calculator.com.s3-website-eu-west-1.amazonaws.com</a>, masking the S3 name (so that when you visit via the overpayment-calculator.com address you don't see the S3 address in the address bar).</p>

<p><em>p.s.</em> props to <a href="http://www.fasthosts.co.uk/">fasthosts</a> - the dns information propagated extremely quickly - from registering the domain name to acessing my site via that domain name (including the time it took me to do the set up) took less than one hour!</p>
]]></description>
          <category>Amazon</category>
          <category>S3</category>
          <category>domain name</category>
          <category>forward</category>
          <category>mask</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Sat, 26 Nov 2011 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Plus-One any page - Google +1 Bookmarklet]]></title>
        <link><![CDATA[http://steveliles.github.com/plus_one_any_page_google_1_bookmarklet.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/plus_one_any_page_google_1_bookmarklet.html</guid>
        <description><![CDATA[<p>Many pages that you might want to share don't have <code>Google+</code> <img src="images/gplus.png" alt="plus button" /> buttons. This bookmarklet makes it easy to plus-one any page directly while browsing it - share from anywhere!</p>

<p>To install the bookmarklet just drag the <code>Google+1</code> link below to your browser bookmarks bar:</p>

<div style="text-align:center;font-size:75px; font-family:'Ubuntu Mono',monospace;"><a href="javascript:var gpc=document.createElement('div');gpc.style.position='fixed';gpc.style.top='50px';gpc.style.right='50px';gpc.style.padding='50px';gpc.style.backgroundColor='#def';var gp=document.createElement('g:plusone');document.body.insertBefore(gpc,document.body.firstChild);gpc.appendChild(gp);window.___gcfg={lang:'en-GB'};(function(){var po=document.createElement('script');po.type='text/javascript';po.async=true;po.src='https://apis.google.com/js/plusone.js';var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(po,s);})();">Google+1</a></div>

<p>To use the bookmarklet at any time while browsing the web just click the link on your bookmarks bar and a +1 button will appear in the top-right corner of the page. Click the plus one button to share and comment just like you would on any other site that already has +1 buttons (feel free to test it out on this page!).</p>

<p>I have tested this bookmarklet in Chrome 16.0.9 and Firefox 8.0. Please leave a comment if you have trouble with other browsers and I'll see what I can do.</p>

<p>Internet Explorer 6 users might struggle - the bookmarklet code is longer than IE6 can cope with. May I suggest upgrading to one of the many much better browsers available, such as <a href="http://www.google.com/chrome">Chrome</a> or <a href="http://www.mozilla.org/en-US/firefox/new/">Firefox</a>. </p>

<p>Alternatively you can try this bookmarklet (disclaimer: I cannot test it - I don't have IE6) - drag the "Google+1" to your browser links bar:</p>

<div style="text-align:center;margin:auto;font-size:75px; font-family:'Ubuntu Mono',monospace;"><a href="javascript:var gpc=document.createElement('div');gpc.style.position='fixed';gpc.style.top='50px';gpc.style.right='50px';var gp=document.createElement('g:plusone');document.body.insertBefore(gpc,document.body.firstChild);gpc.appendChild(gp);window.___gcfg={lang:'en-GB'};(function(){var po=document.createElement('script');po.type='text/javascript';po.async=true;po.src='https://apis.google.com/js/plusone.js';var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(po,s);})();">Google+1</a>(IE6)</div>

<p>Enjoy!</p>
]]></description>
          <category>google+</category>
          <category>g+</category>
          <category>+1</category>
          <category>plusone</category>
          <category>bookmarklet</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Sat, 26 Nov 2011 00:00:00 +0000</pubDate>
      </item>
      <item>
        <title><![CDATA[Hosting a static website in Amazon S3]]></title>
        <link><![CDATA[http://steveliles.github.com/hosting_a_static_website_in_amazon_s3.html]]></link>
        <guid isPermaLink="true">http://steveliles.github.com/hosting_a_static_website_in_amazon_s3.html</guid>
        <description><![CDATA[<p>Amazon Simple Storage Service - S3 - can be used to host a static web-site, but it isn't immediately obvious how to set this up. Here's how I did it (I'm using the standard AWS console for this):</p>

<h4>Step-1: If you haven't already, sign up for Amazon S3</h4>

<h4>Step-2: Log-in to the AWS console, and go to the S3 Tab</h4>

<h4>Step-3: Create an S3 bucket:</h4>

<p>It doesn't really matter what name you give your bucket unless you plan to <a href="pointing_a_domain_name_to_an_amazon_s3_bucket.html">forward a domain name to your S3 hosted site</a> </p>

<p><img src="https://lh6.googleusercontent.com/-ntmu1ROjx_k/TtEulvLq2qI/AAAAAAAAHy0/kAz8dljKeMU/s578/create-bucket.png" alt="Create a bucket" /></p>

<h4>Step-4: Upload your static site to the bucket</h4>

<p>Select your bucket in the "Buckets" pane, then right-click in the "Objects and Folders" pane and choose "upload". If you are uploading many folders you'll probably want to use the "enhanced" uploader applet.</p>

<h4>Step-5: Set your bucket to be a website:</h4>

<p>First, right-click on your bucket in the "Buckets" pane (far left) and choose "Properties".</p>

<p><img src="https://lh6.googleusercontent.com/-5qHHItMStOU/TtEumMeQGeI/AAAAAAAAHzA/3HSscD7aFr0/s426/bucket-properties.png" alt="Open Bucket Properties" /></p>

<p>The properties of your bucket will appear in the "Properties" pane at the bottom of the screen.</p>

<p><img src="https://lh3.googleusercontent.com/-4B_VhzIeRjw/TtEzQSqQdUI/AAAAAAAAHzY/EcMc-2ruk98/s600/bucket-properties-tabs.png" alt="Bucket Properties" /></p>

<p>In the bucket propertes go to the "Website" tab. Make sure to:</p>

<ol>
<li>Check the "enabled" box</li>
<li>Enter the name of an "index document" in the box (this will be page that should be loaded if someone visits the root of your bucket - websites typically us index.html).</li>
<li>Note the "endpoint" url - this will be the url to your website.</li>
</ol>

<p><img src="https://lh4.googleusercontent.com/-poLROP8Apoc/TtE1Fn9kH2I/AAAAAAAAH0M/XQJ1XrGLoS8/s600/bucket-properties-website.png" alt="Bucket Properties Website Tab" /></p>

<p>If you open the endpoint url in a separate tab in your browser now you will see permission denied errors, so lets fix that...</p>

<h4>Step-6: Make your web-site accessable to viewers:</h4>

<ol>
<li>Still in the bucket "Properties" pane, open the "Permissions" tab and click "Edit Bucket Policy" - a window pops up.</li>
<li>Paste in the code from the box below, replacing <code>mybucketname</code> with, well, your bucket name :)</li>
<li>Click <code>save</code> and your done - go visit that end-point url which should now be hosting your static website :)</li>
</ol>

<p>Here's the permissions policy you need - don't forget to change <code>mybucketname</code>!</p>

<pre><code>{
    "Version": "2008-10-17",
    "Statement": [{
        "Sid": "PublicReadForGetBucketObjects",
        "Effect": "Allow",
        "Principal": {
            "AWS": "*"
        },
        "Action": "s3:GetObject",
        "Resource": "arn:aws:s3:::mybucketname/*"
    }]
}
</code></pre>

<p><img src="https://lh5.googleusercontent.com/-loUsJEs3JC4/TtEulGDjuEI/AAAAAAAAHyw/Q1QYKwZY5WQ/s600/bucket-policy-edit.png" alt="Edit Bucket Policy" /></p>

<h4>Step-7: Registered a domain-name? Point it at your S3 hosted website...</h4>

<p>See my other post on <a href="pointing_a_domain_name_to_an_amazon_s3_bucket.html">how to forward a domain name to an S3 bucket</a>.</p>
]]></description>
          <category>static</category>
          <category>website</category>
          <category>amazon</category>
          <category>S3</category>
          <category>hosting</category>
        <dc:creator><![CDATA[ Steve Liles ]]></dc:creator>
        <pubDate>Sat, 26 Nov 2011 00:00:00 +0000</pubDate>
      </item>
  </channel>
</rss>
